{"mappings":"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","sources":["<anon>","src/scripts/l-system.ts","src/libs/fractal-tree.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirebf15\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirebf15\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nclass $0686233491851b9c$var$FractalTree {\n    constructor(p5, _config){\n        const config = {\n            initialVocab: \"S\",\n            rule: \"S:FB F:FF B:[lFB][rFB]\",\n            branchLength: 20,\n            branchAngle: Math.PI / 4,\n            leafRadius: 3,\n            showHelpers: false,\n            ..._config\n        };\n        this.p5 = p5;\n        this.vocab = config.initialVocab;\n        this.initialVocab = config.initialVocab;\n        this.grammar = this.generateGrammar(config.rule);\n        this.branchLength = config.branchLength;\n        this.branchAngle = config.branchAngle;\n        this.leafRadius = config.leafRadius;\n        this.showHelpers = config.showHelpers;\n    }\n    generateGrammar(rule) {\n        let obj = {};\n        rule.split(\" \").map((elem)=>{\n            const item = elem.split(\":\");\n            obj[item[0]] = item[1];\n        });\n        return obj;\n    }\n    generateVocab(iterations = 6) {\n        let str = \"\";\n        let vocab = this.initialVocab;\n        for(let i = 0; i < iterations; i++){\n            str = \"\";\n            for (const letter of vocab)str += this.grammar.hasOwnProperty(letter) ? this.grammar[letter] : letter;\n            vocab = str;\n        }\n        return this.vocab = vocab;\n    }\n    setValues(key, value) {\n        if (typeof value === \"number\") {\n            key;\n            throw \"Unsupported key passed to setValues()\";\n        }\n        if (typeof value === \"boolean\") switch(key){\n            case \"showHelpers\":\n                this.showHelpers = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n    }\n    update(deltaTime) {\n        return this;\n    }\n    draw() {\n        for (const letter of this.vocab)switch(letter){\n            case \"F\":\n                this.p5.stroke(255);\n                this.p5.strokeWeight(2);\n                this.p5.line(0, 0, 0, -this.branchLength);\n                this.p5.translate(0, -this.branchLength);\n                break;\n            case \"B\":\n                this.p5.stroke(255);\n                this.p5.strokeWeight(2);\n                this.p5.circle(0, 0, this.leafRadius);\n                break;\n            case \"l\":\n                this.p5.rotate(-this.branchAngle);\n                break;\n            case \"r\":\n                this.p5.rotate(this.branchAngle);\n                break;\n            case \"[\":\n                this.p5.push();\n                break;\n            case \"]\":\n                this.p5.pop();\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n}\nvar /**--------------------------------- */ // functions\n$0686233491851b9c$export$2e2bcd8739ae039 = $0686233491851b9c$var$FractalTree;\n\n\n/**--------------------------------- */ let $9fe6ab0a3eadfc95$var$tree;\n/**--------------------------------- */ // sketch\nconst $9fe6ab0a3eadfc95$var$sketch = (p5)=>{\n    const options = {\n        showHelpers: false,\n        size: 400\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        p5.noLoop();\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        //\n        init(p5);\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        p5.translate(window.innerWidth / 2, window.innerHeight - 100);\n        $9fe6ab0a3eadfc95$var$tree.update(p5.deltaTime).draw();\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n        $9fe6ab0a3eadfc95$var$tree = new (0, $0686233491851b9c$export$2e2bcd8739ae039)(p5, {\n            branchLength: 3\n        });\n        $9fe6ab0a3eadfc95$var$tree.generateVocab(7);\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($9fe6ab0a3eadfc95$var$sketch);\n\n\n//# sourceMappingURL=l-systems.2ae52390.js.map\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport FractalTree from 'src/libs/fractal-tree';\r\n\r\n/**--------------------------------- */\r\nlet tree: FractalTree;\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        showHelpers: false,\r\n        size: 400\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        p5.noLoop();\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n\r\n        //\r\n        init(p5);\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n        p5.translate(window.innerWidth / 2, window.innerHeight - 100);\r\n        tree.update(p5.deltaTime).draw();\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n        tree = new FractalTree(p5, {\r\n            branchLength: 3\r\n        });\r\n        tree.generateVocab(7);\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import P5 from 'p5';\r\n\r\ntype TFractalTree = {\r\n    initialVocab: string;\r\n    vocab: string;\r\n    grammar: Record<string, string>;\r\n    branchLength: number;\r\n    branchAngle: number;\r\n    leafRadius: number;\r\n    showHelpers: boolean;\r\n};\r\ntype TFractalTreeConfig = Omit<TFractalTree, 'grammar' | 'vocab'> & { rule: string };\r\n\r\ntype Keys = 'size' | 'showHelpers';\r\n\r\nclass FractalTree {\r\n    p5: P5;\r\n    rule: string;\r\n    initialVocab: string;\r\n    vocab: string;\r\n    grammar: Record<string, string>;\r\n    branchLength: number;\r\n    branchAngle: number;\r\n    leafRadius: number;\r\n    showHelpers: boolean;\r\n\r\n    constructor(p5: P5, _config?: Partial<TFractalTreeConfig>) {\r\n        const config: TFractalTreeConfig = {\r\n            initialVocab: 'S',\r\n            rule: 'S:FB F:FF B:[lFB][rFB]',\r\n            branchLength: 20,\r\n            branchAngle: Math.PI / 4,\r\n            leafRadius: 3,\r\n            showHelpers: false,\r\n            ..._config\r\n        };\r\n        this.p5 = p5;\r\n        this.vocab = config.initialVocab;\r\n        this.initialVocab = config.initialVocab;\r\n        this.grammar = this.generateGrammar(config.rule);\r\n        this.branchLength = config.branchLength;\r\n        this.branchAngle = config.branchAngle;\r\n        this.leafRadius = config.leafRadius;\r\n        this.showHelpers = config.showHelpers;\r\n    }\r\n\r\n    private generateGrammar(rule: string): Record<string, string> {\r\n        let obj: Record<string, string> = {};\r\n        rule.split(' ').map((elem) => {\r\n            const item = elem.split(':');\r\n            obj[item[0]] = item[1];\r\n        });\r\n        return obj;\r\n    }\r\n\r\n    generateVocab(iterations: number = 6): string {\r\n        let str = '';\r\n        let vocab = this.initialVocab;\r\n\r\n        for (let i = 0; i < iterations; i++) {\r\n            str = '';\r\n\r\n            for (const letter of vocab) {\r\n                str += this.grammar.hasOwnProperty(letter) ? this.grammar[letter] : letter;\r\n            }\r\n            vocab = str;\r\n        }\r\n        return (this.vocab = vocab);\r\n    }\r\n\r\n    setValues(key: Keys, value: number | boolean) {\r\n        if (typeof value === 'number') {\r\n            switch (key) {\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n        if (typeof value === 'boolean') {\r\n            switch (key) {\r\n                case 'showHelpers':\r\n                    this.showHelpers = value;\r\n                    break;\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number): this {\r\n        return this;\r\n    }\r\n\r\n    draw(): this {\r\n        for (const letter of this.vocab) {\r\n            switch (letter) {\r\n                case 'F':\r\n                    this.p5.stroke(255);\r\n                    this.p5.strokeWeight(2);\r\n                    this.p5.line(0, 0, 0, -this.branchLength);\r\n                    this.p5.translate(0, -this.branchLength);\r\n                    break;\r\n                case 'B':\r\n                    this.p5.stroke(255);\r\n                    this.p5.strokeWeight(2);\r\n                    this.p5.circle(0, 0, this.leafRadius);\r\n                    break;\r\n                case 'l':\r\n                    this.p5.rotate(-this.branchAngle);\r\n                    break;\r\n                case 'r':\r\n                    this.p5.rotate(this.branchAngle);\r\n                    break;\r\n                case '[':\r\n                    this.p5.push();\r\n                    break;\r\n                case ']':\r\n                    this.p5.pop();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/**--------------------------------- */\r\n// functions\r\n\r\nexport default FractalTree;\r\n"],"names":["$9fe6ab0a3eadfc95$var$tree","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$e93rA","$7Pz0b","$0686233491851b9c$export$2e2bcd8739ae039","constructor","p5","_config","config","initialVocab","rule","branchLength","branchAngle","Math","PI","leafRadius","showHelpers","vocab","grammar","generateGrammar","obj","split","map","elem","item","generateVocab","iterations","str","i","letter","hasOwnProperty","setValues","key","value","update","deltaTime","draw","stroke","strokeWeight","line","translate","circle","rotate","push","pop","a","__esModule","default","gui","GUI","autoPlace","domElement","document","getElementById","appendChild","setup","canvas","createCanvas","window","innerWidth","innerHeight","parent","background","pixelDensity","colorMode","HSB","noLoop","addEventListener","resizeDisplay","resizeCanvas"],"version":3,"file":"l-systems.2ae52390.js.map"}