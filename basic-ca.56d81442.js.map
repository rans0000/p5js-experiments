{"mappings":"IEOI,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,M,E,EDGQ,EAKA,E,E,E,O,C,sB,I,G,E,E,O,C,oB,I,G,E,E,O,C,Y,I,G,E,E,O,C,Q,I,GAZL,IAAM,EAAsB,CAAE,EAAG,CAAE,EAC7B,EAA4B,CACrC,IAAK,CAAA,EACL,MAAO,CAAA,EACP,OAAQ,CAAA,EACR,KAAM,CAAA,CACV,C,EACY,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,I,C,E,C,O,C,C,E,M,C,E,C,S,C,C,E,K,C,E,C,Q,CAKA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,M,C,E,C,S,C,C,E,E,C,E,C,I,G,I,E,E,S,E,E,QEsGZ,OAAM,EASF,YAAY,CAAM,CAAE,CAA6B,CAAE,CAC/C,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,KAAK,CAAG,EAAO,KAAK,CACzB,EAAK,SAAS,CAAG,EAAO,SAAS,CACjC,IAAI,CAAC,GAAG,CAAG,EAAO,GAAG,CACrB,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,CACvB,IAAI,CAAC,SAAS,CAAG,EAAO,SAAS,AACrC,CAEA,UAAU,EAAS,EAAK,SAAS,CAAE,CAC/B,IAAI,CAAC,MAAM,CAAG,CAClB,CAEA,WAAW,CAAc,CAAE,CACvB,IAAI,CAAC,SAAS,CAAG,CACrB,CAEA,OAAO,CAAkB,CAAQ,CAE7B,OADA,IAAI,CAAC,MAAM,CAAG,IAAI,CAAC,SAAS,CACrB,IAAI,AACf,CAEA,MAAa,CAST,OARA,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAC/B,IAAI,CAAC,EAAE,CAAC,IA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","sources":["<anon>","src/utils/utils.ts","src/scripts/ca-basic.ts","src/libs/cellular-automaton.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fK5g3\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultEntityConfig\", () => $28770b279d7ab5b1$export$73820bb3da69f923);\n$parcel$export(module.exports, \"defaultEdgeConfig\", () => $28770b279d7ab5b1$export$1ea8cd15d9ca5dee);\n$parcel$export(module.exports, \"MOUSE_BTN\", () => $28770b279d7ab5b1$export$bfd2dc5313efa3a3);\n$parcel$export(module.exports, \"Gamer\", () => $28770b279d7ab5b1$export$4008efb11b076cd5);\nconst $28770b279d7ab5b1$export$73820bb3da69f923 = {\n    r: 5\n};\nconst $28770b279d7ab5b1$export$1ea8cd15d9ca5dee = {\n    top: true,\n    right: true,\n    bottom: true,\n    left: true\n};\nvar $28770b279d7ab5b1$export$bfd2dc5313efa3a3;\n(function(MOUSE_BTN) {\n    MOUSE_BTN[MOUSE_BTN[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BTN[MOUSE_BTN[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BTN[MOUSE_BTN[\"RIGHT\"] = 2] = \"RIGHT\";\n})($28770b279d7ab5b1$export$bfd2dc5313efa3a3 || ($28770b279d7ab5b1$export$bfd2dc5313efa3a3 = {}));\nvar $28770b279d7ab5b1$export$4008efb11b076cd5;\n(function(Gamer) {\n    Gamer[Gamer[\"PLAYER\"] = 0] = \"PLAYER\";\n    Gamer[Gamer[\"AI\"] = 1] = \"AI\";\n})($28770b279d7ab5b1$export$4008efb11b076cd5 || ($28770b279d7ab5b1$export$4008efb11b076cd5 = {}));\n\n});\n\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nclass $65ca7b8c1ceeddb0$var$CA {\n    constructor(p5, _config){\n        this.tiles = [];\n        const config = {\n            horizontalTiles: 10,\n            verticalTiles: 10,\n            size: 50,\n            noiseScale: 0,\n            survivalThresold: 4,\n            deathThreshold: 5,\n            maxHealth: 1,\n            ..._config\n        };\n        this.p5 = p5;\n        this.horizontalTiles = config.horizontalTiles;\n        this.verticalTiles = config.verticalTiles;\n        this.size = config.size;\n        this.survivalThresold = config.survivalThresold;\n        this.deathThreshold = config.deathThreshold;\n        this.maxHealth = config.maxHealth;\n        this.tiles = [];\n        for(let i = 0; i < this.horizontalTiles * this.verticalTiles; i++){\n            this.tiles.push([]);\n            for(let j = 0; j < this.verticalTiles; j++)this.tiles[i].push(new $65ca7b8c1ceeddb0$var$Tile(p5, {\n                index: j * this.horizontalTiles + i,\n                maxHealth: this.maxHealth,\n                prevState: config.noiseScale && Math.floor(p5.noise(i * config.noiseScale, j * config.noiseScale) * 2),\n                pos: p5.createVector(i * this.size + this.size / 2, j * this.size + this.size / 2),\n                size: this.size\n            }));\n        }\n    }\n    updateTile(x, y, health = $65ca7b8c1ceeddb0$var$Tile.maxHealth) {\n        this.tiles[x][y].cacheState(health);\n    }\n    calculateState() {\n        for(let x = 0; x < this.horizontalTiles; x++)for(let y = 0; y < this.verticalTiles; y++){\n            let filled = 0;\n            let empty = 0;\n            let neighbours = 0;\n            for(let i = -1; i < 2; i++)for(let j = -1; j < 2; j++){\n                const x1 = x + i;\n                const y1 = y + j;\n                if (i == 0 && j == 0) continue;\n                if (x1 < 0 || x1 >= this.horizontalTiles) continue;\n                if (y1 < 0 || y1 >= this.verticalTiles) continue;\n                ++neighbours;\n                this.tiles[x1][y1].health ? ++filled : ++empty;\n            }\n            if (filled === this.survivalThresold) this.tiles[x][y].cacheState(this.maxHealth);\n            else if (filled >= this.deathThreshold) this.tiles[x][y].cacheState(0);\n        }\n    }\n    update(deltaTime) {\n        for(let i = 0; i < this.horizontalTiles; i++)for(let j = 0; j < this.verticalTiles; j++)this.tiles[i][j].update(deltaTime);\n        return this;\n    }\n    draw() {\n        for(let i = 0; i < this.horizontalTiles; i++)for(let j = 0; j < this.verticalTiles; j++)this.tiles[i][j].draw();\n        return this;\n    }\n}\nclass $65ca7b8c1ceeddb0$var$Tile {\n    constructor(p5, config){\n        this.p5 = p5;\n        this.index = config.index;\n        $65ca7b8c1ceeddb0$var$Tile.maxHealth = config.maxHealth;\n        this.pos = config.pos;\n        this.size = config.size;\n        this.prevState = config.prevState;\n    }\n    setHealth(health = $65ca7b8c1ceeddb0$var$Tile.maxHealth) {\n        this.health = health;\n    }\n    cacheState(health) {\n        this.prevState = health;\n    }\n    update(_deltaTime) {\n        this.health = this.prevState;\n        return this;\n    }\n    draw() {\n        this.p5.rectMode(this.p5.CENTER);\n        this.p5.push();\n        this.p5.translate(this.pos.x, this.pos.y);\n        this.p5.stroke(255, 0.1);\n        this.p5.fill(255, this.health ? 1 : 0);\n        this.p5.rect(0, 0, this.size);\n        this.p5.pop();\n        return this;\n    }\n}\nvar $65ca7b8c1ceeddb0$export$2e2bcd8739ae039 = $65ca7b8c1ceeddb0$var$CA;\n\n\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\n/**--------------------------------- */ // variables & types\nlet $0772db490ffc3d44$var$ca;\nlet $0772db490ffc3d44$var$isDragging = false;\n/**--------------------------------- */ // sketch\nconst $0772db490ffc3d44$var$sketch = (p5)=>{\n    const options = {\n        survivalThresold: 4,\n        deathThreshold: 5,\n        maxHealth: 1,\n        restart: restart\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"restart\").name(\"Restart\").onChange(restart);\n    gui.add(options, \"survivalThresold\", 0, 8, 1).name(\"Survival Thresold\").onChange(restart);\n    gui.add(options, \"deathThreshold\", 0, 8, 1).name(\"Death Threshold\").onChange(restart);\n    // gui.add(options, 'maxHealth', 1, 10, 1).name('Max Life').onChange(restart);\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        init(p5);\n    // p5.noLoop();\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        $0772db490ffc3d44$var$ca.update(p5.deltaTime).draw();\n        !$0772db490ffc3d44$var$isDragging && $0772db490ffc3d44$var$ca.calculateState();\n    };\n    p5.mousePressed = (event)=>{\n        if (event.button === (0, $fK5g3.MOUSE_BTN).LEFT) {\n            $0772db490ffc3d44$var$isDragging = true;\n            p5.loop();\n            const { clientX: clientX, clientY: clientY } = event;\n            if (clientX > $0772db490ffc3d44$var$ca.horizontalTiles * $0772db490ffc3d44$var$ca.size && clientY > $0772db490ffc3d44$var$ca.verticalTiles) return;\n            const x = Math.floor(clientX / $0772db490ffc3d44$var$ca.size);\n            const y = Math.floor(clientY / $0772db490ffc3d44$var$ca.size);\n            $0772db490ffc3d44$var$ca.updateTile(x, y);\n        }\n    };\n    p5.mouseDragged = (event)=>{\n        if (!$0772db490ffc3d44$var$isDragging) return;\n        const { clientX: clientX, clientY: clientY } = event;\n        if (clientX > $0772db490ffc3d44$var$ca.horizontalTiles * $0772db490ffc3d44$var$ca.size && clientY > $0772db490ffc3d44$var$ca.verticalTiles) return;\n        const x = Math.floor(clientX / $0772db490ffc3d44$var$ca.size);\n        const y = Math.floor(clientY / $0772db490ffc3d44$var$ca.size);\n        $0772db490ffc3d44$var$ca.updateTile(x, y);\n    };\n    p5.mouseReleased = (event)=>{\n        if (event.button === (0, $fK5g3.MOUSE_BTN).LEFT) {\n            $0772db490ffc3d44$var$isDragging = false;\n            $0772db490ffc3d44$var$ca.calculateState();\n            p5.loop();\n        }\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n        let { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        const size = 20;\n        $0772db490ffc3d44$var$ca = new (0, $65ca7b8c1ceeddb0$export$2e2bcd8739ae039)(p5, {\n            horizontalTiles: Math.floor(innerWidth / size),\n            verticalTiles: Math.floor(innerHeight / size),\n            noiseScale: 0.5,\n            survivalThresold: options.survivalThresold,\n            deathThreshold: options.deathThreshold,\n            maxHealth: options.maxHealth,\n            size: size\n        });\n    }\n    function restart() {\n        init(p5);\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($0772db490ffc3d44$var$sketch);\n\n\n//# sourceMappingURL=basic-ca.56d81442.js.map\n","import P5 from 'p5';\r\nimport { TEdges } from './types';\r\n\r\nexport const defaultEntityConfig = { r: 5 };\r\nexport const defaultEdgeConfig: TEdges = {\r\n    top: true,\r\n    right: true,\r\n    bottom: true,\r\n    left: true\r\n};\r\nexport enum MOUSE_BTN {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\nexport enum Gamer {\r\n    PLAYER,\r\n    AI\r\n}\r\nexport type TTicTacToeCell = {\r\n    pos: P5.Vector;\r\n    owner: Gamer | undefined;\r\n};\r\nexport type TGameStatus = {\r\n    filledCells: number;\r\n    winner: Gamer | undefined;\r\n    cells: TTicTacToeCell[];\r\n};\r\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport CA from 'src/libs/cellular-automaton';\r\nimport { MOUSE_BTN } from 'src/utils/utils';\r\n\r\n/**--------------------------------- */\r\n// variables & types\r\nlet ca: CA;\r\nlet isDragging = false;\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        survivalThresold: 4,\r\n        deathThreshold: 5,\r\n        maxHealth: 1,\r\n        restart: restart\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'restart').name('Restart').onChange(restart);\r\n    gui.add(options, 'survivalThresold', 0, 8, 1).name('Survival Thresold').onChange(restart);\r\n    gui.add(options, 'deathThreshold', 0, 8, 1).name('Death Threshold').onChange(restart);\r\n    // gui.add(options, 'maxHealth', 1, 10, 1).name('Max Life').onChange(restart);\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n\r\n        init(p5);\r\n        // p5.noLoop();\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n\r\n        ca.update(p5.deltaTime).draw();\r\n\r\n        !isDragging && ca.calculateState();\r\n    };\r\n\r\n    p5.mousePressed = (event: MouseEvent) => {\r\n        if (event.button === MOUSE_BTN.LEFT) {\r\n            isDragging = true;\r\n            p5.loop();\r\n            const { clientX, clientY } = event;\r\n            if (clientX > ca.horizontalTiles * ca.size && clientY > ca.verticalTiles) return;\r\n            const x = Math.floor(clientX / ca.size);\r\n            const y = Math.floor(clientY / ca.size);\r\n            ca.updateTile(x, y);\r\n        }\r\n    };\r\n\r\n    p5.mouseDragged = (event: MouseEvent) => {\r\n        if (!isDragging) return;\r\n        const { clientX, clientY } = event;\r\n        if (clientX > ca.horizontalTiles * ca.size && clientY > ca.verticalTiles) return;\r\n        const x = Math.floor(clientX / ca.size);\r\n        const y = Math.floor(clientY / ca.size);\r\n        ca.updateTile(x, y);\r\n    };\r\n\r\n    p5.mouseReleased = (event: MouseEvent) => {\r\n        if (event.button === MOUSE_BTN.LEFT) {\r\n            isDragging = false;\r\n            ca.calculateState();\r\n            p5.loop();\r\n        }\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n        let { innerWidth, innerHeight } = window;\r\n        const size = 20;\r\n        ca = new CA(p5, {\r\n            horizontalTiles: Math.floor(innerWidth / size),\r\n            verticalTiles: Math.floor(innerHeight / size),\r\n            noiseScale: 0.5,\r\n            survivalThresold: options.survivalThresold,\r\n            deathThreshold: options.deathThreshold,\r\n            maxHealth: options.maxHealth,\r\n            size\r\n        });\r\n    }\r\n\r\n    function restart() {\r\n        init(p5);\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import P5, { Vector } from 'p5';\r\n\r\ntype TCAConfig = {\r\n    horizontalTiles: number;\r\n    verticalTiles: number;\r\n    size: number;\r\n    noiseScale: number;\r\n    survivalThresold: number;\r\n    deathThreshold: number;\r\n    maxHealth: number;\r\n};\r\ntype TCell = {\r\n    index: number;\r\n    pos: Vector;\r\n    size: number;\r\n    health: number;\r\n    prevState: number;\r\n    maxHealth: number;\r\n};\r\nclass CA {\r\n    p5: P5;\r\n    horizontalTiles: number;\r\n    verticalTiles: number;\r\n    size: number;\r\n    tiles: Tile[][] = [];\r\n    noiseScale: number;\r\n    survivalThresold: number;\r\n    deathThreshold: number;\r\n    maxHealth: number;\r\n\r\n    constructor(p5: P5, _config?: Partial<TCAConfig>) {\r\n        const config: TCAConfig = {\r\n            horizontalTiles: 10,\r\n            verticalTiles: 10,\r\n            size: 50,\r\n            noiseScale: 0,\r\n            survivalThresold: 4,\r\n            deathThreshold: 5,\r\n            maxHealth: 1,\r\n            ..._config\r\n        };\r\n        this.p5 = p5;\r\n        this.horizontalTiles = config.horizontalTiles;\r\n        this.verticalTiles = config.verticalTiles;\r\n        this.size = config.size;\r\n        this.survivalThresold = config.survivalThresold;\r\n        this.deathThreshold = config.deathThreshold;\r\n        this.maxHealth = config.maxHealth;\r\n\r\n        this.tiles = [];\r\n\r\n        for (let i = 0; i < this.horizontalTiles * this.verticalTiles; i++) {\r\n            this.tiles.push([]);\r\n            for (let j = 0; j < this.verticalTiles; j++) {\r\n                this.tiles[i].push(\r\n                    new Tile(p5, {\r\n                        index: j * this.horizontalTiles + i,\r\n                        maxHealth: this.maxHealth,\r\n                        prevState:\r\n                            config.noiseScale && Math.floor(p5.noise(i * config.noiseScale, j * config.noiseScale) * 2),\r\n                        pos: p5.createVector(i * this.size + this.size / 2, j * this.size + this.size / 2),\r\n                        size: this.size\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    updateTile(x: number, y: number, health: number = Tile.maxHealth) {\r\n        this.tiles[x][y].cacheState(health);\r\n    }\r\n\r\n    calculateState() {\r\n        for (let x = 0; x < this.horizontalTiles; x++) {\r\n            for (let y = 0; y < this.verticalTiles; y++) {\r\n                let filled = 0;\r\n                let empty = 0;\r\n                let neighbours = 0;\r\n                for (let i = -1; i < 2; i++) {\r\n                    for (let j = -1; j < 2; j++) {\r\n                        const x1 = x + i;\r\n                        const y1 = y + j;\r\n                        if (i == 0 && j == 0) continue;\r\n                        if (x1 < 0 || x1 >= this.horizontalTiles) continue;\r\n                        if (y1 < 0 || y1 >= this.verticalTiles) continue;\r\n\r\n                        ++neighbours;\r\n                        this.tiles[x1][y1].health ? ++filled : ++empty;\r\n                    }\r\n                }\r\n                if (filled === this.survivalThresold) {\r\n                    this.tiles[x][y].cacheState(this.maxHealth);\r\n                } else if (filled >= this.deathThreshold) {\r\n                    this.tiles[x][y].cacheState(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number): this {\r\n        for (let i = 0; i < this.horizontalTiles; i++) {\r\n            for (let j = 0; j < this.verticalTiles; j++) {\r\n                this.tiles[i][j].update(deltaTime);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    draw(): this {\r\n        for (let i = 0; i < this.horizontalTiles; i++) {\r\n            for (let j = 0; j < this.verticalTiles; j++) {\r\n                this.tiles[i][j].draw();\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\nclass Tile {\r\n    p5: P5;\r\n    index: number;\r\n    pos: Vector;\r\n    size: number;\r\n    health: number;\r\n    prevState: number;\r\n    static maxHealth: number;\r\n\r\n    constructor(p5: P5, config: Omit<TCell, 'health'>) {\r\n        this.p5 = p5;\r\n        this.index = config.index;\r\n        Tile.maxHealth = config.maxHealth;\r\n        this.pos = config.pos;\r\n        this.size = config.size;\r\n        this.prevState = config.prevState;\r\n    }\r\n\r\n    setHealth(health = Tile.maxHealth) {\r\n        this.health = health;\r\n    }\r\n\r\n    cacheState(health: number) {\r\n        this.prevState = health;\r\n    }\r\n\r\n    update(_deltaTime: number): this {\r\n        this.health = this.prevState;\r\n        return this;\r\n    }\r\n\r\n    draw(): this {\r\n        this.p5.rectMode(this.p5.CENTER);\r\n        this.p5.push();\r\n        this.p5.translate(this.pos.x, this.pos.y);\r\n        this.p5.stroke(255, 0.1);\r\n        this.p5.fill(255, this.health ? 1 : 0);\r\n        this.p5.rect(0, 0, this.size);\r\n        this.p5.pop();\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default CA;\r\n"],"names":["$0772db490ffc3d44$var$ca","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$28770b279d7ab5b1$export$bfd2dc5313efa3a3","$28770b279d7ab5b1$export$4008efb11b076cd5","MOUSE_BTN","Gamer","$28770b279d7ab5b1$export$73820bb3da69f923","$28770b279d7ab5b1$export$1ea8cd15d9ca5dee","r","top","right","bottom","left","$e93rA","$7Pz0b","$65ca7b8c1ceeddb0$var$Tile","constructor","p5","config","index","maxHealth","pos","size","prevState","setHealth","health","cacheState","update","_deltaTime","draw","rectMode","CENTER","push","translate","x","y","stroke","fill","rect","pop","$65ca7b8c1ceeddb0$export$2e2bcd8739ae039","_config","tiles","horizontalTiles","verticalTiles","noiseScale","survivalThresold","deathThreshold","i","j","Math","floor","noise","createVector","updateTile","calculateState","filled","x1","y1","deltaTime","$fK5g3","$0772db490ffc3d44$var$isDragging","a","__esModule","default","options","restart","gui","GUI","autoPlace","background","innerWidth","innerHeight","window","domElement","document","getElementById","appendChild","add","name","onChange","setup","canvas","createCanvas","parent","pixelDensity","colorMode","HSB","addEventListener","resizeDisplay","resizeCanvas","mousePressed","event","button","LEFT","loop","clientX","clientY","mouseDragged","mouseReleased"],"version":3,"file":"basic-ca.56d81442.js.map"}