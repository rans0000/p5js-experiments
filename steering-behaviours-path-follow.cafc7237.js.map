{"mappings":"IGQI,E,S,E,C,E,O,G,E,U,C,E,O,C,C,C,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,I,G,I,E,E,SFHJ,IAAI,EAAK,GAiST,IAAA,EAhSA,MAoBI,YAAY,CAAM,CAAE,CAAyC,CAAE,CAmB3D,IAAM,EAAS,CAjBX,IAAK,EAAG,YAAY,CAAC,EAAG,GACxB,KAAM,EACN,SAAU,EAAG,YAAY,CAAC,EAAG,GAC7B,eAAgB,EAAG,YAAY,CAAC,EAAG,GACnC,aAAc,EAAG,YAAY,CAAC,EAAG,GACjC,SAAU,GACV,SAAU,IACV,YAAa,EACb,kBAAmB,IACnB,EAAG,GACH,SAAU,EAAG,KAAK,CAAC,WACnB,iBAAkB,GAClB,YAAa,GACb,gBAAiB,KAAK,EAAE,CAAG,EAC3B,iBAAkB,CAAA,EAClB,YAAa,CAAA,EAEkB,GAAG,CAAO,AAAC,CAE9C,CAAA,IAAI,CAAC,EAAE,CAAG,EAAE,EACZ,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,GAAG,CAAG,EAAO,GAAG,CACrB,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,CACvB,IAAI,CAAC,QAAQ,CAAG,EAAO,QAAQ,CAC/B,IAAI,CAAC,YAAY,CAAG,EAAO,YAAY,CACvC,IAAI,CAAC,QAAQ,CAAG,EAAO,QAAQ,CAC/B,IAAI,CAAC,QAAQ,CAAG,EAAO,QAAQ,CAC/B,IAAI,CAAC,WAAW,CAAG,EAAO,WAAW,CACrC,IAAI,CAAC,iBAAiB,CAAG,EAAO,iBAAiB,CACjD,IAAI,CAAC,CAAC,CAAG,EAAO,CAAC,CACjB,IAAI,CAAC,QAAQ,CAAG,EAAO,QAAQ,CAC/B,IAAI,CAAC,gBAAgB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","sources":["<anon>","src/libs/autonomous-agent.ts","src/libs/interactive-path.ts","src/scripts/steering-behaviours-path-follow.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hMArn\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $7ed1d321420b0c7f$export$2e2bcd8739ae039);\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nlet $7ed1d321420b0c7f$var$id = -1;\nclass $7ed1d321420b0c7f$var$AutonomousAgent {\n    constructor(p5, _config){\n        const defaultConfig = {\n            pos: p5.createVector(0, 0),\n            mass: 1,\n            velocity: p5.createVector(0, 0),\n            cachedVelocity: p5.createVector(0, 0),\n            acceleration: p5.createVector(0, 0),\n            maxSpeed: 15,\n            maxForce: 0.25,\n            wanderTheta: 0,\n            breakingThreshold: 100,\n            r: 20,\n            material: p5.color(\"#00ffff\"),\n            perceptionRadius: 30,\n            repelRadius: 20,\n            visibilityAngle: Math.PI / 3,\n            wrapOnScreenEdge: false,\n            showHelpers: false\n        };\n        const config = {\n            ...defaultConfig,\n            ..._config\n        };\n        this.id = ++$7ed1d321420b0c7f$var$id;\n        this.p5 = p5;\n        this.pos = config.pos;\n        this.mass = config.mass;\n        this.velocity = config.velocity;\n        this.acceleration = config.acceleration;\n        this.maxSpeed = config.maxSpeed;\n        this.maxForce = config.maxForce;\n        this.wanderTheta = config.wanderTheta;\n        this.breakingThreshold = config.breakingThreshold;\n        this.r = config.r;\n        this.material = config.material;\n        this.perceptionRadius = config.perceptionRadius;\n        this.repelRadius = config.repelRadius;\n        this.visibilityAngle = config.visibilityAngle;\n        this.wrapOnScreenEdge = config.wrapOnScreenEdge;\n        this.showHelpers = config.showHelpers;\n        this.wanderTheta = 0;\n    }\n    setValues(key, value) {\n        if (typeof value === \"number\") switch(key){\n            case \"maxSpeed\":\n                this.maxSpeed = value;\n                break;\n            case \"maxForce\":\n                this.maxForce = value;\n                break;\n            case \"perceptionRadius\":\n                this.perceptionRadius = value;\n                break;\n            case \"repelRadius\":\n                this.repelRadius = value;\n                break;\n            case \"visibilityAngle\":\n                this.visibilityAngle = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n        if (typeof value === \"boolean\") switch(key){\n            case \"showHelpers\":\n                this.showHelpers = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n    }\n    draw() {\n        this.p5.push();\n        this.p5.translate(this.pos.x, this.pos.y);\n        this.p5.rotate(this.velocity.heading());\n        this.showHelpers && this.drawHelpers();\n        this.drawSprite();\n        this.p5.pop();\n        return this;\n    }\n    update() {\n        this.cachedVelocity = this.velocity.copy().add(this.acceleration.limit(this.maxForce));\n        this.cachedVelocity.limit(this.maxSpeed);\n        return this;\n    }\n    move() {\n        this.velocity.set(this.cachedVelocity.x, this.cachedVelocity.y);\n        this.pos.add(this.velocity);\n        this.wrapOnScreenEdge && this.constraintWithinWindow(this.pos.x, this.pos.y);\n        this.acceleration.set(0, 0);\n        return this;\n    }\n    applyForces(force) {\n        if (!force) return this;\n        this.acceleration.add(force);\n        return this;\n    }\n    drawSprite() {\n        const size = this.r;\n        this.p5.stroke(this.material);\n        this.p5.strokeWeight(1);\n        this.p5.noFill();\n        this.p5.triangle(size, 0, -size, size / 2, -size, -size / 2);\n        this.p5.stroke(50);\n        return this;\n    }\n    drawHelpers() {\n        // draw text\n        this.p5.noStroke();\n        this.p5.fill(255);\n        this.p5.textSize(15);\n        this.p5.text(this.id, 0, 0);\n        // draw perception radius\n        this.p5.noFill();\n        this.velocity.mag() < this.maxSpeed ? this.p5.stroke(0, 80, 50) : this.p5.stroke(50);\n        this.p5.strokeWeight(1);\n        this.p5.circle(0, 0, this.perceptionRadius);\n        // visibility radius\n        this.p5.fill(255, 255, 255, 0.3);\n        this.p5.arc(0, 0, this.perceptionRadius, this.perceptionRadius, -this.visibilityAngle, this.visibilityAngle);\n        // draw heading\n        const temp = this.p5.createVector(1, 0).setMag(this.velocity.mag()).mult(20);\n        this.p5.line(0, 0, temp.x, temp.y);\n        return this;\n    }\n    seek(target, isArriving = false) {\n        if (!target) return this.p5.createVector();\n        let force = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(target, this.pos);\n        let desiredVelocity = this.maxSpeed;\n        if (isArriving) {\n            const distance = force.mag();\n            if (distance < this.breakingThreshold) desiredVelocity = this.p5.map(distance, 0, this.breakingThreshold, 0, this.maxSpeed);\n        }\n        force.setMag(desiredVelocity);\n        force.sub(this.velocity);\n        force.limit(this.maxForce);\n        return force;\n    }\n    flee(target) {\n        if (target === null) return null;\n        return this.seek(target).mult(-1);\n    }\n    pursue(agent) {\n        const target = agent.pos.copy();\n        let predictedPos = agent.velocity.copy();\n        predictedPos.mult(40);\n        target.add(predictedPos);\n        return this.seek(target);\n    }\n    evade(agent) {\n        let a = this.pursue(agent);\n        a.mult(-1);\n        return a;\n    }\n    arrive(target) {\n        return this.seek(target, true);\n    }\n    wander() {\n        const lookahead = 100;\n        const lookaheadRadius = 50;\n        const deltaTheta = this.p5.PI / 6;\n        const x = lookaheadRadius * this.p5.cos(this.wanderTheta);\n        const y = lookaheadRadius * this.p5.sin(this.wanderTheta);\n        const targetPos = this.velocity.copy().setMag(lookahead);\n        targetPos.add(this.p5.createVector(x, y));\n        targetPos.add(this.pos);\n        this.constraintWithinWindow(this.pos.x, this.pos.y);\n        this.wanderTheta += this.p5.random(-deltaTheta, deltaTheta);\n        return this.seek(targetPos);\n    }\n    pathFollow(path, isPointWithinSegment = false) {\n        const lookahead = 50;\n        const target = this.velocity.copy().normalize().mult(lookahead).add(this.pos);\n        this.p5.strokeWeight(1);\n        this.p5.stroke(255);\n        const closest = path.getClosestSegment(target.x, target.y, isPointWithinSegment);\n        if (closest.length && closest.length > path.radius && closest.intersectionPosition) return this.seek(closest.intersectionPosition);\n        return this.velocity.copy();\n    }\n    groupBehaviour(agents) {\n        let alignment = this.p5.createVector();\n        let cohesion = this.p5.createVector();\n        let separation = this.p5.createVector();\n        const numberOfAgents = agents.length;\n        for(let i = 0; i < numberOfAgents; i++){\n            if (agents[i] === this) continue;\n            const angle = this.velocity.copy().normalize().dot(agents[i].velocity.copy().normalize());\n            const distance = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.dist(agents[i].pos, this.pos);\n            if (distance > this.perceptionRadius || angle > this.visibilityAngle) continue;\n            // alignment\n            alignment.add(agents[i].velocity);\n            // cohesion\n            // @todo: scale the force applied to cohesion based on the distance between two bodies\n            // distant objects extert less force\n            const ratio = (this.perceptionRadius - distance) / this.perceptionRadius;\n            distance > this.repelRadius && cohesion.add(agents[i].pos);\n            const diff = this.pos.copy().sub(agents[i].pos) //\n            .div(ratio); //\n            // separation\n            separation.add(diff);\n            this.p5.stroke(20);\n            this.p5.strokeWeight(2);\n            this.showHelpers && this.p5.line(agents[i].pos.x, agents[i].pos.y, this.pos.x, this.pos.y);\n            if (numberOfAgents - 1 > 0) {\n                alignment.div(numberOfAgents - 1).sub(this.velocity).setMag(this.maxSpeed);\n                cohesion.div(numberOfAgents - 1).sub(this.pos).setMag(this.maxSpeed);\n                separation.div(numberOfAgents - 1).sub(this.velocity).setMag(this.maxSpeed);\n            }\n        }\n        return {\n            alignment: alignment,\n            cohesion: cohesion,\n            separation: separation\n        };\n    }\n    constraintWithinWindow(x, y) {\n        const { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        if (x < 0) this.pos.x = innerWidth;\n        if (x > innerWidth) this.pos.x = 0;\n        if (y < 0) this.pos.y = innerHeight;\n        if (y > innerHeight) this.pos.y = 0;\n    }\n}\nvar $7ed1d321420b0c7f$export$2e2bcd8739ae039 = $7ed1d321420b0c7f$var$AutonomousAgent;\n\n});\n\nparcelRegister(\"7wO5S\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $a58c6e89015b1402$export$2e2bcd8739ae039);\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $a58c6e89015b1402$var$defaultConfig = {\n    radius: 2,\n    color: 100,\n    isClosed: false\n};\nclass $a58c6e89015b1402$var$InteractivePath {\n    constructor(p5, _config){\n        const config = {\n            ...$a58c6e89015b1402$var$defaultConfig,\n            ..._config\n        };\n        this.p5 = p5;\n        this.mode = \"view\";\n        this.points = [];\n        this.paintRef = this.paint.bind(this);\n        this.radius = config.radius;\n        this.color = config.color;\n        this.isClosed = config.isClosed;\n    }\n    setPoints(points) {\n        this.points = points;\n        return this.stopPainting();\n    }\n    getPoints() {\n        return this.points;\n    }\n    getClosestSegment(x, y, isPointWithinSegment = false) {\n        const queryPoint = this.p5.createVector(x, y);\n        let shortestLength = undefined;\n        let shortestPoint;\n        const points = this.getPoints();\n        const numberOfLines = points.length;\n        this.p5.angleMode(this.p5.RADIANS);\n        this.p5.colorMode(this.p5.HSB);\n        for(let i = 0; i < numberOfLines; i++){\n            const segmentLength = points[i].length;\n            let prev = 0;\n            for(let j = 1; !this.isClosed && j < segmentLength || this.isClosed && j <= segmentLength; j++){\n                let curr = j % segmentLength;\n                const line = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(points[i][curr], points[i][prev]);\n                const mouse = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(queryPoint, points[i][prev]);\n                const projection = mouse.dot(line);\n                const ratio = projection / line.magSq();\n                const temp = line.copy().normalize();\n                const projectionVector = isPointWithinSegment ? temp.setMag(ratio * line.mag()) : temp.setMag(this.p5.constrain(ratio, 0, 1) * line.mag());\n                if (isPointWithinSegment && (ratio < 0 || ratio > 1)) {\n                    prev = curr;\n                    continue;\n                }\n                const projectionPos = projectionVector.copy().add(points[i][prev]);\n                const distanceToSegment = projectionPos.copy().sub(queryPoint).magSq();\n                if (shortestLength === undefined || distanceToSegment < shortestLength) {\n                    shortestLength = distanceToSegment;\n                    shortestPoint = projectionPos;\n                }\n                prev = curr;\n            }\n        }\n        return {\n            length: shortestLength,\n            intersectionPosition: shortestPoint\n        };\n    }\n    addPoint(point) {\n        const lineIndex = this.points.length;\n        this.points[lineIndex].push(point.copy());\n        return this;\n    }\n    deletePoint() {\n        const lineIndex = this.points.length;\n        this.points[lineIndex].pop();\n        return this;\n    }\n    startPainting() {\n        if (this.mode === \"draw\") return this;\n        this.mode = \"draw\";\n        this.points.push([]);\n        this.p5.canvas.addEventListener(\"click\", this.paintRef);\n        return this;\n    }\n    stopPainting() {\n        if (this.mode === \"view\") return this;\n        this.mode = \"view\";\n        this.p5.canvas.removeEventListener(\"click\", this.paintRef);\n        return this;\n    }\n    togglePainting() {\n        this.mode === \"view\" ? this.startPainting() : this.stopPainting();\n        return this;\n    }\n    paint(event) {\n        const point = this.p5.createVector(event.x, event.y);\n        const numberOfLines = this.points.length;\n        this.points[numberOfLines - 1].push(point);\n        return this;\n    }\n    update(delta) {\n        delta;\n        return this;\n    }\n    draw() {\n        const numberOfLines = this.points.length;\n        this.p5.stroke(this.color);\n        this.p5.strokeWeight(this.radius * 2);\n        for(let i = 0; i < numberOfLines; i++){\n            const length = this.points[i].length;\n            this.p5.noFill();\n            this.p5.beginShape();\n            for(let j = 0; j < length; j++){\n                this.p5.circle(this.points[i][j].x, this.points[i][j].y, 10);\n                this.p5.vertex(this.points[i][j].x, this.points[i][j].y);\n            }\n            // decide if the line should render as closed\n            const shouldClose = this.isClosed && this.mode == \"draw\" && numberOfLines > 1 && i !== numberOfLines - 1 || this.isClosed && this.mode == \"view\";\n            this.p5.endShape(shouldClose ? \"close\" : undefined);\n            // draw the trailing line to the mouse while in the 'draw' mode\n            i == numberOfLines - 1 && length > 0 && this.mode == \"draw\" && this.p5.line(this.points[i][length - 1].x, this.points[i][length - 1].y, this.p5.mouseX, this.p5.mouseY);\n        }\n        return this;\n    }\n}\nvar $a58c6e89015b1402$export$2e2bcd8739ae039 = $a58c6e89015b1402$var$InteractivePath;\n\n});\n\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $hMArn = parcelRequire(\"hMArn\");\n\nvar $7wO5S = parcelRequire(\"7wO5S\");\n/**--------------------------------- */ // variables & types\nlet $5bf28487eb919670$var$path;\nlet $5bf28487eb919670$var$agents = [];\n/**--------------------------------- */ // sketch\nconst $5bf28487eb919670$var$sketch = (p5)=>{\n    const options = {\n        showHelpers: false,\n        maxSpeed: 3,\n        maxForce: 0.3\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"showHelpers\").onChange((val)=>$5bf28487eb919670$var$agents.forEach((agent)=>{\n            agent.setValues(\"showHelpers\", val);\n        }));\n    gui.add(options, \"maxSpeed\", 0.1, 10, 0.1).onChange((val)=>$5bf28487eb919670$var$agents.forEach((agent)=>{\n            agent.setValues(\"maxSpeed\", val);\n        }));\n    gui.add(options, \"maxForce\", 0.01, 2, 0.01).onChange((val)=>$5bf28487eb919670$var$agents.forEach((agent)=>{\n            agent.setValues(\"maxForce\", val);\n        }));\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        init(p5);\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        $5bf28487eb919670$var$path.update(p5.deltaTime).draw();\n        pathFollow($5bf28487eb919670$var$path, $5bf28487eb919670$var$agents);\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n        // setup path\n        $5bf28487eb919670$var$path = new (0, $7wO5S.default)(p5, {\n            isClosed: true,\n            color: 20,\n            radius: 20\n        });\n        const points = [\n            [\n                p5.createVector(150, 300),\n                p5.createVector(250, 150),\n                p5.createVector(550, 250),\n                p5.createVector(730, 150),\n                p5.createVector(800, 500),\n                p5.createVector(400, 600)\n            ]\n        ];\n        $5bf28487eb919670$var$path.setPoints(points);\n        //setup agent\n        $5bf28487eb919670$var$agents.push(new (0, $hMArn.default)(p5, {\n            pos: p5.createVector(p5.random(window.innerWidth), p5.random(window.innerHeight)),\n            velocity: (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.random2D().setMag(options.maxSpeed),\n            maxSpeed: options.maxSpeed,\n            maxForce: options.maxForce,\n            wrapOnScreenEdge: true\n        }));\n    }\n    function pathFollow(path, agents) {\n        for(let i = 0; i < agents.length; i++){\n            const force = agents[i].pathFollow(path, true);\n            agents[i].applyForces(force).update().draw();\n        }\n        for (const agent of agents)agent.move();\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($5bf28487eb919670$var$sketch);\n\n\n//# sourceMappingURL=steering-behaviours-path-follow.cafc7237.js.map\n","import P5 from 'p5';\r\nimport { TAutonomousAgentConfig, TGroupBehaviour } from '../utils/types';\r\nimport InteractivePath from './interactive-path';\r\n\r\ntype Keys = 'maxSpeed' | 'maxForce' | 'perceptionRadius' | 'repelRadius' | 'showHelpers' | 'visibilityAngle';\r\nlet id = -1;\r\nclass AutonomousAgent {\r\n    id: number;\r\n    p5: P5;\r\n    pos: P5.Vector;\r\n    mass: number;\r\n    cachedVelocity: P5.Vector;\r\n    velocity: P5.Vector;\r\n    acceleration: P5.Vector;\r\n    maxSpeed: number;\r\n    maxForce: number;\r\n    wanderTheta: number;\r\n    breakingThreshold: number;\r\n    r: number;\r\n    material: P5.Color;\r\n    perceptionRadius: number;\r\n    repelRadius: number;\r\n    visibilityAngle: number;\r\n    wrapOnScreenEdge: boolean;\r\n    showHelpers: boolean;\r\n\r\n    constructor(p5: P5, _config?: Partial<TAutonomousAgentConfig>) {\r\n        const defaultConfig: TAutonomousAgentConfig = {\r\n            pos: p5.createVector(0, 0),\r\n            mass: 1,\r\n            velocity: p5.createVector(0, 0),\r\n            cachedVelocity: p5.createVector(0, 0),\r\n            acceleration: p5.createVector(0, 0),\r\n            maxSpeed: 15,\r\n            maxForce: 0.25,\r\n            wanderTheta: 0,\r\n            breakingThreshold: 100,\r\n            r: 20,\r\n            material: p5.color('#00ffff'),\r\n            perceptionRadius: 30,\r\n            repelRadius: 20,\r\n            visibilityAngle: Math.PI / 3,\r\n            wrapOnScreenEdge: false,\r\n            showHelpers: false\r\n        };\r\n        const config = { ...defaultConfig, ..._config };\r\n\r\n        this.id = ++id;\r\n        this.p5 = p5;\r\n        this.pos = config.pos;\r\n        this.mass = config.mass;\r\n        this.velocity = config.velocity;\r\n        this.acceleration = config.acceleration;\r\n        this.maxSpeed = config.maxSpeed;\r\n        this.maxForce = config.maxForce;\r\n        this.wanderTheta = config.wanderTheta;\r\n        this.breakingThreshold = config.breakingThreshold;\r\n        this.r = config.r;\r\n        this.material = config.material;\r\n        this.perceptionRadius = config.perceptionRadius;\r\n        this.repelRadius = config.repelRadius;\r\n        this.visibilityAngle = config.visibilityAngle;\r\n        this.wrapOnScreenEdge = config.wrapOnScreenEdge;\r\n        this.showHelpers = config.showHelpers;\r\n\r\n        this.wanderTheta = 0;\r\n    }\r\n\r\n    setValues(key: Keys, value: number | boolean) {\r\n        if (typeof value === 'number') {\r\n            switch (key) {\r\n                case 'maxSpeed':\r\n                    this.maxSpeed = value;\r\n                    break;\r\n                case 'maxForce':\r\n                    this.maxForce = value;\r\n                    break;\r\n                case 'perceptionRadius':\r\n                    this.perceptionRadius = value;\r\n                    break;\r\n                case 'repelRadius':\r\n                    this.repelRadius = value;\r\n                    break;\r\n                case 'visibilityAngle':\r\n                    this.visibilityAngle = value;\r\n                    break;\r\n\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n        if (typeof value === 'boolean') {\r\n            switch (key) {\r\n                case 'showHelpers':\r\n                    this.showHelpers = value;\r\n                    break;\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.p5.push();\r\n        this.p5.translate(this.pos.x, this.pos.y);\r\n        this.p5.rotate(this.velocity.heading());\r\n        this.showHelpers && this.drawHelpers();\r\n        this.drawSprite();\r\n        this.p5.pop();\r\n        return this;\r\n    }\r\n\r\n    update() {\r\n        this.cachedVelocity = this.velocity.copy().add(this.acceleration.limit(this.maxForce));\r\n        this.cachedVelocity.limit(this.maxSpeed);\r\n        return this;\r\n    }\r\n\r\n    move() {\r\n        this.velocity.set(this.cachedVelocity.x, this.cachedVelocity.y);\r\n        this.pos.add(this.velocity);\r\n        this.wrapOnScreenEdge && this.constraintWithinWindow(this.pos.x, this.pos.y);\r\n        this.acceleration.set(0, 0);\r\n        return this;\r\n    }\r\n\r\n    applyForces(force: P5.Vector | null) {\r\n        if (!force) return this;\r\n        this.acceleration.add(force);\r\n        return this;\r\n    }\r\n\r\n    drawSprite() {\r\n        const size = this.r;\r\n        this.p5.stroke(this.material);\r\n        this.p5.strokeWeight(1);\r\n        this.p5.noFill();\r\n        this.p5.triangle(size, 0, -size, size / 2, -size, -size / 2);\r\n        this.p5.stroke(50);\r\n        return this;\r\n    }\r\n\r\n    drawHelpers() {\r\n        // draw text\r\n        this.p5.noStroke();\r\n        this.p5.fill(255);\r\n        this.p5.textSize(15);\r\n        this.p5.text(this.id, 0, 0);\r\n        // draw perception radius\r\n        this.p5.noFill();\r\n        this.velocity.mag() < this.maxSpeed ? this.p5.stroke(0, 80, 50) : this.p5.stroke(50);\r\n        this.p5.strokeWeight(1);\r\n        this.p5.circle(0, 0, this.perceptionRadius);\r\n        // visibility radius\r\n        this.p5.fill(255, 255, 255, 0.3);\r\n        this.p5.arc(0, 0, this.perceptionRadius, this.perceptionRadius, -this.visibilityAngle, this.visibilityAngle);\r\n        // draw heading\r\n\r\n        const temp = this.p5.createVector(1, 0).setMag(this.velocity.mag()).mult(20);\r\n        this.p5.line(0, 0, temp.x, temp.y);\r\n        return this;\r\n    }\r\n\r\n    seek(target: P5.Vector | null, isArriving: boolean = false): P5.Vector {\r\n        if (!target) return this.p5.createVector();\r\n        let force = P5.Vector.sub(target, this.pos);\r\n        let desiredVelocity = this.maxSpeed;\r\n\r\n        if (isArriving) {\r\n            const distance = force.mag();\r\n            if (distance < this.breakingThreshold) {\r\n                desiredVelocity = this.p5.map(distance, 0, this.breakingThreshold, 0, this.maxSpeed);\r\n            }\r\n        }\r\n\r\n        force.setMag(desiredVelocity);\r\n        force.sub(this.velocity);\r\n        force.limit(this.maxForce);\r\n        return force;\r\n    }\r\n\r\n    flee(target: P5.Vector | null) {\r\n        if (target === null) return null;\r\n        return this.seek(target)!.mult(-1);\r\n    }\r\n\r\n    pursue(agent: AutonomousAgent) {\r\n        const target = agent.pos.copy();\r\n        let predictedPos = agent.velocity.copy();\r\n        predictedPos.mult(40);\r\n        target.add(predictedPos);\r\n        return this.seek(target);\r\n    }\r\n\r\n    evade(agent: AutonomousAgent) {\r\n        let a = this.pursue(agent);\r\n        a!.mult(-1);\r\n        return a;\r\n    }\r\n\r\n    arrive(target: P5.Vector | null) {\r\n        return this.seek(target, true);\r\n    }\r\n\r\n    wander(): P5.Vector {\r\n        const lookahead = 100;\r\n        const lookaheadRadius = 50;\r\n        const deltaTheta = this.p5.PI / 6;\r\n\r\n        const x = lookaheadRadius * this.p5.cos(this.wanderTheta);\r\n        const y = lookaheadRadius * this.p5.sin(this.wanderTheta);\r\n        const targetPos = this.velocity.copy().setMag(lookahead);\r\n        targetPos.add(this.p5.createVector(x, y));\r\n        targetPos.add(this.pos);\r\n\r\n        this.constraintWithinWindow(this.pos.x, this.pos.y);\r\n\r\n        this.wanderTheta += this.p5.random(-deltaTheta, deltaTheta);\r\n        return this.seek(targetPos);\r\n    }\r\n\r\n    pathFollow(path: InteractivePath, isPointWithinSegment = false): P5.Vector {\r\n        const lookahead = 50;\r\n        const target = this.velocity.copy().normalize().mult(lookahead).add(this.pos);\r\n        this.p5.strokeWeight(1);\r\n        this.p5.stroke(255);\r\n        const closest = path.getClosestSegment(target.x, target.y, isPointWithinSegment);\r\n        if (closest.length && closest.length > path.radius && closest.intersectionPosition) {\r\n            return this.seek(closest.intersectionPosition);\r\n        }\r\n        return this.velocity.copy();\r\n    }\r\n\r\n    groupBehaviour(agents: AutonomousAgent[]): TGroupBehaviour {\r\n        let alignment = this.p5.createVector();\r\n        let cohesion = this.p5.createVector();\r\n        let separation = this.p5.createVector();\r\n        const numberOfAgents = agents.length;\r\n\r\n        for (let i = 0; i < numberOfAgents; i++) {\r\n            if (agents[i] === this) continue;\r\n\r\n            const angle = this.velocity.copy().normalize().dot(agents[i].velocity.copy().normalize());\r\n            const distance = P5.Vector.dist(agents[i].pos, this.pos);\r\n            if (distance > this.perceptionRadius || angle > this.visibilityAngle) continue;\r\n\r\n            // alignment\r\n            alignment.add(agents[i].velocity);\r\n\r\n            // cohesion\r\n            // @todo: scale the force applied to cohesion based on the distance between two bodies\r\n            // distant objects extert less force\r\n            const ratio = (this.perceptionRadius - distance) / this.perceptionRadius;\r\n\r\n            distance > this.repelRadius && cohesion.add(agents[i].pos);\r\n            const diff = this.pos\r\n                .copy()\r\n                .sub(agents[i].pos) //\r\n                .div(ratio); //\r\n\r\n            // separation\r\n            separation.add(diff);\r\n\r\n            this.p5.stroke(20);\r\n            this.p5.strokeWeight(2);\r\n            this.showHelpers && this.p5.line(agents[i].pos.x, agents[i].pos.y, this.pos.x, this.pos.y);\r\n\r\n            if (numberOfAgents - 1 > 0) {\r\n                alignment\r\n                    .div(numberOfAgents - 1)\r\n                    .sub(this.velocity)\r\n                    .setMag(this.maxSpeed);\r\n                cohesion\r\n                    .div(numberOfAgents - 1)\r\n                    .sub(this.pos)\r\n                    .setMag(this.maxSpeed);\r\n                separation\r\n                    .div(numberOfAgents - 1)\r\n                    .sub(this.velocity)\r\n                    .setMag(this.maxSpeed);\r\n            }\r\n        }\r\n        return { alignment, cohesion, separation };\r\n    }\r\n\r\n    constraintWithinWindow(x: number, y: number) {\r\n        const { innerWidth, innerHeight } = window;\r\n        if (x < 0) this.pos.x = innerWidth;\r\n        if (x > innerWidth) this.pos.x = 0;\r\n        if (y < 0) this.pos.y = innerHeight;\r\n        if (y > innerHeight) this.pos.y = 0;\r\n    }\r\n}\r\n\r\nexport default AutonomousAgent;\r\n","import P5 from 'p5';\r\nimport { TInteractivePathConfig, TPoints } from 'src/utils/types';\r\n\r\nconst defaultConfig: TInteractivePathConfig = {\r\n    radius: 2,\r\n    color: 100,\r\n    isClosed: false\r\n};\r\nclass InteractivePath {\r\n    p5: P5;\r\n    mode: 'draw' | 'view';\r\n    points: TPoints[];\r\n    paintRef: any;\r\n    radius: number;\r\n    color: number;\r\n    isClosed: boolean;\r\n\r\n    constructor(p5: P5, _config?: Partial<TInteractivePathConfig>) {\r\n        const config = { ...defaultConfig, ..._config };\r\n        this.p5 = p5;\r\n        this.mode = 'view';\r\n        this.points = [];\r\n        this.paintRef = this.paint.bind(this);\r\n        this.radius = config.radius;\r\n        this.color = config.color;\r\n        this.isClosed = config.isClosed;\r\n    }\r\n\r\n    setPoints(points: TPoints[]) {\r\n        this.points = points;\r\n        return this.stopPainting();\r\n    }\r\n\r\n    getPoints() {\r\n        return this.points;\r\n    }\r\n\r\n    getClosestSegment(\r\n        x: number,\r\n        y: number,\r\n        isPointWithinSegment = false\r\n    ): { length?: number; intersectionPosition?: P5.Vector } {\r\n        const queryPoint = this.p5.createVector(x, y);\r\n        let shortestLength: number | undefined = undefined;\r\n        let shortestPoint: P5.Vector | undefined;\r\n        const points = this.getPoints();\r\n        const numberOfLines = points.length;\r\n\r\n        this.p5.angleMode(this.p5.RADIANS);\r\n        this.p5.colorMode(this.p5.HSB);\r\n\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            const segmentLength = points[i].length;\r\n            let prev = 0;\r\n\r\n            for (let j = 1; (!this.isClosed && j < segmentLength) || (this.isClosed && j <= segmentLength); j++) {\r\n                let curr = j % segmentLength;\r\n                const line = P5.Vector.sub(points[i][curr], points[i][prev]);\r\n                const mouse = P5.Vector.sub(queryPoint, points[i][prev]);\r\n                const projection = mouse.dot(line);\r\n                const ratio = projection / line.magSq();\r\n\r\n                const temp = line.copy().normalize();\r\n                const projectionVector = isPointWithinSegment\r\n                    ? temp.setMag(ratio * line.mag())\r\n                    : temp.setMag(this.p5.constrain(ratio, 0, 1) * line.mag());\r\n\r\n                if (isPointWithinSegment && (ratio < 0 || ratio > 1)) {\r\n                    prev = curr;\r\n                    continue;\r\n                }\r\n\r\n                const projectionPos = projectionVector.copy().add(points[i][prev]);\r\n                const distanceToSegment = projectionPos.copy().sub(queryPoint).magSq();\r\n                if (shortestLength === undefined || distanceToSegment < shortestLength) {\r\n                    shortestLength = distanceToSegment;\r\n                    shortestPoint = projectionPos;\r\n                }\r\n                prev = curr;\r\n            }\r\n        }\r\n        return {\r\n            length: shortestLength,\r\n            intersectionPosition: shortestPoint\r\n        };\r\n    }\r\n\r\n    addPoint(point: P5.Vector) {\r\n        const lineIndex = this.points.length;\r\n        this.points[lineIndex].push(point.copy());\r\n        return this;\r\n    }\r\n\r\n    deletePoint() {\r\n        const lineIndex = this.points.length;\r\n        this.points[lineIndex].pop();\r\n        return this;\r\n    }\r\n\r\n    startPainting() {\r\n        if (this.mode === 'draw') return this;\r\n        this.mode = 'draw';\r\n        this.points.push([]);\r\n        this.p5.canvas.addEventListener('click', this.paintRef);\r\n        return this;\r\n    }\r\n\r\n    stopPainting() {\r\n        if (this.mode === 'view') return this;\r\n        this.mode = 'view';\r\n        this.p5.canvas.removeEventListener('click', this.paintRef);\r\n        return this;\r\n    }\r\n\r\n    togglePainting() {\r\n        this.mode === 'view' ? this.startPainting() : this.stopPainting();\r\n        return this;\r\n    }\r\n\r\n    paint(event: MouseEvent) {\r\n        const point = this.p5.createVector(event.x, event.y);\r\n        const numberOfLines = this.points.length;\r\n        this.points[numberOfLines - 1].push(point);\r\n        return this;\r\n    }\r\n\r\n    update(delta: number) {\r\n        delta;\r\n        return this;\r\n    }\r\n\r\n    draw() {\r\n        const numberOfLines = this.points.length;\r\n        this.p5.stroke(this.color);\r\n        this.p5.strokeWeight(this.radius * 2);\r\n\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            const length = this.points[i].length;\r\n            this.p5.noFill();\r\n            this.p5.beginShape();\r\n            for (let j = 0; j < length; j++) {\r\n                this.p5.circle(this.points[i][j].x, this.points[i][j].y, 10);\r\n                this.p5.vertex(this.points[i][j].x, this.points[i][j].y);\r\n            }\r\n\r\n            // decide if the line should render as closed\r\n            const shouldClose =\r\n                (this.isClosed && this.mode == 'draw' && numberOfLines > 1 && i !== numberOfLines - 1) ||\r\n                (this.isClosed && this.mode == 'view');\r\n            this.p5.endShape(shouldClose ? 'close' : undefined);\r\n\r\n            // draw the trailing line to the mouse while in the 'draw' mode\r\n            i == numberOfLines - 1 &&\r\n                length > 0 &&\r\n                this.mode == 'draw' &&\r\n                this.p5.line(this.points[i][length - 1].x, this.points[i][length - 1].y, this.p5.mouseX, this.p5.mouseY);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default InteractivePath;\r\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport AutonomousAgent from 'src/libs/autonomous-agent';\r\nimport { TPoints } from 'src/utils/types';\r\nimport InteractivePath from '../libs/interactive-path';\r\n\r\n/**--------------------------------- */\r\n// variables & types\r\nlet path: InteractivePath;\r\nlet agents: AutonomousAgent[] = [];\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        showHelpers: false,\r\n        maxSpeed: 3,\r\n        maxForce: 0.3\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n\r\n    gui.add(options, 'showHelpers').onChange((val) =>\r\n        agents.forEach((agent) => {\r\n            agent.setValues('showHelpers', val);\r\n        })\r\n    );\r\n    gui.add(options, 'maxSpeed', 0.1, 10, 0.1).onChange((val) =>\r\n        agents.forEach((agent) => {\r\n            agent.setValues('maxSpeed', val);\r\n        })\r\n    );\r\n    gui.add(options, 'maxForce', 0.01, 2, 0.01).onChange((val) =>\r\n        agents.forEach((agent) => {\r\n            agent.setValues('maxForce', val);\r\n        })\r\n    );\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n        init(p5);\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n\r\n        path.update(p5.deltaTime).draw();\r\n        pathFollow(path, agents);\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n\r\n        // setup path\r\n        path = new InteractivePath(p5, { isClosed: true, color: 20, radius: 20 });\r\n        const points: TPoints[] = [\r\n            [\r\n                p5.createVector(150, 300),\r\n                p5.createVector(250, 150),\r\n                p5.createVector(550, 250),\r\n                p5.createVector(730, 150),\r\n                p5.createVector(800, 500),\r\n                p5.createVector(400, 600)\r\n            ]\r\n        ];\r\n        path.setPoints(points);\r\n\r\n        //setup agent\r\n        agents.push(\r\n            new AutonomousAgent(p5, {\r\n                pos: p5.createVector(p5.random(window.innerWidth), p5.random(window.innerHeight)),\r\n                velocity: P5.Vector.random2D().setMag(options.maxSpeed),\r\n                maxSpeed: options.maxSpeed,\r\n                maxForce: options.maxForce,\r\n                wrapOnScreenEdge: true\r\n            })\r\n        );\r\n    }\r\n\r\n    function pathFollow(path: InteractivePath, agents: AutonomousAgent[]) {\r\n        for (let i = 0; i < agents.length; i++) {\r\n            const force = agents[i].pathFollow(path, true);\r\n            agents[i].applyForces(force).update().draw();\r\n        }\r\n\r\n        for (const agent of agents) {\r\n            agent.move();\r\n        }\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n"],"names":["$5bf28487eb919670$var$path","$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$7ed1d321420b0c7f$export$2e2bcd8739ae039","$7Pz0b","$7ed1d321420b0c7f$var$id","constructor","p5","_config","config","pos","createVector","mass","velocity","cachedVelocity","acceleration","maxSpeed","maxForce","wanderTheta","breakingThreshold","r","material","color","perceptionRadius","repelRadius","visibilityAngle","Math","PI","wrapOnScreenEdge","showHelpers","setValues","key","value","draw","push","translate","x","y","rotate","heading","drawHelpers","drawSprite","pop","update","copy","add","limit","move","constraintWithinWindow","applyForces","force","size","stroke","strokeWeight","noFill","triangle","noStroke","fill","textSize","text","mag","circle","arc","temp","setMag","mult","line","seek","target","isArriving","Vector","sub","desiredVelocity","distance","map","flee","pursue","agent","predictedPos","evade","arrive","wander","deltaTheta","lookaheadRadius","cos","sin","targetPos","random","pathFollow","path","isPointWithinSegment","normalize","closest","getClosestSegment","length","radius","intersectionPosition","groupBehaviour","agents","alignment","cohesion","separation","numberOfAgents","i","angle","dot","dist","ratio","diff","div","innerWidth","innerHeight","window","$a58c6e89015b1402$export$2e2bcd8739ae039","$a58c6e89015b1402$var$defaultConfig","isClosed","mode","points","paintRef","paint","bind","setPoints","stopPainting","getPoints","shortestPoint","shortestLength","queryPoint","numberOfLines","angleMode","RADIANS","colorMode","HSB","segmentLength","prev","j","curr","projection","mouse","magSq","projectionVector","constrain","projectionPos","distanceToSegment","undefined","addPoint","point","lineIndex","deletePoint","startPainting","canvas","addEventListener","removeEventListener","togglePainting","event","delta","beginShape","vertex","shouldClose","endShape","mouseX","mouseY","$e93rA","$hMArn","$7wO5S","$5bf28487eb919670$var$agents","options","gui","GUI","autoPlace","domElement","document","getElementById","appendChild","onChange","val","forEach","setup","createCanvas","parent","background","pixelDensity","resizeDisplay","resizeCanvas","random2D","deltaTime"],"version":3,"file":"steering-behaviours-path-follow.cafc7237.js.map"}