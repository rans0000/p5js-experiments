{"mappings":"IEUI,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,M,E,EDAQ,EAKA,E,E,E,O,C,sB,I,G,E,E,O,C,oB,I,G,E,E,O,C,Y,I,G,E,E,O,C,Q,I,GAZL,IAAM,EAAsB,CAAE,EAAG,CAAE,EAC7B,EAA4B,CACrC,IAAK,CAAA,EACL,MAAO,CAAA,EACP,OAAQ,CAAA,EACR,KAAM,CAAA,CACV,C,EACY,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,I,C,E,C,O,C,C,E,M,C,E,C,S,C,C,E,K,C,E,C,Q,CAKA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,M,C,E,C,S,C,C,E,E,C,E,C,I,G,I,E,E,S,E,E,S,E,E,SEXZ,IAAI,EAAQ,EA2UZ,SAAS,EAAW,CAAM,EAEtB,IAAM,EAA0B,EAAE,CAClC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAuB,IACvC,EAAM,IAAI,CAAC,CACP,IAAK,EAAG,YAAY,CAAC,EAjVpB,EAiVmC,KAAK,KAAK,CAAC,EAjV9C,IAkVD,MAAO,KAAA,CACX,GAEJ,OAAO,CACX,CAEA,SAAS,EAAc,CAAqB,CAAE,CAAqB,CAAE,CAAqB,EACtF,OAAO,EAAM,KAAK,GAAK,EAAM,KAAK,EAAI,EAAM,KAAK,GAAK,EAAM,KAAK,AACrE,CAEA,SAAS,EAAU,CAAuB,CAAE,CAAa,EAErD,OADA,IACO,AAAQ,KAAA,IAAR,EAAoB,EAAI,AAAQ,IAAR,EAAY,IAAM,EAAQ,GAAK,CAClE,CAcA,IAAA,EA9VA,MAUI,YAAY,CAAM,CAAE,CAA6B,CAAE,CAC/C,IAAM,EAAqB,CACvB,YAAa,CAAA,EACb,MAAO,EAAW,GAClB,KAAM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","sources":["<anon>","src/utils/utils.ts","src/scripts/tictactoe-game.ts","src/libs/tictactoe.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fK5g3\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultEntityConfig\", () => $28770b279d7ab5b1$export$73820bb3da69f923);\n$parcel$export(module.exports, \"defaultEdgeConfig\", () => $28770b279d7ab5b1$export$1ea8cd15d9ca5dee);\n$parcel$export(module.exports, \"MOUSE_BTN\", () => $28770b279d7ab5b1$export$bfd2dc5313efa3a3);\n$parcel$export(module.exports, \"Gamer\", () => $28770b279d7ab5b1$export$4008efb11b076cd5);\nconst $28770b279d7ab5b1$export$73820bb3da69f923 = {\n    r: 5\n};\nconst $28770b279d7ab5b1$export$1ea8cd15d9ca5dee = {\n    top: true,\n    right: true,\n    bottom: true,\n    left: true\n};\nvar $28770b279d7ab5b1$export$bfd2dc5313efa3a3;\n(function(MOUSE_BTN) {\n    MOUSE_BTN[MOUSE_BTN[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BTN[MOUSE_BTN[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BTN[MOUSE_BTN[\"RIGHT\"] = 2] = \"RIGHT\";\n})($28770b279d7ab5b1$export$bfd2dc5313efa3a3 || ($28770b279d7ab5b1$export$bfd2dc5313efa3a3 = {}));\nvar $28770b279d7ab5b1$export$4008efb11b076cd5;\n(function(Gamer) {\n    Gamer[Gamer[\"PLAYER\"] = 0] = \"PLAYER\";\n    Gamer[Gamer[\"AI\"] = 1] = \"AI\";\n})($28770b279d7ab5b1$export$4008efb11b076cd5 || ($28770b279d7ab5b1$export$4008efb11b076cd5 = {}));\n\n});\n\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\nconst $1e29e90231e3e602$var$SIZE = 3;\nlet $1e29e90231e3e602$var$turns = 0;\nclass $1e29e90231e3e602$var$TicTacToe {\n    constructor(p5, _config){\n        const config = {\n            showHelpers: false,\n            cells: $1e29e90231e3e602$var$buildCells(p5),\n            size: 400,\n            status: undefined,\n            currentTurn: (0, $fK5g3.Gamer).PLAYER,\n            winnerCells: [],\n            ..._config\n        };\n        this.p5 = p5;\n        this.showHelpers = config.showHelpers;\n        this.cells = config.cells;\n        this.size = config.size;\n        this.status = config.status;\n        this.currentTurn = config.currentTurn;\n        winnerCells: config.winnerCells;\n        this.onResolve = config.onResolve;\n        this.p5.canvas.addEventListener(\"click\", this.onClick.bind(this));\n        if (this.currentTurn === (0, $fK5g3.Gamer).AI) {\n            const index = this.calculateBestMove(this.cells);\n            if (index > -1) this.cells[index].owner = (0, $fK5g3.Gamer).AI;\n            this.currentTurn = (0, $fK5g3.Gamer).PLAYER;\n        }\n    }\n    setValues(key, value) {\n        if (typeof value === \"number\") switch(key){\n            case \"size\":\n                this.size = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n        if (typeof value === \"boolean\") switch(key){\n            case \"showHelpers\":\n                this.showHelpers = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n    }\n    onClick(event) {\n        if (this.status !== undefined) return;\n        const width = this.size / $1e29e90231e3e602$var$SIZE;\n        const { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        const offsetX = (innerWidth - this.size) / 2;\n        const offsetY = (innerHeight - this.size) / 2;\n        const { clientX: clientX, clientY: clientY } = event;\n        // set selected cell\n        for (const cell of this.cells){\n            const startX = offsetX + cell.pos.x * width;\n            const startY = offsetY + cell.pos.y * width;\n            if (cell.owner === undefined && clientX > startX && clientX < startX + this.size / $1e29e90231e3e602$var$SIZE && clientY > startY && clientY < startY + this.size / $1e29e90231e3e602$var$SIZE) {\n                cell.owner = this.currentTurn;\n                this.currentTurn = this.currentTurn === (0, $fK5g3.Gamer).AI ? (0, $fK5g3.Gamer).PLAYER : (0, $fK5g3.Gamer).AI;\n            }\n        }\n        // ai calculations\n        if (this.currentTurn === (0, $fK5g3.Gamer).AI) {\n            $1e29e90231e3e602$var$turns = 0;\n            const index = this.calculateBestMove(this.cells);\n            if (index > -1) this.cells[index].owner = (0, $fK5g3.Gamer).AI;\n            this.currentTurn = (0, $fK5g3.Gamer).PLAYER;\n            console.log($1e29e90231e3e602$var$turns);\n        }\n        // check win/draw status\n        const game = this.checkGameStatus(this.cells);\n        this.status = game.winner;\n        this.winnerCells = game.cells;\n        if (game.filledCells === 0 || game.winner !== undefined) this.onResolve && this.onResolve(game);\n    }\n    calculateBestMove(cells = []) {\n        const dimension = $1e29e90231e3e602$var$SIZE * $1e29e90231e3e602$var$SIZE;\n        let bestScore = -Infinity;\n        let move = -1;\n        let depth = 0;\n        let alpha = -Infinity;\n        let beta = Infinity;\n        for(let i = 0; i < dimension; i++)if (cells[i].owner === undefined) {\n            cells[i].owner = (0, $fK5g3.Gamer).AI;\n            let score = this.minimax(cells, depth, false, alpha, beta, i);\n            this.showHelpers && console.log(\"score: \", i, score);\n            cells[i].owner = undefined;\n            if (score >= bestScore) {\n                bestScore = score;\n                move = i;\n            }\n        }\n        return move;\n    }\n    minimax(cells = [], depth, isMaximizing, alpha, beta, next) {\n        const dimension = $1e29e90231e3e602$var$SIZE * $1e29e90231e3e602$var$SIZE;\n        const game = this.checkGameStatus(cells);\n        $1e29e90231e3e602$var$turns++;\n        game.winner !== undefined && game.filledCells === 8 && console.log(game);\n        if (game.winner !== undefined) {\n            const points = $1e29e90231e3e602$var$getPoints(game.winner, depth);\n            if (this.showHelpers) {\n                let ccc = $1e29e90231e3e602$var$printCells(cells);\n                console.log(ccc, `C: ${next} P: ${points.toFixed(2)}  D: ${depth}`);\n            }\n            return points;\n        }\n        if (game.winner === undefined && game.filledCells === 0) return $1e29e90231e3e602$var$getPoints(game.winner, depth);\n        if (isMaximizing) {\n            let bestScore = -Infinity;\n            for(let i = 0; i < dimension; i++)// is spot available?\n            if (cells[i].owner === undefined) {\n                cells[i].owner = (0, $fK5g3.Gamer).AI;\n                let score = this.minimax(cells, depth + 1, false, alpha, beta, i);\n                cells[i].owner = undefined;\n                bestScore = Math.max(score, bestScore);\n                alpha = Math.max(alpha, score);\n                if (beta <= alpha) break;\n            }\n            return bestScore;\n        } else {\n            let bestScore = Infinity;\n            for(let i = 0; i < dimension; i++)// is spot available?\n            if (cells[i].owner === undefined) {\n                cells[i].owner = (0, $fK5g3.Gamer).PLAYER;\n                let score = this.minimax(cells, depth + 1, true, alpha, beta, i);\n                cells[i].owner = undefined;\n                bestScore = Math.min(score, bestScore);\n                beta = Math.min(beta, score);\n                if (beta <= alpha) break;\n            }\n            return bestScore;\n        }\n    }\n    checkGameStatus(cells) {\n        let filledCells = 0;\n        let winner;\n        let victoryCells = [];\n        // cheack filled cells\n        for (const cell of cells)if (cell.owner === undefined) ++filledCells;\n        // check for win\n        const dimension = $1e29e90231e3e602$var$SIZE;\n        for(let i = 0; i < dimension; i++){\n            if (cells[i].owner !== undefined && $1e29e90231e3e602$var$areCellsEqual(cells[i], cells[i + dimension], cells[i + 2 * dimension])) {\n                winner = cells[i].owner;\n                victoryCells = [\n                    cells[i],\n                    cells[i + dimension],\n                    cells[i + 2 * dimension]\n                ];\n                break;\n            }\n            if (cells[i * dimension].owner !== undefined && $1e29e90231e3e602$var$areCellsEqual(cells[i * dimension], cells[1 + i * dimension], cells[2 + i * dimension])) {\n                winner = cells[i * dimension].owner;\n                victoryCells = [\n                    cells[i * dimension],\n                    cells[1 + i * dimension],\n                    cells[2 + i * dimension]\n                ];\n                break;\n            }\n        }\n        if (cells[0].owner !== undefined && $1e29e90231e3e602$var$areCellsEqual(cells[0], cells[4], cells[8])) {\n            winner = cells[0].owner;\n            victoryCells = [\n                cells[0],\n                cells[4],\n                cells[8]\n            ];\n        }\n        if (cells[2].owner !== undefined && $1e29e90231e3e602$var$areCellsEqual(cells[2], cells[4], cells[6])) {\n            winner = cells[2].owner;\n            victoryCells = [\n                cells[2],\n                cells[4],\n                cells[6]\n            ];\n        }\n        return {\n            filledCells: filledCells,\n            winner: winner,\n            cells: victoryCells\n        };\n    }\n    resetGame(currentTurn = (0, $fK5g3.Gamer).PLAYER) {\n        this.cells = $1e29e90231e3e602$var$buildCells(this.p5);\n        this.currentTurn = currentTurn;\n        this.status = undefined;\n        this.winnerCells = [];\n        if (this.currentTurn === (0, $fK5g3.Gamer).AI) {\n            const index = this.calculateBestMove(this.cells);\n            if (index > -1) this.cells[index].owner = (0, $fK5g3.Gamer).AI;\n            this.currentTurn = (0, $fK5g3.Gamer).PLAYER;\n        }\n    }\n    update(deltaTime) {\n        return this;\n    }\n    draw() {\n        this.p5.cursor(this.p5.ARROW);\n        const width = this.size / $1e29e90231e3e602$var$SIZE;\n        const { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        const offsetX = (innerWidth - this.size) / 2;\n        const offsetY = (innerHeight - this.size) / 2;\n        const dimension = $1e29e90231e3e602$var$SIZE;\n        const { mouseX: mouseX, mouseY: mouseY } = this.p5;\n        for (const cell of this.cells){\n            const startX = offsetX + cell.pos.x * width;\n            const startY = offsetY + cell.pos.y * width;\n            //draw the cells\n            this.p5.strokeWeight(1);\n            this.p5.stroke(255);\n            this.p5.fill(40, 50, 10);\n            this.p5.rectMode(this.p5.CORNER);\n            this.p5.rect(startX, startY, width, width);\n            // draw cell index\n            if (this.showHelpers) {\n                this.p5.textAlign(this.p5.LEFT, this.p5.TOP);\n                this.p5.textSize(15);\n                this.p5.text(cell.pos.x + cell.pos.y * $1e29e90231e3e602$var$SIZE, startX, startY);\n            }\n            if (cell.owner !== undefined) {\n                this.p5.strokeWeight(0);\n                this.p5.fill(255);\n                this.p5.textAlign(this.p5.CENTER, this.p5.CENTER);\n                this.p5.textSize(this.size / dimension);\n                const text = cell.owner === (0, $fK5g3.Gamer).PLAYER ? \"X\" : \"O\";\n                this.p5.text(text, startX + this.size / dimension / 2, startY + this.size / dimension / 2);\n            }\n            // draw winner cells\n            if (this.status === (0, $fK5g3.Gamer).AI || this.status === (0, $fK5g3.Gamer).PLAYER) {\n                this.p5.strokeWeight(10);\n                this.p5.stroke(0, 100, 100);\n                this.p5.line(offsetX + this.size / dimension / 2 + this.winnerCells[0].pos.x * width, offsetY + this.size / dimension / 2 + this.winnerCells[0].pos.y * width, offsetX + this.size / dimension / 2 + this.winnerCells[2].pos.x * width, offsetY + this.size / dimension / 2 + this.winnerCells[2].pos.y * width);\n            }\n            // show valid cells\n            if (this.status !== undefined) continue;\n            if (cell.owner === undefined && mouseX > startX && mouseX < startX + this.size / dimension && mouseY > startY && mouseY < startY + this.size / dimension) this.p5.cursor(this.p5.HAND);\n        }\n        return this;\n    }\n}\n/**--------------------------------- */ // functions\nfunction $1e29e90231e3e602$var$buildCells(p5) {\n    const dimension = $1e29e90231e3e602$var$SIZE;\n    const cells = [];\n    for(let i = 0; i < dimension * dimension; i++)cells.push({\n        pos: p5.createVector(i % dimension, Math.floor(i / dimension)),\n        owner: undefined\n    });\n    return cells;\n}\nfunction $1e29e90231e3e602$var$areCellsEqual(cell0, cell1, cell2) {\n    return cell0.owner === cell1.owner && cell0.owner === cell2.owner;\n}\nfunction $1e29e90231e3e602$var$getPoints(val, depth) {\n    depth++;\n    return val === undefined ? 0 : val === 0 ? -10 / depth : 10 / depth;\n}\nfunction $1e29e90231e3e602$var$printCells(cells = []) {\n    let text = \"\";\n    for(let i = 0; i < $1e29e90231e3e602$var$SIZE; i++){\n        for(let j = 0; j < $1e29e90231e3e602$var$SIZE; j++){\n            const index = i * $1e29e90231e3e602$var$SIZE + j;\n            text += `${cells[index].owner === undefined ? \"   \" : cells[index].owner === (0, $fK5g3.Gamer).AI ? \" O \" : \" X \"}`;\n        }\n        text += \"\\n\";\n    }\n    return text;\n}\nvar $1e29e90231e3e602$export$2e2bcd8739ae039 = $1e29e90231e3e602$var$TicTacToe;\n\n\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\n/**--------------------------------- */ // variables & types\nconst $e281af5c1f85aa33$var$scoreContainer = document.getElementById(\"score-card\");\nconst $e281af5c1f85aa33$var$statusContainer = document.getElementById(\"status\");\nconst $e281af5c1f85aa33$var$resetBtn = document.getElementById(\"btn-reset\");\nlet $e281af5c1f85aa33$var$board;\n/**--------------------------------- */ // sketch\nconst $e281af5c1f85aa33$var$sketch = (p5)=>{\n    const options = {\n        showHelpers: false,\n        size: 400,\n        currentTurn: (0, $fK5g3.Gamer).AI\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"showHelpers\").onChange((val)=>{\n        console.log(val);\n        $e281af5c1f85aa33$var$board.setValues(\"showHelpers\", val);\n    });\n    gui.add(options, \"size\", 200, 500, 10).onChange((val)=>{\n        $e281af5c1f85aa33$var$board.setValues(\"size\", val);\n        if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.top = `${(window.innerHeight + val) / 2 + 30}px`;\n    });\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        // setup markup\n        if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.top = `${(window.innerHeight + options.size) / 2 + 30}px`;\n        $e281af5c1f85aa33$var$scoreContainer?.addEventListener(\"submit\", (event)=>{\n            event.preventDefault();\n            $e281af5c1f85aa33$var$scoreContainer.style.display = \"none\";\n            options.currentTurn = options.currentTurn === (0, $fK5g3.Gamer).AI ? (0, $fK5g3.Gamer).PLAYER : (0, $fK5g3.Gamer).AI;\n            if (options.currentTurn === (0, $fK5g3.Gamer).PLAYER) {\n                if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.display = \"flex\";\n                if ($e281af5c1f85aa33$var$statusContainer) $e281af5c1f85aa33$var$statusContainer.innerText = \"Start Game\";\n                if ($e281af5c1f85aa33$var$resetBtn) $e281af5c1f85aa33$var$resetBtn.style.display = \"none\";\n            }\n            $e281af5c1f85aa33$var$board.resetGame(options.currentTurn);\n        });\n        //\n        init(p5);\n        // setup the board\n        $e281af5c1f85aa33$var$board = new (0, $1e29e90231e3e602$export$2e2bcd8739ae039)(p5, {\n            showHelpers: options.showHelpers,\n            size: options.size,\n            onResolve: onResolve,\n            currentTurn: options.currentTurn\n        });\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        $e281af5c1f85aa33$var$board.update(p5.deltaTime).draw();\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n    }\n    function onResolve(game) {\n        let text = \"\";\n        switch(game.winner){\n            case (0, $fK5g3.Gamer).PLAYER:\n                text = \"Player 'X' Wins!!\";\n                break;\n            case (0, $fK5g3.Gamer).AI:\n                text = \"Player 'O' Wins!!\";\n                break;\n            default:\n                text = \"Game is a Tie!!\";\n                break;\n        }\n        if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.display = \"flex\";\n        if ($e281af5c1f85aa33$var$statusContainer) $e281af5c1f85aa33$var$statusContainer.innerText = text;\n        if ($e281af5c1f85aa33$var$resetBtn) $e281af5c1f85aa33$var$resetBtn.style.display = \"block\";\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($e281af5c1f85aa33$var$sketch);\n\n\n//# sourceMappingURL=tic-tac-toe.8b7f2189.js.map\n","import P5 from 'p5';\r\nimport { TEdges } from './types';\r\n\r\nexport const defaultEntityConfig = { r: 5 };\r\nexport const defaultEdgeConfig: TEdges = {\r\n    top: true,\r\n    right: true,\r\n    bottom: true,\r\n    left: true\r\n};\r\nexport enum MOUSE_BTN {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\nexport enum Gamer {\r\n    PLAYER,\r\n    AI\r\n}\r\nexport type TTicTacToeCell = {\r\n    pos: P5.Vector;\r\n    owner: Gamer | undefined;\r\n};\r\nexport type TGameStatus = {\r\n    filledCells: number;\r\n    winner: Gamer | undefined;\r\n    cells: TTicTacToeCell[];\r\n};\r\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport TicTacToe from 'src/libs/tictactoe';\r\nimport { Gamer, TGameStatus } from 'src/utils/utils';\r\n\r\n/**--------------------------------- */\r\n// variables & types\r\nconst scoreContainer = document.getElementById('score-card');\r\nconst statusContainer = document.getElementById('status');\r\nconst resetBtn = document.getElementById('btn-reset');\r\nlet board: TicTacToe;\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        showHelpers: false,\r\n        size: 400,\r\n        currentTurn: Gamer.AI\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'showHelpers').onChange((val) => {\r\n        console.log(val);\r\n\r\n        board.setValues('showHelpers', val);\r\n    });\r\n    gui.add(options, 'size', 200, 500, 10).onChange((val) => {\r\n        board.setValues('size', val);\r\n        if (scoreContainer) scoreContainer.style.top = `${(window.innerHeight + val) / 2 + 30}px`;\r\n    });\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n        // setup markup\r\n        if (scoreContainer) scoreContainer.style.top = `${(window.innerHeight + options.size) / 2 + 30}px`;\r\n        scoreContainer?.addEventListener('submit', (event: FormDataEvent) => {\r\n            event.preventDefault();\r\n            scoreContainer.style.display = 'none';\r\n            options.currentTurn = options.currentTurn === Gamer.AI ? Gamer.PLAYER : Gamer.AI;\r\n            if (options.currentTurn === Gamer.PLAYER) {\r\n                if (scoreContainer) scoreContainer.style.display = 'flex';\r\n                if (statusContainer) statusContainer.innerText = 'Start Game';\r\n                if (resetBtn) resetBtn.style.display = 'none';\r\n            }\r\n            board.resetGame(options.currentTurn);\r\n        });\r\n\r\n        //\r\n        init(p5);\r\n\r\n        // setup the board\r\n        board = new TicTacToe(p5, {\r\n            showHelpers: options.showHelpers,\r\n            size: options.size,\r\n            onResolve: onResolve,\r\n            currentTurn: options.currentTurn\r\n        });\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n\r\n        board.update(p5.deltaTime).draw();\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n    }\r\n\r\n    function onResolve(game: TGameStatus) {\r\n        let text = '';\r\n\r\n        switch (game.winner) {\r\n            case Gamer.PLAYER:\r\n                text = \"Player 'X' Wins!!\";\r\n                break;\r\n            case Gamer.AI:\r\n                text = \"Player 'O' Wins!!\";\r\n                break;\r\n            default:\r\n                text = 'Game is a Tie!!';\r\n                break;\r\n        }\r\n        if (scoreContainer) scoreContainer.style.display = 'flex';\r\n        if (statusContainer) statusContainer.innerText = text;\r\n        if (resetBtn) resetBtn.style.display = 'block';\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import P5 from 'p5';\r\nimport { Gamer, TGameStatus, TTicTacToeCell } from 'src/utils/utils';\r\n\r\nconst SIZE = 3;\r\nlet turns = 0;\r\n\r\ntype TTicTacToe = {\r\n    showHelpers: boolean;\r\n    cells: TTicTacToeCell[];\r\n    size: number;\r\n    currentTurn: Gamer;\r\n    status: Gamer | undefined;\r\n    winnerCells: TTicTacToeCell[];\r\n    onResolve?: (status: TGameStatus) => void;\r\n};\r\n\r\ntype Keys = 'size' | 'showHelpers';\r\n\r\nclass TicTacToe {\r\n    p5: P5;\r\n    cells: TTicTacToeCell[];\r\n    showHelpers: boolean;\r\n    size: number;\r\n    status: TTicTacToe['status'];\r\n    currentTurn: Gamer;\r\n    winnerCells: TTicTacToeCell[];\r\n    onResolve?: (status: TGameStatus) => void;\r\n\r\n    constructor(p5: P5, _config?: Partial<TTicTacToe>) {\r\n        const config: TTicTacToe = {\r\n            showHelpers: false,\r\n            cells: buildCells(p5),\r\n            size: 400,\r\n            status: undefined,\r\n            currentTurn: Gamer.PLAYER,\r\n            winnerCells: [],\r\n            ..._config\r\n        };\r\n        this.p5 = p5;\r\n        this.showHelpers = config.showHelpers;\r\n        this.cells = config.cells;\r\n        this.size = config.size;\r\n        this.status = config.status;\r\n        this.currentTurn = config.currentTurn;\r\n        winnerCells: config.winnerCells;\r\n        this.onResolve = config.onResolve;\r\n\r\n        this.p5.canvas.addEventListener('click', this.onClick.bind(this));\r\n\r\n        if (this.currentTurn === Gamer.AI) {\r\n            const index = this.calculateBestMove(this.cells);\r\n            if (index > -1) this.cells[index].owner = Gamer.AI;\r\n            this.currentTurn = Gamer.PLAYER;\r\n        }\r\n    }\r\n\r\n    setValues(key: Keys, value: number | boolean) {\r\n        if (typeof value === 'number') {\r\n            switch (key) {\r\n                case 'size':\r\n                    this.size = value;\r\n                    break;\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n        if (typeof value === 'boolean') {\r\n            switch (key) {\r\n                case 'showHelpers':\r\n                    this.showHelpers = value;\r\n                    break;\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick(event: MouseEvent) {\r\n        if (this.status !== undefined) return;\r\n\r\n        const width = this.size / SIZE;\r\n        const { innerWidth, innerHeight } = window;\r\n        const offsetX = (innerWidth - this.size) / 2;\r\n        const offsetY = (innerHeight - this.size) / 2;\r\n        const { clientX, clientY } = event;\r\n\r\n        // set selected cell\r\n        for (const cell of this.cells) {\r\n            const startX = offsetX + cell.pos.x * width;\r\n            const startY = offsetY + cell.pos.y * width;\r\n\r\n            if (\r\n                cell.owner === undefined &&\r\n                clientX > startX &&\r\n                clientX < startX + this.size / SIZE &&\r\n                clientY > startY &&\r\n                clientY < startY + this.size / SIZE\r\n            ) {\r\n                cell.owner = this.currentTurn;\r\n                this.currentTurn = this.currentTurn === Gamer.AI ? Gamer.PLAYER : Gamer.AI;\r\n            }\r\n        }\r\n\r\n        // ai calculations\r\n        if (this.currentTurn === Gamer.AI) {\r\n            turns = 0;\r\n            const index = this.calculateBestMove(this.cells);\r\n\r\n            if (index > -1) this.cells[index].owner = Gamer.AI;\r\n            this.currentTurn = Gamer.PLAYER;\r\n            console.log(turns);\r\n        }\r\n\r\n        // check win/draw status\r\n        const game = this.checkGameStatus(this.cells);\r\n        this.status = game.winner;\r\n        this.winnerCells = game.cells;\r\n\r\n        if (game.filledCells === 0 || game.winner !== undefined) {\r\n            this.onResolve && this.onResolve(game);\r\n        }\r\n    }\r\n\r\n    calculateBestMove(cells: TTicTacToeCell[] = []): number {\r\n        const dimension = SIZE * SIZE;\r\n        let bestScore = -Infinity;\r\n        let move: number = -1;\r\n        let depth = 0;\r\n        let alpha = -Infinity;\r\n        let beta = Infinity;\r\n\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (cells[i].owner === undefined) {\r\n                cells[i].owner = Gamer.AI;\r\n                let score = this.minimax(cells, depth, false, alpha, beta, i);\r\n                this.showHelpers && console.log('score: ', i, score);\r\n\r\n                cells[i].owner = undefined;\r\n                if (score >= bestScore) {\r\n                    bestScore = score;\r\n                    move = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return move;\r\n    }\r\n\r\n    minimax(\r\n        cells: TTicTacToeCell[] = [],\r\n        depth: number,\r\n        isMaximizing: boolean,\r\n        alpha: number,\r\n        beta: number,\r\n        next: number\r\n    ): number {\r\n        const dimension = SIZE * SIZE;\r\n        const game = this.checkGameStatus(cells);\r\n\r\n        turns++;\r\n\r\n        game.winner !== undefined && game.filledCells === 8 && console.log(game);\r\n\r\n        if (game.winner !== undefined) {\r\n            const points = getPoints(game.winner, depth);\r\n            if (this.showHelpers) {\r\n                let ccc = printCells(cells);\r\n                console.log(ccc, `C: ${next} P: ${points.toFixed(2)}  D: ${depth}`);\r\n            }\r\n\r\n            return points;\r\n        }\r\n        if (game.winner === undefined && game.filledCells === 0) return getPoints(game.winner, depth);\r\n\r\n        if (isMaximizing) {\r\n            let bestScore = -Infinity;\r\n            for (let i = 0; i < dimension; i++) {\r\n                // is spot available?\r\n                if (cells[i].owner === undefined) {\r\n                    cells[i].owner = Gamer.AI;\r\n                    let score = this.minimax(cells, depth + 1, false, alpha, beta, i);\r\n                    cells[i].owner = undefined;\r\n                    bestScore = Math.max(score, bestScore);\r\n                    alpha = Math.max(alpha, score);\r\n                    if (beta <= alpha) break;\r\n                }\r\n            }\r\n\r\n            return bestScore;\r\n        } else {\r\n            let bestScore = Infinity;\r\n            for (let i = 0; i < dimension; i++) {\r\n                // is spot available?\r\n                if (cells[i].owner === undefined) {\r\n                    cells[i].owner = Gamer.PLAYER;\r\n                    let score = this.minimax(cells, depth + 1, true, alpha, beta, i);\r\n                    cells[i].owner = undefined;\r\n                    bestScore = Math.min(score, bestScore);\r\n                    beta = Math.min(beta, score);\r\n                    if (beta <= alpha) break;\r\n                }\r\n            }\r\n            return bestScore;\r\n        }\r\n    }\r\n\r\n    checkGameStatus(cells: TTicTacToeCell[]): TGameStatus {\r\n        let filledCells = 0;\r\n        let winner: TGameStatus['winner'];\r\n        let victoryCells: TTicTacToeCell[] = [];\r\n\r\n        // cheack filled cells\r\n        for (const cell of cells) {\r\n            if (cell.owner === undefined) ++filledCells;\r\n        }\r\n\r\n        // check for win\r\n        const dimension = SIZE;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (cells[i].owner !== undefined && areCellsEqual(cells[i], cells[i + dimension], cells[i + 2 * dimension])) {\r\n                winner = cells[i].owner;\r\n                victoryCells = [cells[i], cells[i + dimension], cells[i + 2 * dimension]];\r\n                break;\r\n            }\r\n\r\n            if (\r\n                cells[i * dimension].owner !== undefined &&\r\n                areCellsEqual(cells[i * dimension], cells[1 + i * dimension], cells[2 + i * dimension])\r\n            ) {\r\n                winner = cells[i * dimension].owner;\r\n                victoryCells = [cells[i * dimension], cells[1 + i * dimension], cells[2 + i * dimension]];\r\n                break;\r\n            }\r\n        }\r\n        if (cells[0].owner !== undefined && areCellsEqual(cells[0], cells[4], cells[8])) {\r\n            winner = cells[0].owner;\r\n            victoryCells = [cells[0], cells[4], cells[8]];\r\n        }\r\n        if (cells[2].owner !== undefined && areCellsEqual(cells[2], cells[4], cells[6])) {\r\n            winner = cells[2].owner;\r\n            victoryCells = [cells[2], cells[4], cells[6]];\r\n        }\r\n\r\n        return {\r\n            filledCells,\r\n            winner,\r\n            cells: victoryCells\r\n        };\r\n    }\r\n\r\n    resetGame(currentTurn: Gamer = Gamer.PLAYER) {\r\n        this.cells = buildCells(this.p5);\r\n        this.currentTurn = currentTurn;\r\n        this.status = undefined;\r\n        this.winnerCells = [];\r\n\r\n        if (this.currentTurn === Gamer.AI) {\r\n            const index = this.calculateBestMove(this.cells);\r\n            if (index > -1) this.cells[index].owner = Gamer.AI;\r\n            this.currentTurn = Gamer.PLAYER;\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number): this {\r\n        return this;\r\n    }\r\n\r\n    draw(): this {\r\n        this.p5.cursor(this.p5.ARROW);\r\n        const width = this.size / SIZE;\r\n        const { innerWidth, innerHeight } = window;\r\n        const offsetX = (innerWidth - this.size) / 2;\r\n        const offsetY = (innerHeight - this.size) / 2;\r\n        const dimension = SIZE;\r\n        const { mouseX, mouseY } = this.p5;\r\n\r\n        for (const cell of this.cells) {\r\n            const startX = offsetX + cell.pos.x * width;\r\n            const startY = offsetY + cell.pos.y * width;\r\n\r\n            //draw the cells\r\n            this.p5.strokeWeight(1);\r\n            this.p5.stroke(255);\r\n            this.p5.fill(40, 50, 10);\r\n            this.p5.rectMode(this.p5.CORNER);\r\n            this.p5.rect(startX, startY, width, width);\r\n\r\n            // draw cell index\r\n            if (this.showHelpers) {\r\n                this.p5.textAlign(this.p5.LEFT, this.p5.TOP);\r\n                this.p5.textSize(15);\r\n                this.p5.text(cell.pos.x + cell.pos.y * SIZE, startX, startY);\r\n            }\r\n\r\n            if (cell.owner !== undefined) {\r\n                this.p5.strokeWeight(0);\r\n                this.p5.fill(255);\r\n                this.p5.textAlign(this.p5.CENTER, this.p5.CENTER);\r\n                this.p5.textSize(this.size / dimension);\r\n                const text = cell.owner === Gamer.PLAYER ? 'X' : 'O';\r\n                this.p5.text(text, startX + this.size / dimension / 2, startY + this.size / dimension / 2);\r\n            }\r\n\r\n            // draw winner cells\r\n            if (this.status === Gamer.AI || this.status === Gamer.PLAYER) {\r\n                this.p5.strokeWeight(10);\r\n                this.p5.stroke(0, 100, 100);\r\n\r\n                this.p5.line(\r\n                    offsetX + this.size / dimension / 2 + this.winnerCells[0].pos.x * width,\r\n                    offsetY + this.size / dimension / 2 + this.winnerCells[0].pos.y * width,\r\n                    offsetX + this.size / dimension / 2 + this.winnerCells[2].pos.x * width,\r\n                    offsetY + this.size / dimension / 2 + this.winnerCells[2].pos.y * width\r\n                );\r\n            }\r\n\r\n            // show valid cells\r\n            if (this.status !== undefined) continue;\r\n            if (\r\n                cell.owner === undefined &&\r\n                mouseX > startX &&\r\n                mouseX < startX + this.size / dimension &&\r\n                mouseY > startY &&\r\n                mouseY < startY + this.size / dimension\r\n            ) {\r\n                this.p5.cursor(this.p5.HAND);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/**--------------------------------- */\r\n// functions\r\n\r\nfunction buildCells(p5: P5): TTicTacToeCell[] {\r\n    const dimension = SIZE;\r\n    const cells: TTicTacToeCell[] = [];\r\n    for (let i = 0; i < dimension * dimension; i++) {\r\n        cells.push({\r\n            pos: p5.createVector(i % dimension, Math.floor(i / dimension)),\r\n            owner: undefined\r\n        });\r\n    }\r\n    return cells;\r\n}\r\n\r\nfunction areCellsEqual(cell0: TTicTacToeCell, cell1: TTicTacToeCell, cell2: TTicTacToeCell): boolean {\r\n    return cell0.owner === cell1.owner && cell0.owner === cell2.owner;\r\n}\r\n\r\nfunction getPoints(val: number | undefined, depth: number) {\r\n    depth++;\r\n    return val === undefined ? 0 : val === 0 ? -10 / depth : 10 / depth;\r\n}\r\n\r\nfunction printCells(cells: TTicTacToeCell[] = []) {\r\n    let text = '';\r\n    for (let i = 0; i < SIZE; i++) {\r\n        for (let j = 0; j < SIZE; j++) {\r\n            const index = i * SIZE + j;\r\n            text += `${cells[index].owner === undefined ? '   ' : cells[index].owner === Gamer.AI ? ' O ' : ' X '}`;\r\n        }\r\n        text += '\\n';\r\n    }\r\n    return text;\r\n}\r\n\r\nexport default TicTacToe;\r\n"],"names":["$e281af5c1f85aa33$var$board","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$28770b279d7ab5b1$export$bfd2dc5313efa3a3","$28770b279d7ab5b1$export$4008efb11b076cd5","MOUSE_BTN","Gamer","$28770b279d7ab5b1$export$73820bb3da69f923","$28770b279d7ab5b1$export$1ea8cd15d9ca5dee","r","top","right","bottom","left","$e93rA","$7Pz0b","$fK5g3","$1e29e90231e3e602$var$turns","$1e29e90231e3e602$var$buildCells","p5","cells","i","dimension","push","pos","createVector","Math","floor","owner","undefined","$1e29e90231e3e602$var$areCellsEqual","cell0","cell1","cell2","$1e29e90231e3e602$var$getPoints","val","depth","$1e29e90231e3e602$export$2e2bcd8739ae039","constructor","_config","config","showHelpers","size","status","currentTurn","PLAYER","winnerCells","onResolve","canvas","addEventListener","onClick","bind","AI","index","calculateBestMove","setValues","key","value","event","width","innerWidth","innerHeight","window","offsetX","offsetY","clientX","clientY","cell","startX","x","startY","y","console","log","game","checkGameStatus","winner","filledCells","bestScore","Infinity","move","alpha","beta","$1e29e90231e3e602$var$SIZE","score","minimax","isMaximizing","next","points","$1e29e90231e3e602$var$printCells","text","j","toFixed","max","min","victoryCells","resetGame","update","deltaTime","draw","cursor","ARROW","mouseX","mouseY","strokeWeight","stroke","fill","rectMode","CORNER","rect","textAlign","LEFT","TOP","textSize","CENTER","line","HAND","$e281af5c1f85aa33$var$scoreContainer","document","getElementById","$e281af5c1f85aa33$var$statusContainer","$e281af5c1f85aa33$var$resetBtn","a","__esModule","default","options","gui","GUI","autoPlace","style","display","innerText","domElement","appendChild","add","onChange","setup","createCanvas","parent","background","pixelDensity","colorMode","HSB","resizeDisplay","resizeCanvas","preventDefault"],"version":3,"file":"tic-tac-toe.8b7f2189.js.map"}