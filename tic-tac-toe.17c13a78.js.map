{"mappings":"IESI,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,M,E,EDCQ,EAKA,E,E,E,O,C,sB,I,G,E,E,O,C,oB,I,G,E,E,O,C,Y,I,G,E,E,O,C,Q,I,GAZL,IAAM,EAAsB,CAAE,EAAG,CAAE,EAC7B,EAA4B,CACrC,IAAK,CAAA,EACL,MAAO,CAAA,EACP,OAAQ,CAAA,EACR,KAAM,CAAA,CACV,C,EACY,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,I,C,E,C,O,C,C,E,M,C,E,C,S,C,C,E,K,C,E,C,Q,CAKA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,M,C,E,C,S,C,C,E,E,C,E,C,I,G,I,E,E,S,E,E,S,E,E,SEkNZ,SAAS,EAAW,CAAM,EAEtB,IAAM,EAA0B,EAAE,CAClC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAa,IAC7B,EAAM,IAAI,CAAC,CACP,IAAK,EAAG,YAAY,CAAC,EAJhB,EAI0B,KAAK,KAAK,CAAC,EAJrC,IAKL,MAAO,KAAA,CACX,GAEJ,OAAO,CACX,CAEA,IAAA,EA9NA,MAUI,YAAY,CAAM,CAAE,CAA6B,CAAE,CAC/C,IAAM,EAAqB,CACvB,YAAa,CAAA,EACb,MAAO,EAAW,GAClB,KAAM,IACN,OAAQ,KAAA,EACR,YAAa,AAAA,EAAA,KAAI,CAAE,MAAM,CACzB,YAAa,EAAE,CACf,GAAG,CAAO,AACd,CACA,CAAA,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,WAAW,CAAG,EAAO,WAAW,CACrC,IAAI,CAAC,KAAK,CAAG,EAAO,KAAK,CACzB,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,CACvB,IAAI,CAAC,MAAM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","sources":["<anon>","src/utils/utils.ts","src/scripts/tictactoe-game.ts","src/libs/tictactoe.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirebf15\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirebf15\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fK5g3\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultEntityConfig\", () => $28770b279d7ab5b1$export$73820bb3da69f923);\n$parcel$export(module.exports, \"defaultEdgeConfig\", () => $28770b279d7ab5b1$export$1ea8cd15d9ca5dee);\n$parcel$export(module.exports, \"MOUSE_BTN\", () => $28770b279d7ab5b1$export$bfd2dc5313efa3a3);\n$parcel$export(module.exports, \"Gamer\", () => $28770b279d7ab5b1$export$4008efb11b076cd5);\nconst $28770b279d7ab5b1$export$73820bb3da69f923 = {\n    r: 5\n};\nconst $28770b279d7ab5b1$export$1ea8cd15d9ca5dee = {\n    top: true,\n    right: true,\n    bottom: true,\n    left: true\n};\nvar $28770b279d7ab5b1$export$bfd2dc5313efa3a3;\n(function(MOUSE_BTN) {\n    MOUSE_BTN[MOUSE_BTN[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BTN[MOUSE_BTN[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BTN[MOUSE_BTN[\"RIGHT\"] = 2] = \"RIGHT\";\n})($28770b279d7ab5b1$export$bfd2dc5313efa3a3 || ($28770b279d7ab5b1$export$bfd2dc5313efa3a3 = {}));\nvar $28770b279d7ab5b1$export$4008efb11b076cd5;\n(function(Gamer) {\n    Gamer[Gamer[\"PLAYER\"] = 0] = \"PLAYER\";\n    Gamer[Gamer[\"AI\"] = 1] = \"AI\";\n})($28770b279d7ab5b1$export$4008efb11b076cd5 || ($28770b279d7ab5b1$export$4008efb11b076cd5 = {}));\n\n});\n\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\nclass $1e29e90231e3e602$var$TicTacToe {\n    constructor(p5, _config){\n        const config = {\n            showHelpers: false,\n            cells: $1e29e90231e3e602$var$buildCells(p5),\n            size: 300,\n            status: undefined,\n            currentTurn: (0, $fK5g3.Gamer).PLAYER,\n            winnerCells: [],\n            ..._config\n        };\n        this.p5 = p5;\n        this.showHelpers = config.showHelpers;\n        this.cells = config.cells;\n        this.size = config.size;\n        this.status = config.status;\n        this.currentTurn = config.currentTurn;\n        winnerCells: config.winnerCells;\n        this.onResolve = config.onResolve;\n        this.p5.canvas.addEventListener(\"click\", this.onClick.bind(this));\n    }\n    setValues(key, value) {\n        switch(key){\n            case \"size\":\n                this.size = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n    }\n    onClick(event) {\n        if (this.status !== undefined) return;\n        const width = this.size / 3;\n        const { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        const offsetX = (innerWidth - this.size) / 2;\n        const offsetY = (innerHeight - this.size) / 2;\n        const size = 3;\n        const { clientX: clientX, clientY: clientY } = event;\n        for (const cell of this.cells){\n            const startX = offsetX + cell.pos.x * width;\n            const startY = offsetY + cell.pos.y * width;\n            if (cell.owner === undefined && clientX > startX && clientX < startX + this.size / size && clientY > startY && clientY < startY + this.size / size) {\n                cell.owner = this.currentTurn;\n                this.currentTurn = this.currentTurn === (0, $fK5g3.Gamer).AI ? (0, $fK5g3.Gamer).PLAYER : (0, $fK5g3.Gamer).AI;\n            }\n        }\n        const game = this.checkGameStatus();\n        this.status = game.status;\n        this.winnerCells = game.cells;\n        if (game.filledCells === 0 || game.status !== undefined) this.onResolve && this.onResolve(game);\n    }\n    checkGameStatus() {\n        let filledCells = 0;\n        let status;\n        let cells = [];\n        // cheack filled cells\n        for (const cell of this.cells)if (cell.owner === undefined) ++filledCells;\n        // check for win\n        const size = 3;\n        for(let i = 0; i < size; i++){\n            if (this.cells[i].owner !== undefined && this.cells[i].owner === this.cells[i + size].owner && this.cells[i].owner === this.cells[i + 2 * size].owner) {\n                status = this.cells[i].owner;\n                cells = [\n                    this.cells[i],\n                    this.cells[i + size],\n                    this.cells[i + 2 * size]\n                ];\n                break;\n            }\n            if (this.cells[i * size].owner !== undefined && this.cells[i * size].owner === this.cells[1 + i * size].owner && this.cells[i * size].owner === this.cells[2 + i * size].owner) {\n                status = this.cells[i * size].owner;\n                cells = [\n                    this.cells[i * size],\n                    this.cells[1 + i * size],\n                    this.cells[2 + i * size]\n                ];\n                break;\n            }\n        }\n        if (this.cells[0].owner !== undefined && this.cells[0].owner === this.cells[4].owner && this.cells[0].owner === this.cells[8].owner) {\n            status = this.cells[0].owner;\n            cells = [\n                this.cells[0],\n                this.cells[4],\n                this.cells[8]\n            ];\n        }\n        if (this.cells[2].owner !== undefined && this.cells[2].owner === this.cells[4].owner && this.cells[2].owner === this.cells[6].owner) {\n            status = this.cells[2].owner;\n            cells = [\n                this.cells[2],\n                this.cells[4],\n                this.cells[6]\n            ];\n        }\n        if (filledCells === 0 && status === undefined) status = \"draw\";\n        return {\n            filledCells: filledCells,\n            status: status,\n            cells: cells\n        };\n    }\n    resetGame(currentTurn = (0, $fK5g3.Gamer).PLAYER) {\n        this.cells = $1e29e90231e3e602$var$buildCells(this.p5);\n        this.currentTurn = currentTurn;\n        this.status = undefined;\n        this.winnerCells = [];\n    }\n    update(deltaTime) {\n        return this;\n    }\n    draw() {\n        this.p5.cursor(this.p5.ARROW);\n        const width = this.size / 3;\n        const { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        const offsetX = (innerWidth - this.size) / 2;\n        const offsetY = (innerHeight - this.size) / 2;\n        const size = 3;\n        const { mouseX: mouseX, mouseY: mouseY } = this.p5;\n        for (const cell of this.cells){\n            const startX = offsetX + cell.pos.x * width;\n            const startY = offsetY + cell.pos.y * width;\n            //draw the cells\n            this.p5.strokeWeight(1);\n            this.p5.stroke(255);\n            this.p5.fill(40, 50, 10);\n            this.p5.rectMode(this.p5.CORNER);\n            this.p5.rect(startX, startY, width, width);\n            if (cell.owner !== undefined) {\n                this.p5.strokeWeight(0);\n                this.p5.fill(255);\n                this.p5.textAlign(this.p5.CENTER, this.p5.CENTER);\n                this.p5.textSize(this.size / size);\n                const text = cell.owner === (0, $fK5g3.Gamer).PLAYER ? \"X\" : \"O\";\n                this.p5.text(text, startX + this.size / size / 2, startY + this.size / size / 2);\n            }\n            // draw winner cells\n            if (this.status === (0, $fK5g3.Gamer).AI || this.status === (0, $fK5g3.Gamer).PLAYER) {\n                this.p5.strokeWeight(10);\n                this.p5.stroke(0, 100, 100);\n                this.p5.line(offsetX + this.size / size / 2 + this.winnerCells[0].pos.x * width, offsetY + this.size / size / 2 + this.winnerCells[0].pos.y * width, offsetX + this.size / size / 2 + this.winnerCells[2].pos.x * width, offsetY + this.size / size / 2 + this.winnerCells[2].pos.y * width);\n            }\n            // show valid cells\n            if (this.status !== undefined) continue;\n            if (cell.owner === undefined && mouseX > startX && mouseX < startX + this.size / size && mouseY > startY && mouseY < startY + this.size / size) this.p5.cursor(this.p5.HAND);\n        }\n        return this;\n    }\n}\n/**--------------------------------- */ // functions\nfunction $1e29e90231e3e602$var$buildCells(p5) {\n    const size = 3;\n    const cells = [];\n    for(let i = 0; i < size * size; i++)cells.push({\n        pos: p5.createVector(i % size, Math.floor(i / size)),\n        owner: undefined\n    });\n    return cells;\n}\nvar $1e29e90231e3e602$export$2e2bcd8739ae039 = $1e29e90231e3e602$var$TicTacToe;\n\n\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\n/**--------------------------------- */ // variables & types\nconst $e281af5c1f85aa33$var$scoreContainer = document.getElementById(\"score-card\");\nconst $e281af5c1f85aa33$var$statusContainer = document.getElementById(\"status\");\nlet $e281af5c1f85aa33$var$board;\n/**--------------------------------- */ // sketch\nconst $e281af5c1f85aa33$var$sketch = (p5)=>{\n    const options = {\n        showHelpers: true,\n        size: 400\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"showHelpers\");\n    gui.add(options, \"size\", 200, 500, 10).onChange((val)=>{\n        $e281af5c1f85aa33$var$board.setValues(\"size\", val);\n        if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.top = `${(window.innerHeight + val) / 2 + 30}px`;\n    });\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        // setup markup\n        if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.top = `${(window.innerHeight + options.size) / 2 + 30}px`;\n        $e281af5c1f85aa33$var$scoreContainer?.addEventListener(\"submit\", (event)=>{\n            event.preventDefault();\n            $e281af5c1f85aa33$var$scoreContainer.style.display = \"none\";\n            $e281af5c1f85aa33$var$board.resetGame();\n        });\n        init(p5);\n        // p5.noLoop();\n        // setup the board\n        $e281af5c1f85aa33$var$board = new (0, $1e29e90231e3e602$export$2e2bcd8739ae039)(p5, {\n            showHelpers: options.showHelpers,\n            size: options.size,\n            onResolve: onResolve\n        });\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        $e281af5c1f85aa33$var$board.update(p5.deltaTime).draw();\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n    }\n    function onResolve(game) {\n        let text = \"\";\n        switch(game.status){\n            case (0, $fK5g3.Gamer).PLAYER:\n                text = \"Player 'X' Wins!!\";\n                break;\n            case (0, $fK5g3.Gamer).AI:\n                text = \"Player 'O' Wins!!\";\n                break;\n            case \"draw\":\n                text = \"Game is a Draw\";\n                break;\n            default:\n                text = \"Hey there!!\";\n                break;\n        }\n        if ($e281af5c1f85aa33$var$scoreContainer) $e281af5c1f85aa33$var$scoreContainer.style.display = \"flex\";\n        if ($e281af5c1f85aa33$var$statusContainer) $e281af5c1f85aa33$var$statusContainer.innerText = text;\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($e281af5c1f85aa33$var$sketch);\n\n\n//# sourceMappingURL=tic-tac-toe.17c13a78.js.map\n","import p5 from 'p5';\r\nimport { TEdges } from './types';\r\n\r\nexport const defaultEntityConfig = { r: 5 };\r\nexport const defaultEdgeConfig: TEdges = {\r\n    top: true,\r\n    right: true,\r\n    bottom: true,\r\n    left: true\r\n};\r\nexport enum MOUSE_BTN {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\nexport enum Gamer {\r\n    PLAYER,\r\n    AI\r\n}\r\nexport type TTicTacToeCell = {\r\n    pos: p5.Vector;\r\n    owner: Gamer | undefined;\r\n};\r\nexport type TGameStatus = {\r\n    filledCells: number;\r\n    status: Gamer | undefined | 'draw';\r\n    cells: TTicTacToeCell[];\r\n};\r\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport TicTacToe from 'src/libs/tictactoe';\r\nimport { Gamer, TGameStatus } from 'src/utils/utils';\r\n\r\n/**--------------------------------- */\r\n// variables & types\r\nconst scoreContainer = document.getElementById('score-card');\r\nconst statusContainer = document.getElementById('status');\r\nlet board: TicTacToe;\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        showHelpers: true,\r\n        size: 400\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'showHelpers');\r\n    gui.add(options, 'size', 200, 500, 10).onChange((val) => {\r\n        board.setValues('size', val);\r\n        if (scoreContainer) scoreContainer.style.top = `${(window.innerHeight + val) / 2 + 30}px`;\r\n    });\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n        // setup markup\r\n        if (scoreContainer) scoreContainer.style.top = `${(window.innerHeight + options.size) / 2 + 30}px`;\r\n        scoreContainer?.addEventListener('submit', (event: FormDataEvent) => {\r\n            event.preventDefault();\r\n            scoreContainer.style.display = 'none';\r\n            board.resetGame();\r\n        });\r\n        init(p5);\r\n        // p5.noLoop();\r\n\r\n        // setup the board\r\n        board = new TicTacToe(p5, { showHelpers: options.showHelpers, size: options.size, onResolve: onResolve });\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n\r\n        board.update(p5.deltaTime).draw();\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n    }\r\n\r\n    function onResolve(game: TGameStatus) {\r\n        let text = '';\r\n\r\n        switch (game.status) {\r\n            case Gamer.PLAYER:\r\n                text = \"Player 'X' Wins!!\";\r\n                break;\r\n            case Gamer.AI:\r\n                text = \"Player 'O' Wins!!\";\r\n                break;\r\n            case 'draw':\r\n                text = 'Game is a Draw';\r\n                break;\r\n            default:\r\n                text = 'Hey there!!';\r\n                break;\r\n        }\r\n        if (scoreContainer) scoreContainer.style.display = 'flex';\r\n        if (statusContainer) statusContainer.innerText = text;\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import P5 from 'p5';\r\nimport { Gamer, TGameStatus, TTicTacToeCell } from 'src/utils/utils';\r\n\r\ntype TTicTacToe = {\r\n    showHelpers: boolean;\r\n    cells: TTicTacToeCell[];\r\n    size: number;\r\n    currentTurn: Gamer;\r\n    status: Gamer | undefined | 'draw';\r\n    winnerCells: TTicTacToeCell[];\r\n    onResolve?: (status: TGameStatus) => void;\r\n};\r\n\r\ntype Keys = 'size';\r\n\r\nclass TicTacToe {\r\n    p5: P5;\r\n    cells: TTicTacToeCell[];\r\n    showHelpers: boolean;\r\n    size: number;\r\n    status: TTicTacToe['status'];\r\n    currentTurn: Gamer;\r\n    winnerCells: TTicTacToeCell[];\r\n    onResolve?: (status: TGameStatus) => void;\r\n\r\n    constructor(p5: P5, _config?: Partial<TTicTacToe>) {\r\n        const config: TTicTacToe = {\r\n            showHelpers: false,\r\n            cells: buildCells(p5),\r\n            size: 300,\r\n            status: undefined,\r\n            currentTurn: Gamer.PLAYER,\r\n            winnerCells: [],\r\n            ..._config\r\n        };\r\n        this.p5 = p5;\r\n        this.showHelpers = config.showHelpers;\r\n        this.cells = config.cells;\r\n        this.size = config.size;\r\n        this.status = config.status;\r\n        this.currentTurn = config.currentTurn;\r\n        winnerCells: config.winnerCells;\r\n        this.onResolve = config.onResolve;\r\n\r\n        this.p5.canvas.addEventListener('click', this.onClick.bind(this));\r\n    }\r\n\r\n    setValues(key: Keys, value: number) {\r\n        switch (key) {\r\n            case 'size':\r\n                this.size = value;\r\n                break;\r\n\r\n            default:\r\n                throw 'Unsupported key passed to setValues()';\r\n        }\r\n    }\r\n\r\n    onClick(event: MouseEvent) {\r\n        if (this.status !== undefined) return;\r\n\r\n        const width = this.size / 3;\r\n        const { innerWidth, innerHeight } = window;\r\n        const offsetX = (innerWidth - this.size) / 2;\r\n        const offsetY = (innerHeight - this.size) / 2;\r\n        const size = 3;\r\n        const { clientX, clientY } = event;\r\n\r\n        for (const cell of this.cells) {\r\n            const startX = offsetX + cell.pos.x * width;\r\n            const startY = offsetY + cell.pos.y * width;\r\n\r\n            if (\r\n                cell.owner === undefined &&\r\n                clientX > startX &&\r\n                clientX < startX + this.size / size &&\r\n                clientY > startY &&\r\n                clientY < startY + this.size / size\r\n            ) {\r\n                cell.owner = this.currentTurn;\r\n                this.currentTurn = this.currentTurn === Gamer.AI ? Gamer.PLAYER : Gamer.AI;\r\n            }\r\n        }\r\n\r\n        const game = this.checkGameStatus();\r\n        this.status = game.status;\r\n        this.winnerCells = game.cells;\r\n\r\n        if (game.filledCells === 0 || game.status !== undefined) {\r\n            this.onResolve && this.onResolve(game);\r\n        }\r\n    }\r\n\r\n    checkGameStatus(): TGameStatus {\r\n        let filledCells = 0;\r\n        let status: TGameStatus['status'];\r\n        let cells: TTicTacToeCell[] = [];\r\n\r\n        // cheack filled cells\r\n        for (const cell of this.cells) {\r\n            if (cell.owner === undefined) ++filledCells;\r\n        }\r\n\r\n        // check for win\r\n        const size = 3;\r\n        for (let i = 0; i < size; i++) {\r\n            if (\r\n                this.cells[i].owner !== undefined &&\r\n                this.cells[i].owner === this.cells[i + size].owner &&\r\n                this.cells[i].owner === this.cells[i + 2 * size].owner\r\n            ) {\r\n                status = this.cells[i].owner;\r\n                cells = [this.cells[i], this.cells[i + size], this.cells[i + 2 * size]];\r\n                break;\r\n            }\r\n            if (\r\n                this.cells[i * size].owner !== undefined &&\r\n                this.cells[i * size].owner === this.cells[1 + i * size].owner &&\r\n                this.cells[i * size].owner === this.cells[2 + i * size].owner\r\n            ) {\r\n                status = this.cells[i * size].owner;\r\n                cells = [this.cells[i * size], this.cells[1 + i * size], this.cells[2 + i * size]];\r\n                break;\r\n            }\r\n        }\r\n        if (\r\n            this.cells[0].owner !== undefined &&\r\n            this.cells[0].owner === this.cells[4].owner &&\r\n            this.cells[0].owner === this.cells[8].owner\r\n        ) {\r\n            status = this.cells[0].owner;\r\n            cells = [this.cells[0], this.cells[4], this.cells[8]];\r\n        }\r\n        if (\r\n            this.cells[2].owner !== undefined &&\r\n            this.cells[2].owner === this.cells[4].owner &&\r\n            this.cells[2].owner === this.cells[6].owner\r\n        ) {\r\n            status = this.cells[2].owner;\r\n            cells = [this.cells[2], this.cells[4], this.cells[6]];\r\n        }\r\n\r\n        if (filledCells === 0 && status === undefined) {\r\n            status = 'draw';\r\n        }\r\n\r\n        return {\r\n            filledCells,\r\n            status,\r\n            cells\r\n        };\r\n    }\r\n\r\n    resetGame(currentTurn: Gamer = Gamer.PLAYER) {\r\n        this.cells = buildCells(this.p5);\r\n        this.currentTurn = currentTurn;\r\n        this.status = undefined;\r\n        this.winnerCells = [];\r\n    }\r\n\r\n    update(deltaTime: number): this {\r\n        return this;\r\n    }\r\n\r\n    draw(): this {\r\n        this.p5.cursor(this.p5.ARROW);\r\n        const width = this.size / 3;\r\n        const { innerWidth, innerHeight } = window;\r\n        const offsetX = (innerWidth - this.size) / 2;\r\n        const offsetY = (innerHeight - this.size) / 2;\r\n        const size = 3;\r\n        const { mouseX, mouseY } = this.p5;\r\n\r\n        for (const cell of this.cells) {\r\n            const startX = offsetX + cell.pos.x * width;\r\n            const startY = offsetY + cell.pos.y * width;\r\n\r\n            //draw the cells\r\n            this.p5.strokeWeight(1);\r\n            this.p5.stroke(255);\r\n            this.p5.fill(40, 50, 10);\r\n            this.p5.rectMode(this.p5.CORNER);\r\n            this.p5.rect(startX, startY, width, width);\r\n\r\n            if (cell.owner !== undefined) {\r\n                this.p5.strokeWeight(0);\r\n                this.p5.fill(255);\r\n                this.p5.textAlign(this.p5.CENTER, this.p5.CENTER);\r\n                this.p5.textSize(this.size / size);\r\n                const text = cell.owner === Gamer.PLAYER ? 'X' : 'O';\r\n                this.p5.text(text, startX + this.size / size / 2, startY + this.size / size / 2);\r\n            }\r\n\r\n            // draw winner cells\r\n            if (this.status === Gamer.AI || this.status === Gamer.PLAYER) {\r\n                this.p5.strokeWeight(10);\r\n                this.p5.stroke(0, 100, 100);\r\n\r\n                this.p5.line(\r\n                    offsetX + this.size / size / 2 + this.winnerCells[0].pos.x * width,\r\n                    offsetY + this.size / size / 2 + this.winnerCells[0].pos.y * width,\r\n                    offsetX + this.size / size / 2 + this.winnerCells[2].pos.x * width,\r\n                    offsetY + this.size / size / 2 + this.winnerCells[2].pos.y * width\r\n                );\r\n            }\r\n\r\n            // show valid cells\r\n            if (this.status !== undefined) continue;\r\n            if (\r\n                cell.owner === undefined &&\r\n                mouseX > startX &&\r\n                mouseX < startX + this.size / size &&\r\n                mouseY > startY &&\r\n                mouseY < startY + this.size / size\r\n            ) {\r\n                this.p5.cursor(this.p5.HAND);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/**--------------------------------- */\r\n// functions\r\n\r\nfunction buildCells(p5: P5): TTicTacToeCell[] {\r\n    const size = 3;\r\n    const cells: TTicTacToeCell[] = [];\r\n    for (let i = 0; i < size * size; i++) {\r\n        cells.push({\r\n            pos: p5.createVector(i % size, Math.floor(i / size)),\r\n            owner: undefined\r\n        });\r\n    }\r\n    return cells;\r\n}\r\n\r\nexport default TicTacToe;\r\n"],"names":["$e281af5c1f85aa33$var$board","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$28770b279d7ab5b1$export$bfd2dc5313efa3a3","$28770b279d7ab5b1$export$4008efb11b076cd5","MOUSE_BTN","Gamer","$28770b279d7ab5b1$export$73820bb3da69f923","$28770b279d7ab5b1$export$1ea8cd15d9ca5dee","r","top","right","bottom","left","$e93rA","$7Pz0b","$fK5g3","$1e29e90231e3e602$var$buildCells","p5","cells","i","size","push","pos","createVector","Math","floor","owner","undefined","$1e29e90231e3e602$export$2e2bcd8739ae039","constructor","_config","config","showHelpers","status","currentTurn","PLAYER","winnerCells","onResolve","canvas","addEventListener","onClick","bind","setValues","key","value","event","width","innerWidth","innerHeight","window","offsetX","offsetY","clientX","clientY","cell","startX","x","startY","y","AI","game","checkGameStatus","filledCells","resetGame","update","deltaTime","draw","cursor","ARROW","mouseX","mouseY","strokeWeight","stroke","fill","rectMode","CORNER","rect","textAlign","CENTER","textSize","text","line","HAND","$e281af5c1f85aa33$var$scoreContainer","document","getElementById","$e281af5c1f85aa33$var$statusContainer","a","__esModule","default","options","gui","GUI","autoPlace","style","display","innerText","domElement","appendChild","add","onChange","val","setup","createCanvas","parent","background","pixelDensity","colorMode","HSB","resizeDisplay","resizeCanvas","preventDefault"],"version":3,"file":"tic-tac-toe.17c13a78.js.map"}