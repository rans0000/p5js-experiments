{"mappings":"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","sources":["<anon>","src/scripts/l-system.ts","src/libs/fractal-tree.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nclass $0686233491851b9c$var$FractalTree {\n    constructor(p5, _config){\n        const config = {\n            initialVocab: \"S\",\n            branchLength: 20,\n            branchLengthDelta: 5,\n            branchAngle: Math.PI / 4,\n            branchAngleDelta: Math.PI / 12,\n            leafRadius: 3,\n            iterations: 7,\n            showHelpers: false,\n            ..._config\n        };\n        this.p5 = p5;\n        this.initialVocab = config.initialVocab;\n        this.branchLength = config.branchLength;\n        this.branchLengthDelta = config.branchLengthDelta;\n        this.branchAngle = config.branchAngle;\n        this.branchAngleDelta = config.branchAngleDelta;\n        this.leafRadius = config.leafRadius;\n        this.iterations = config.iterations;\n        this.showHelpers = config.showHelpers;\n        this.vocab = this.generateVocab();\n    }\n    generateVocab(iterations) {\n        let str = \"\";\n        this.iterations = iterations || this.iterations;\n        let vocab = this.initialVocab;\n        for(let i = 0; i < this.iterations; i++){\n            str = \"\";\n            const chance = Math.random();\n            for (const letter of vocab)switch(letter){\n                case \"S\":\n                    str += \"FB\";\n                    break;\n                case \"F\":\n                    str += chance > 0.5 ? \"FF\" : \"F\";\n                    break;\n                case \"B\":\n                    // str += chance < 0.25 ? '[llFB][rFB]' : chance < 0.5 ? '[lFB][rrFB]' : '[lFB][rFB]';\n                    str += this.generateBranchVocab(chance);\n                    break;\n                default:\n                    str += letter;\n                    break;\n            }\n            vocab = str;\n        }\n        return this.vocab = vocab;\n    }\n    generateBranchVocab(chance) {\n        if (chance < 0.05) return \"[lFB]\";\n        if (chance < 0.1) return \"[rFB]\";\n        if (chance < 0.3) return \"[llFB][rFB]\";\n        if (chance < 0.5) return \"[lFB][rrFB]\";\n        return \"[lFB][rFB]\";\n    }\n    setValues(key, value) {\n        if (typeof value === \"number\") {\n            key;\n            throw \"Unsupported key passed to setValues()\";\n        }\n        if (typeof value === \"boolean\") switch(key){\n            case \"showHelpers\":\n                this.showHelpers = value;\n                break;\n            default:\n                throw \"Unsupported key passed to setValues()\";\n        }\n    }\n    update(_deltaTime) {\n        return this;\n    }\n    draw() {\n        for (const letter of this.vocab)switch(letter){\n            case \"F\":\n                this.p5.stroke(255);\n                this.p5.strokeWeight(2);\n                this.p5.line(0, 0, 0, -this.branchLength);\n                this.p5.translate(0, -this.branchLength);\n                break;\n            case \"B\":\n                this.p5.stroke(255);\n                this.p5.strokeWeight(2);\n                this.p5.circle(0, 0, this.leafRadius);\n                break;\n            case \"l\":\n                this.p5.rotate(-this.branchAngle);\n                break;\n            case \"r\":\n                this.p5.rotate(this.branchAngle);\n                break;\n            case \"[\":\n                this.p5.push();\n                break;\n            case \"]\":\n                this.p5.pop();\n                break;\n            default:\n                break;\n        }\n        return this;\n    }\n}\nvar /**--------------------------------- */ // functions\n$0686233491851b9c$export$2e2bcd8739ae039 = $0686233491851b9c$var$FractalTree;\n\n\n/**--------------------------------- */ let $9fe6ab0a3eadfc95$var$tree;\n/**--------------------------------- */ // sketch\nconst $9fe6ab0a3eadfc95$var$sketch = (p5)=>{\n    const options = {\n        generate: ()=>init(p5),\n        animate: true,\n        iterations: 7,\n        leafRadius: 5,\n        branchLength: 15,\n        branchLengthDelta: 5,\n        branchAngle: Math.PI / 12,\n        branchAngleDelta: Math.PI / 6\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"generate\").name(\"Generate tree\").onChange(()=>{});\n    gui.add(options, \"animate\").name(\"Animate\").onChange((val)=>val ? p5.loop() : p5.noLoop());\n    gui.add(options, \"iterations\", 1, 12, 1).onChange(()=>init(p5));\n    gui.add(options, \"leafRadius\", 1, 8, 1).onChange(()=>init(p5));\n    gui.add(options, \"branchLength\", 1, 20, 1).onChange(()=>init(p5));\n    gui.add(options, \"branchLengthDelta\", 0, 10, 0.1).onChange(()=>init(p5));\n    gui.add(options, \"branchAngle\", 0, Math.PI / 4, 0.01).onChange(()=>init(p5));\n    gui.add(options, \"branchAngleDelta\", 0, Math.PI / 12, 0.01).onChange(()=>init(p5));\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        p5.frameRate(1);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        //\n        init(p5);\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        p5.translate(window.innerWidth / 2, window.innerHeight - 100);\n        $9fe6ab0a3eadfc95$var$tree.generateVocab();\n        $9fe6ab0a3eadfc95$var$tree.update(p5.deltaTime).draw();\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n        $9fe6ab0a3eadfc95$var$tree = new (0, $0686233491851b9c$export$2e2bcd8739ae039)(p5, {\n            iterations: options.iterations,\n            leafRadius: options.leafRadius,\n            branchLength: options.branchLength,\n            branchLengthDelta: options.branchLengthDelta,\n            branchAngle: options.branchAngle,\n            branchAngleDelta: options.branchAngleDelta\n        });\n        p5.redraw();\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($9fe6ab0a3eadfc95$var$sketch);\n\n\n//# sourceMappingURL=l-systems.60dbb5b4.js.map\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport FractalTree from 'src/libs/fractal-tree';\r\n\r\n/**--------------------------------- */\r\nlet tree: FractalTree;\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        generate: () => init(p5),\r\n        animate: true,\r\n        iterations: 7,\r\n        leafRadius: 5,\r\n        branchLength: 15,\r\n        branchLengthDelta: 5,\r\n        branchAngle: Math.PI / 12,\r\n        branchAngleDelta: Math.PI / 6\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'generate')\r\n        .name('Generate tree')\r\n        .onChange(() => {});\r\n    gui.add(options, 'animate')\r\n        .name('Animate')\r\n        .onChange((val) => (val ? p5.loop() : p5.noLoop()));\r\n    gui.add(options, 'iterations', 1, 12, 1).onChange(() => init(p5));\r\n    gui.add(options, 'leafRadius', 1, 8, 1).onChange(() => init(p5));\r\n    gui.add(options, 'branchLength', 1, 20, 1).onChange(() => init(p5));\r\n    gui.add(options, 'branchLengthDelta', 0, 10, 0.1).onChange(() => init(p5));\r\n    gui.add(options, 'branchAngle', 0, Math.PI / 4, 0.01).onChange(() => init(p5));\r\n    gui.add(options, 'branchAngleDelta', 0, Math.PI / 12, 0.01).onChange(() => init(p5));\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        p5.frameRate(1);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n\r\n        //\r\n        init(p5);\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n        p5.translate(window.innerWidth / 2, window.innerHeight - 100);\r\n        tree.generateVocab();\r\n        tree.update(p5.deltaTime).draw();\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n        tree = new FractalTree(p5, {\r\n            iterations: options.iterations,\r\n            leafRadius: options.leafRadius,\r\n            branchLength: options.branchLength,\r\n            branchLengthDelta: options.branchLengthDelta,\r\n            branchAngle: options.branchAngle,\r\n            branchAngleDelta: options.branchAngleDelta\r\n        });\r\n        p5.redraw();\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import P5 from 'p5';\r\n\r\ntype TFractalTree = {\r\n    initialVocab: string;\r\n    vocab: string;\r\n    branchLength: number;\r\n    branchLengthDelta: number;\r\n    branchAngle: number;\r\n    branchAngleDelta: number;\r\n    leafRadius: number;\r\n    iterations: number;\r\n    showHelpers: boolean;\r\n};\r\ntype TFractalTreeConfig = Omit<TFractalTree, 'grammar' | 'vocab'>;\r\n\r\ntype Keys = 'size' | 'showHelpers';\r\n\r\nclass FractalTree {\r\n    p5: P5;\r\n    rule: string;\r\n    initialVocab: string;\r\n    vocab: string;\r\n    branchLength: number;\r\n    branchLengthDelta: number;\r\n    branchAngle: number;\r\n    branchAngleDelta: number;\r\n    leafRadius: number;\r\n    iterations: number;\r\n    showHelpers: boolean;\r\n\r\n    constructor(p5: P5, _config?: Partial<TFractalTreeConfig>) {\r\n        const config: TFractalTreeConfig = {\r\n            initialVocab: 'S',\r\n            branchLength: 20,\r\n            branchLengthDelta: 5,\r\n            branchAngle: Math.PI / 4,\r\n            branchAngleDelta: Math.PI / 12,\r\n            leafRadius: 3,\r\n            iterations: 7,\r\n            showHelpers: false,\r\n            ..._config\r\n        };\r\n        this.p5 = p5;\r\n        this.initialVocab = config.initialVocab;\r\n        this.branchLength = config.branchLength;\r\n        this.branchLengthDelta = config.branchLengthDelta;\r\n        this.branchAngle = config.branchAngle;\r\n        this.branchAngleDelta = config.branchAngleDelta;\r\n        this.leafRadius = config.leafRadius;\r\n        this.iterations = config.iterations;\r\n        this.showHelpers = config.showHelpers;\r\n        this.vocab = this.generateVocab();\r\n    }\r\n\r\n    generateVocab(iterations?: number): string {\r\n        let str = '';\r\n        this.iterations = iterations || this.iterations;\r\n        let vocab = this.initialVocab;\r\n\r\n        for (let i = 0; i < this.iterations; i++) {\r\n            str = '';\r\n            const chance = Math.random();\r\n            for (const letter of vocab) {\r\n                switch (letter) {\r\n                    case 'S':\r\n                        str += 'FB';\r\n                        break;\r\n                    case 'F':\r\n                        str += chance > 0.5 ? 'FF' : 'F';\r\n                        break;\r\n                    case 'B':\r\n                        // str += chance < 0.25 ? '[llFB][rFB]' : chance < 0.5 ? '[lFB][rrFB]' : '[lFB][rFB]';\r\n                        str += this.generateBranchVocab(chance);\r\n                        break;\r\n                    default:\r\n                        str += letter;\r\n                        break;\r\n                }\r\n            }\r\n            vocab = str;\r\n        }\r\n\r\n        return (this.vocab = vocab);\r\n    }\r\n\r\n    generateBranchVocab(chance: number): string {\r\n        if (chance < 0.05) return '[lFB]';\r\n        if (chance < 0.1) return '[rFB]';\r\n        if (chance < 0.3) return '[llFB][rFB]';\r\n        if (chance < 0.5) return '[lFB][rrFB]';\r\n        return '[lFB][rFB]';\r\n    }\r\n\r\n    setValues(key: Keys, value: number | boolean) {\r\n        if (typeof value === 'number') {\r\n            switch (key) {\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n        if (typeof value === 'boolean') {\r\n            switch (key) {\r\n                case 'showHelpers':\r\n                    this.showHelpers = value;\r\n                    break;\r\n                default:\r\n                    throw 'Unsupported key passed to setValues()';\r\n            }\r\n        }\r\n    }\r\n\r\n    update(_deltaTime: number): this {\r\n        return this;\r\n    }\r\n\r\n    draw(): this {\r\n        for (const letter of this.vocab) {\r\n            switch (letter) {\r\n                case 'F':\r\n                    this.p5.stroke(255);\r\n                    this.p5.strokeWeight(2);\r\n                    this.p5.line(0, 0, 0, -this.branchLength);\r\n                    this.p5.translate(0, -this.branchLength);\r\n                    break;\r\n                case 'B':\r\n                    this.p5.stroke(255);\r\n                    this.p5.strokeWeight(2);\r\n                    this.p5.circle(0, 0, this.leafRadius);\r\n                    break;\r\n                case 'l':\r\n                    this.p5.rotate(-this.branchAngle);\r\n                    break;\r\n                case 'r':\r\n                    this.p5.rotate(this.branchAngle);\r\n                    break;\r\n                case '[':\r\n                    this.p5.push();\r\n                    break;\r\n                case ']':\r\n                    this.p5.pop();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n\r\n/**--------------------------------- */\r\n// functions\r\n\r\nexport default FractalTree;\r\n"],"names":["$9fe6ab0a3eadfc95$var$tree","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$e93rA","$7Pz0b","$0686233491851b9c$export$2e2bcd8739ae039","constructor","p5","_config","config","initialVocab","branchLength","branchLengthDelta","branchAngle","Math","PI","branchAngleDelta","leafRadius","iterations","showHelpers","vocab","generateVocab","str","i","chance","random","letter","generateBranchVocab","setValues","key","value","update","_deltaTime","draw","stroke","strokeWeight","line","translate","circle","rotate","push","pop","a","__esModule","default","options","generate","animate","gui","GUI","autoPlace","background","redraw","domElement","document","getElementById","appendChild","add","name","onChange","val","loop","noLoop","setup","canvas","createCanvas","window","innerWidth","innerHeight","parent","pixelDensity","colorMode","HSB","frameRate","addEventListener","resizeDisplay","resizeCanvas","deltaTime"],"version":3,"file":"l-systems.60dbb5b4.js.map"}