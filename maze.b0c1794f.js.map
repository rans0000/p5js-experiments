{"mappings":"IEOI,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,M,E,EDGQ,EAKA,E,E,E,O,C,sB,I,G,E,E,O,C,oB,I,G,E,E,O,C,Y,I,G,E,E,O,C,Q,I,GAZL,IAAM,EAAsB,CAAE,EAAG,CAAE,EAC7B,EAA4B,CACrC,IAAK,CAAA,EACL,MAAO,CAAA,EACP,OAAQ,CAAA,EACR,KAAM,CAAA,CACV,C,EACY,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,I,C,E,C,O,C,C,E,M,C,E,C,S,C,C,E,K,C,E,C,Q,CAKA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,M,C,E,C,S,C,C,E,E,C,E,C,I,G,I,E,E,SGbZ,MAAM,EAA4C,SAA+B,CAAW,MAEpF,EACA,EACJ,IAAI,EAAkB,CAAC,AAHT,EAGe,QAAQ,EAAE,CAAC,EAAE,CAAC,AAE3C,CAAA,IAAI,CAAC,KAAK,CAAG,KACT,GAAI,EAAO,MAAM,EAAI,EAAG,MAAO,CAAA,EAG/B,AADA,CAAA,EAAW,EAAO,GAAG,EAArB,EACS,MAAM,CAAC,CAAE,KAAM,UAAW,QAAS,CAAA,CAAK,GACjD,EAAS,MAAM,CAAC,CAAE,KAAM,UAAW,QAAS,CAAA,CAAM,GAElD,IAAM,EAAa,AAZT,EAYe,aAAa,CAAC,GAEvC,GAAI,EAAW,MAAM,CAAG,EAAG,CAEvB,EAAO,IAAI,CAAC,GAEZ,IAAM,EAAO,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EACzD,EAAQ,CAAU,CAAC,EAAK,CAExB,AArBM,EAqBA,WAAW,CAAC,EAAU,GAE5B,EAAM,MAAM,CAAC,CAAE,KAAM,UAAW,QAAS,CAAA,CAAK,GAG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","sources":["<anon>","src/utils/utils.ts","src/scripts/maze-demo.ts","src/libs/maze.ts","src/libs/maze-strategies.ts","src/libs/tile.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fK5g3\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultEntityConfig\", () => $28770b279d7ab5b1$export$73820bb3da69f923);\n$parcel$export(module.exports, \"defaultEdgeConfig\", () => $28770b279d7ab5b1$export$1ea8cd15d9ca5dee);\n$parcel$export(module.exports, \"MOUSE_BTN\", () => $28770b279d7ab5b1$export$bfd2dc5313efa3a3);\n$parcel$export(module.exports, \"Gamer\", () => $28770b279d7ab5b1$export$4008efb11b076cd5);\nconst $28770b279d7ab5b1$export$73820bb3da69f923 = {\n    r: 5\n};\nconst $28770b279d7ab5b1$export$1ea8cd15d9ca5dee = {\n    top: true,\n    right: true,\n    bottom: true,\n    left: true\n};\nvar $28770b279d7ab5b1$export$bfd2dc5313efa3a3;\n(function(MOUSE_BTN) {\n    MOUSE_BTN[MOUSE_BTN[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BTN[MOUSE_BTN[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BTN[MOUSE_BTN[\"RIGHT\"] = 2] = \"RIGHT\";\n})($28770b279d7ab5b1$export$bfd2dc5313efa3a3 || ($28770b279d7ab5b1$export$bfd2dc5313efa3a3 = {}));\nvar $28770b279d7ab5b1$export$4008efb11b076cd5;\n(function(Gamer) {\n    Gamer[Gamer[\"PLAYER\"] = 0] = \"PLAYER\";\n    Gamer[Gamer[\"AI\"] = 1] = \"AI\";\n})($28770b279d7ab5b1$export$4008efb11b076cd5 || ($28770b279d7ab5b1$export$4008efb11b076cd5 = {}));\n\n});\n\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $b24ccf84843e9734$export$8ca58d4878408f45 = function(grid) {\n    const _grid = grid;\n    let _current;\n    let _next;\n    let _stack = [\n        _grid.getTiles()[0]\n    ];\n    this.solve = ()=>{\n        if (_stack.length <= 0) return true;\n        _current = _stack.pop();\n        _current.setter({\n            type: \"VISITED\",\n            payload: true\n        });\n        _current.setter({\n            type: \"CURRENT\",\n            payload: false\n        });\n        const neighbours = _grid.getNeighbours(_current);\n        if (neighbours.length > 0) {\n            // 2.1\n            _stack.push(_current);\n            // 2.2\n            const pick = Math.floor(Math.random() * neighbours.length);\n            _next = neighbours[pick];\n            // 2.3\n            _grid.removeWalls(_current, _next);\n            _next.setter({\n                type: \"CURRENT\",\n                payload: true\n            });\n            // 2.4\n            _stack.push(_next);\n        }\n        return false;\n    };\n    const init = ()=>{};\n    init();\n};\n\n\nconst $7ea30b41bdf6dc0f$var$Tile = function(config) {\n    this.p5 = config.p5;\n    this.id = config.id;\n    const _x = config.x;\n    const _y = config.y;\n    const _gird = config.grid;\n    let _isVisited = false;\n    let _isCurrent = false;\n    let _walls = [\n        true,\n        true,\n        true,\n        true\n    ];\n    this.update = ()=>{\n        return this;\n    };\n    this.draw = ()=>{\n        const dim = _gird.getWidth() / _gird.getSize();\n        drawWalls();\n        return this;\n    };\n    this.getPosition = ()=>{\n        return {\n            _x: _x,\n            _y: _y\n        };\n    };\n    this.setWallStaus = (index, state)=>{\n        _walls[index] = state;\n    };\n    this.getter = (prop)=>{\n        switch(prop){\n            case \"CURRENT\":\n                return _isCurrent;\n            case \"VISITED\":\n                return _isVisited;\n            case \"WALLS\":\n                return _walls;\n            default:\n                break;\n        }\n        throw new Error(`Unknown getter key: ${prop}`);\n    };\n    this.setter = (action)=>{\n        switch(action.type){\n            case \"VISITED\":\n                _isVisited = action.payload;\n                break;\n            case \"CURRENT\":\n                _isCurrent = action.payload;\n                break;\n            default:\n                break;\n        }\n    };\n    const drawWalls = ()=>{\n        const dim = _gird.getWidth() / _gird.getSize();\n        this.p5.push();\n        this.p5.translate(_x * dim, _y * dim);\n        //\n        if (_isVisited) {\n            this.p5.fill(255, 255, 50);\n            this.p5.noStroke();\n            this.p5.rect(0, 0, dim, dim);\n        }\n        if (_isCurrent) {\n            this.p5.fill(128, 255, 50);\n            this.p5.noStroke();\n            this.p5.rect(0, 0, dim, dim);\n        }\n        this.p5.noFill();\n        this.p5.stroke(255);\n        // top wall\n        _walls[0] && this.p5.line(0, 0, dim, 0);\n        // right wall\n        _walls[1] && this.p5.line(dim, 0, dim, dim);\n        // bottom wall\n        _walls[2] && this.p5.line(0, dim, dim, dim);\n        // left wall\n        _walls[3] && this.p5.line(0, 0, 0, dim);\n        // label\n        this.p5.stroke(0);\n        this.p5.fill(128);\n        // this.p5.text(this.id, dim / 2, dim / 2);\n        //\n        this.p5.pop();\n    // console.log(this.id, _walls);\n    };\n};\nvar $7ea30b41bdf6dc0f$export$2e2bcd8739ae039 = $7ea30b41bdf6dc0f$var$Tile;\n\n\nconst $ed8576b4e64763fe$var$Maze = function(config) {\n    this.p5 = config.p5;\n    const _size = config.size;\n    const _width = config.width;\n    const _tiles = [];\n    let _strategy;\n    this.update = (_deltatime)=>{\n        _strategy.solve();\n        return this;\n    };\n    this.draw = ()=>{\n        for(let y = 0; y < _size; y++)for(let x = 0; x < _size; x++)_tiles[x + y * _size].draw();\n        return this;\n    };\n    this.getWidth = ()=>{\n        return _width;\n    };\n    this.getSize = ()=>{\n        return _size;\n    };\n    this.getTiles = ()=>{\n        return _tiles;\n    };\n    const createTiles = ()=>{\n        for(let y = 0; y < _size; y++)for(let x = 0; x < _size; x++)_tiles.push(new (0, $7ea30b41bdf6dc0f$export$2e2bcd8739ae039)({\n            p5: this.p5,\n            id: y * _size + x,\n            x: x,\n            y: y,\n            grid: this\n        }));\n    };\n    this.setStrategy = (solver)=>{\n        solver;\n        _strategy = new (0, $b24ccf84843e9734$export$8ca58d4878408f45)(this);\n    };\n    this.getIndex = (i, j)=>{\n        if (i < 0 || j < 0 || i > _size - 1 || j > _size - 1) return -1;\n        return j * _size + i;\n    };\n    this.getNeighbours = (tile)=>{\n        let neighbours = [];\n        const { _x: x, _y: y } = tile.getPosition();\n        // top\n        const top = this.getTiles()[this.getIndex(x, y - 1)];\n        top && !top.getter(\"VISITED\") && neighbours.push(top);\n        const right = this.getTiles()[this.getIndex(x + 1, y)];\n        right && !right.getter(\"VISITED\") && neighbours.push(right);\n        const bottom = this.getTiles()[this.getIndex(x, y + 1)];\n        bottom && !bottom.getter(\"VISITED\") && neighbours.push(bottom);\n        const left = this.getTiles()[this.getIndex(x - 1, y)];\n        left && !left.getter(\"VISITED\") && neighbours.push(left);\n        return neighbours;\n    };\n    this.removeWalls = (current, next)=>{\n        const posA = current.getPosition();\n        const posB = next.getPosition();\n        const i = posA._x - posB._x;\n        const j = posA._y - posB._y;\n        if (i === 1) {\n            current.setWallStaus(3, false);\n            next.setWallStaus(1, false);\n        } else if (i === -1) {\n            current.setWallStaus(1, false);\n            next.setWallStaus(3, false);\n        }\n        if (j === 1) {\n            current.setWallStaus(0, false);\n            next.setWallStaus(2, false);\n        } else if (j === -1) {\n            current.setWallStaus(2, false);\n            next.setWallStaus(0, false);\n        }\n    };\n    const init = (config)=>{\n        createTiles();\n        this.setStrategy(config.solver);\n    };\n    init(config);\n};\nvar $ed8576b4e64763fe$export$2e2bcd8739ae039 = $ed8576b4e64763fe$var$Maze;\n\n\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\n/**--------------------------------- */ // variables & types\nlet $f03b5a7db32c9864$var$maze;\n/**--------------------------------- */ // sketch\nconst $f03b5a7db32c9864$var$sketch = (p5)=>{\n    // const options = {\n    //     showHelpers: false,\n    //     size: 400,\n    //     currentTurn: Gamer.AI\n    // };\n    // const gui = new GUI({ autoPlace: false });\n    // gui.domElement.id = 'gui';\n    // document.getElementById('gui')?.appendChild(gui.domElement);\n    // gui.add(options, 'showHelpers').onChange((val) => {\n    //     console.log(val);\n    //     board.setValues('showHelpers', val);\n    // });\n    // gui.add(options, 'size', 200, 500, 10).onChange((val) => {\n    //     board.setValues('size', val);\n    //     if (scoreContainer) scoreContainer.style.top = `${(window.innerHeight + val) / 2 + 30}px`;\n    // });\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        // p5.noLoop();\n        // p5.frameRate(5);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        //\n        init(p5);\n    };\n    /** draw */ p5.draw = ()=>{\n        draw();\n    };\n    p5.mousePressed = (event)=>{\n        if (event.button === (0, $fK5g3.MOUSE_BTN).MIDDLE) p5.draw();\n    };\n    /**--------------------------------- */ // functions\n    function draw() {\n        p5.background(200, 60, 10);\n        $f03b5a7db32c9864$var$maze.update(p5.deltaTime).draw();\n    }\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n        $f03b5a7db32c9864$var$maze = new (0, $ed8576b4e64763fe$export$2e2bcd8739ae039)({\n            p5: p5,\n            width: 500,\n            size: 20,\n            solver: \"DFS_Recursive\"\n        });\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($f03b5a7db32c9864$var$sketch);\n\n\n//# sourceMappingURL=maze.b0c1794f.js.map\n","import P5 from 'p5';\r\nimport { TEdges } from './types';\r\n\r\nexport const defaultEntityConfig = { r: 5 };\r\nexport const defaultEdgeConfig: TEdges = {\r\n    top: true,\r\n    right: true,\r\n    bottom: true,\r\n    left: true\r\n};\r\nexport enum MOUSE_BTN {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\nexport enum Gamer {\r\n    PLAYER,\r\n    AI\r\n}\r\nexport type TTicTacToeCell = {\r\n    pos: P5.Vector;\r\n    owner: Gamer | undefined;\r\n};\r\nexport type TGameStatus = {\r\n    filledCells: number;\r\n    winner: Gamer | undefined;\r\n    cells: TTicTacToeCell[];\r\n};\r\n","import P5 from 'p5';\r\nimport Maze from 'src/libs/maze';\r\nimport { TMaze } from 'src/utils/types';\r\nimport { MOUSE_BTN } from 'src/utils/utils';\r\n\r\n/**--------------------------------- */\r\n// variables & types\r\nlet maze: TMaze;\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    // const options = {\r\n    //     showHelpers: false,\r\n    //     size: 400,\r\n    //     currentTurn: Gamer.AI\r\n    // };\r\n\r\n    // const gui = new GUI({ autoPlace: false });\r\n    // gui.domElement.id = 'gui';\r\n    // document.getElementById('gui')?.appendChild(gui.domElement);\r\n    // gui.add(options, 'showHelpers').onChange((val) => {\r\n    //     console.log(val);\r\n\r\n    //     board.setValues('showHelpers', val);\r\n    // });\r\n    // gui.add(options, 'size', 200, 500, 10).onChange((val) => {\r\n    //     board.setValues('size', val);\r\n    //     if (scoreContainer) scoreContainer.style.top = `${(window.innerHeight + val) / 2 + 30}px`;\r\n    // });\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        // p5.noLoop();\r\n        // p5.frameRate(5);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n\r\n        //\r\n        init(p5);\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        draw();\r\n    };\r\n\r\n    p5.mousePressed = (event: MouseEvent) => {\r\n        if (event.button === MOUSE_BTN.MIDDLE) {\r\n            p5.draw();\r\n        }\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function draw() {\r\n        p5.background(200, 60, 10);\r\n        maze.update(p5.deltaTime).draw();\r\n    }\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n        maze = new Maze({ p5: p5, width: 500, size: 20, solver: 'DFS_Recursive' });\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import { TMaze, TMazeConfig, TMazeSolvers, TMazeStrategy, TTile } from 'src/utils/types';\r\nimport { DFSNonRecursive } from './maze-strategies';\r\nimport Tile from './tile';\r\n\r\nconst Maze = function (this: TMaze, config: TMazeConfig) {\r\n    this.p5 = config.p5;\r\n    const _size = config.size;\r\n    const _width = config.width;\r\n    const _tiles: TTile[] = [];\r\n    let _strategy: TMazeStrategy;\r\n\r\n    this.update = (_deltatime: number) => {\r\n        _strategy.solve();\r\n        return this;\r\n    };\r\n\r\n    this.draw = () => {\r\n        for (let y = 0; y < _size; y++) {\r\n            for (let x = 0; x < _size; x++) {\r\n                _tiles[x + y * _size].draw();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    this.getWidth = () => {\r\n        return _width;\r\n    };\r\n\r\n    this.getSize = () => {\r\n        return _size;\r\n    };\r\n\r\n    this.getTiles = () => {\r\n        return _tiles;\r\n    };\r\n\r\n    const createTiles = () => {\r\n        for (let y = 0; y < _size; y++) {\r\n            for (let x = 0; x < _size; x++) {\r\n                _tiles.push(new Tile({ p5: this.p5, id: y * _size + x, x, y, grid: this }));\r\n            }\r\n        }\r\n    };\r\n\r\n    this.setStrategy = (solver: TMazeSolvers) => {\r\n        switch (solver) {\r\n            // case 'Kruskal':\r\n            //     _strategy = new Kruskal(this);\r\n            //     break;\r\n            case 'DFS_Recursive':\r\n            default:\r\n                _strategy = new DFSNonRecursive(this);\r\n                break;\r\n        }\r\n    };\r\n\r\n    this.getIndex = (i: number, j: number): number => {\r\n        if (i < 0 || j < 0 || i > _size - 1 || j > _size - 1) {\r\n            return -1;\r\n        }\r\n        return j * _size + i;\r\n    };\r\n\r\n    this.getNeighbours = (tile: TTile): TTile[] => {\r\n        let neighbours: TTile[] = [];\r\n        const { _x: x, _y: y } = tile.getPosition();\r\n\r\n        // top\r\n        const top = this.getTiles()[this.getIndex(x, y - 1)];\r\n        top && !top.getter('VISITED') && neighbours.push(top);\r\n        const right = this.getTiles()[this.getIndex(x + 1, y)];\r\n        right && !right.getter('VISITED') && neighbours.push(right);\r\n        const bottom = this.getTiles()[this.getIndex(x, y + 1)];\r\n        bottom && !bottom.getter('VISITED') && neighbours.push(bottom);\r\n        const left = this.getTiles()[this.getIndex(x - 1, y)];\r\n        left && !left.getter('VISITED') && neighbours.push(left);\r\n\r\n        return neighbours;\r\n    };\r\n\r\n    this.removeWalls = (current, next) => {\r\n        const posA = current.getPosition();\r\n        const posB = next.getPosition();\r\n\r\n        const i = posA._x - posB._x;\r\n        const j = posA._y - posB._y;\r\n\r\n        if (i === 1) {\r\n            current.setWallStaus(3, false);\r\n            next.setWallStaus(1, false);\r\n        } else if (i === -1) {\r\n            current.setWallStaus(1, false);\r\n            next.setWallStaus(3, false);\r\n        }\r\n        if (j === 1) {\r\n            current.setWallStaus(0, false);\r\n            next.setWallStaus(2, false);\r\n        } else if (j === -1) {\r\n            current.setWallStaus(2, false);\r\n            next.setWallStaus(0, false);\r\n        }\r\n    };\r\n\r\n    const init = (config: TMazeConfig) => {\r\n        createTiles();\r\n        this.setStrategy(config.solver);\r\n    };\r\n\r\n    init(config);\r\n} as unknown as { new (config: TMazeConfig): TMaze };\r\n\r\nexport default Maze;\r\n","import { TMaze, TMazeStrategy, TMazeStrategyConstructor, TTile } from 'src/utils/types';\r\n\r\nconst DFSNonRecursive: TMazeStrategyConstructor = function (this: TMazeStrategy, grid: TMaze) {\r\n    const _grid = grid;\r\n    let _current: TTile;\r\n    let _next: TTile;\r\n    let _stack: TTile[] = [_grid.getTiles()[0]];\r\n\r\n    this.solve = () => {\r\n        if (_stack.length <= 0) return true;\r\n\r\n        _current = _stack.pop() as TTile;\r\n        _current.setter({ type: 'VISITED', payload: true });\r\n        _current.setter({ type: 'CURRENT', payload: false });\r\n\r\n        const neighbours = _grid.getNeighbours(_current);\r\n\r\n        if (neighbours.length > 0) {\r\n            // 2.1\r\n            _stack.push(_current);\r\n            // 2.2\r\n            const pick = Math.floor(Math.random() * neighbours.length);\r\n            _next = neighbours[pick];\r\n            // 2.3\r\n            _grid.removeWalls(_current, _next);\r\n\r\n            _next.setter({ type: 'CURRENT', payload: true });\r\n\r\n            // 2.4\r\n            _stack.push(_next);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const init = () => {};\r\n    init();\r\n} as any;\r\n\r\n// const Kruskal: TMazeStrategyConstructor = function (this: TMazeStrategy, grid: TMaze) {\r\n//     const _grid = grid;\r\n//     this.solve = () => {\r\n//     };\r\n\r\n//     const init = () => {};\r\n//     init();\r\n// } as any;\r\n\r\nexport { DFSNonRecursive };\r\n","import { TTile, TTileConfig, TTileGetter, TTileSetter } from 'src/utils/types';\r\n\r\nconst Tile = function (this: TTile, config: TTileConfig) {\r\n    this.p5 = config.p5;\r\n    this.id = config.id;\r\n    const _x = config.x;\r\n    const _y = config.y;\r\n    const _gird = config.grid;\r\n    let _isVisited: boolean = false;\r\n    let _isCurrent: boolean = false;\r\n    let _walls: [boolean, boolean, boolean, boolean] = [true, true, true, true];\r\n\r\n    this.update = () => {\r\n        return this;\r\n    };\r\n\r\n    this.draw = () => {\r\n        const dim = _gird.getWidth() / _gird.getSize();\r\n        drawWalls();\r\n        return this;\r\n    };\r\n\r\n    this.getPosition = (): { _x: number; _y: number } => {\r\n        return { _x, _y };\r\n    };\r\n\r\n    this.setWallStaus = (index: number, state: boolean) => {\r\n        _walls[index] = state;\r\n    };\r\n\r\n    this.getter = ((prop) => {\r\n        switch (prop) {\r\n            case 'CURRENT':\r\n                return _isCurrent;\r\n            case 'VISITED':\r\n                return _isVisited;\r\n            case 'WALLS':\r\n                return _walls;\r\n            default:\r\n                break;\r\n        }\r\n        throw new Error(`Unknown getter key: ${prop}`);\r\n    }) as TTileGetter;\r\n\r\n    this.setter = (action: TTileSetter) => {\r\n        switch (action.type) {\r\n            case 'VISITED':\r\n                _isVisited = action.payload;\r\n                break;\r\n            case 'CURRENT':\r\n                _isCurrent = action.payload;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const drawWalls = () => {\r\n        const dim = _gird.getWidth() / _gird.getSize();\r\n\r\n        this.p5.push();\r\n        this.p5.translate(_x * dim, _y * dim);\r\n\r\n        //\r\n        if (_isVisited) {\r\n            this.p5.fill(255, 255, 50);\r\n            this.p5.noStroke();\r\n            this.p5.rect(0, 0, dim, dim);\r\n        }\r\n\r\n        if (_isCurrent) {\r\n            this.p5.fill(128, 255, 50);\r\n            this.p5.noStroke();\r\n            this.p5.rect(0, 0, dim, dim);\r\n        }\r\n\r\n        this.p5.noFill();\r\n        this.p5.stroke(255);\r\n\r\n        // top wall\r\n        _walls[0] && this.p5.line(0, 0, dim, 0);\r\n        // right wall\r\n        _walls[1] && this.p5.line(dim, 0, dim, dim);\r\n        // bottom wall\r\n        _walls[2] && this.p5.line(0, dim, dim, dim);\r\n        // left wall\r\n        _walls[3] && this.p5.line(0, 0, 0, dim);\r\n\r\n        // label\r\n        this.p5.stroke(0);\r\n        this.p5.fill(128);\r\n        // this.p5.text(this.id, dim / 2, dim / 2);\r\n        //\r\n\r\n        this.p5.pop();\r\n\r\n        // console.log(this.id, _walls);\r\n    };\r\n} as unknown as { new (config: TTileConfig): TTile };\r\nexport default Tile;\r\n"],"names":["$f03b5a7db32c9864$var$maze","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$28770b279d7ab5b1$export$bfd2dc5313efa3a3","$28770b279d7ab5b1$export$4008efb11b076cd5","MOUSE_BTN","Gamer","$28770b279d7ab5b1$export$73820bb3da69f923","$28770b279d7ab5b1$export$1ea8cd15d9ca5dee","r","top","right","bottom","left","$7Pz0b","$b24ccf84843e9734$export$8ca58d4878408f45","grid","_current","_next","_stack","_grid","getTiles","solve","length","pop","setter","type","payload","neighbours","getNeighbours","push","pick","Math","floor","random","removeWalls","$7ea30b41bdf6dc0f$export$2e2bcd8739ae039","config","p5","_x","x","_y","y","_gird","_isVisited","_isCurrent","_walls","update","draw","getWidth","getSize","drawWalls","getPosition","setWallStaus","index","state","getter","prop","action","dim","translate","fill","noStroke","rect","noFill","stroke","line","$ed8576b4e64763fe$export$2e2bcd8739ae039","_strategy","_size","size","_width","width","_tiles","_deltatime","createTiles","setStrategy","solver","getIndex","i","j","tile","current","next","posA","posB","$fK5g3","a","__esModule","default","setup","canvas","createCanvas","window","innerWidth","innerHeight","parent","background","pixelDensity","colorMode","HSB","addEventListener","resizeDisplay","resizeCanvas","deltaTime","mousePressed","event","button","MIDDLE"],"version":3,"file":"maze.b0c1794f.js.map"}