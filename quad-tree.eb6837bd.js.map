{"mappings":"IEMI,EACA,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,M,E,EDGQ,EAKA,E,E,E,O,C,sB,I,G,E,E,O,C,oB,I,G,E,E,O,C,Y,I,G,E,E,O,C,Q,I,GAZL,IAAM,EAAsB,CAAE,EAAG,CAAE,EAC7B,EAA4B,CACrC,IAAK,CAAA,EACL,MAAO,CAAA,EACP,OAAQ,CAAA,EACR,KAAM,CAAA,CACV,C,EACY,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,I,C,E,C,O,C,C,E,M,C,E,C,S,C,C,E,K,C,E,C,Q,CAKA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,M,C,E,C,S,C,C,E,E,C,E,C,I,G,I,E,E,S,E,E,QEDZ,OAAM,EAQF,YAAY,CAAM,CAAE,CAAuB,CAAE,CACzC,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,KAAK,CAAG,EAAE,CACf,IAAI,CAAC,IAAI,CAAG,IAAI,CAAC,YAAY,CAAC,EAAO,GAAG,CAAE,EAAO,KAAK,CAAE,EAAO,MAAM,EACrE,IAAI,CAAC,YAAY,CAAG,EAAE,CACtB,IAAI,CAAC,QAAQ,CAAG,EAAO,QAAQ,AACnC,CAEA,aAAa,CAAW,CAAE,CAAa,CAAE,CAAc,CAAE,CAErD,OADa,IAAI,EAAK,IAAI,CAAC,EAAE,CAAE,EAAK,EAAO,EAE/C,CAEA,WAAY,CACR,IAAM,EAAO,IAAI,CAAC,IAAI,CAChB,EAAI,EAAK,KAAK,CAAG,EACjB,EAAI,EAAK,MAAM,CAAG,EAElB,EAAK,IAAI,EAAS,IAAI,CAAC,EAAE,CAAE,CAC7B,SAAU,IAAI,CAAC,QAAQ,CACvB,OAAQ,AAAI,EAAJ,EACR,MAAO,A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","sources":["<anon>","src/utils/utils.ts","src/scripts/quad-tree-demo.ts","src/libs/quad-tree.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fK5g3\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultEntityConfig\", () => $28770b279d7ab5b1$export$73820bb3da69f923);\n$parcel$export(module.exports, \"defaultEdgeConfig\", () => $28770b279d7ab5b1$export$1ea8cd15d9ca5dee);\n$parcel$export(module.exports, \"MOUSE_BTN\", () => $28770b279d7ab5b1$export$bfd2dc5313efa3a3);\n$parcel$export(module.exports, \"Gamer\", () => $28770b279d7ab5b1$export$4008efb11b076cd5);\nconst $28770b279d7ab5b1$export$73820bb3da69f923 = {\n    r: 5\n};\nconst $28770b279d7ab5b1$export$1ea8cd15d9ca5dee = {\n    top: true,\n    right: true,\n    bottom: true,\n    left: true\n};\nvar $28770b279d7ab5b1$export$bfd2dc5313efa3a3;\n(function(MOUSE_BTN) {\n    MOUSE_BTN[MOUSE_BTN[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BTN[MOUSE_BTN[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BTN[MOUSE_BTN[\"RIGHT\"] = 2] = \"RIGHT\";\n})($28770b279d7ab5b1$export$bfd2dc5313efa3a3 || ($28770b279d7ab5b1$export$bfd2dc5313efa3a3 = {}));\nvar $28770b279d7ab5b1$export$4008efb11b076cd5;\n(function(Gamer) {\n    Gamer[Gamer[\"PLAYER\"] = 0] = \"PLAYER\";\n    Gamer[Gamer[\"AI\"] = 1] = \"AI\";\n})($28770b279d7ab5b1$export$4008efb11b076cd5 || ($28770b279d7ab5b1$export$4008efb11b076cd5 = {}));\n\n});\n\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nclass $f3df360a3a0b88b3$var$QuadTree {\n    constructor(p5, config){\n        this.p5 = p5;\n        this.items = [];\n        this.quad = this.generateQuad(config.pos, config.width, config.height);\n        this.subdivisions = [];\n        this.capacity = config.capacity;\n    }\n    generateQuad(pos, width, height) {\n        const quad = new $f3df360a3a0b88b3$export$7005c9eb6671414d(this.p5, pos, width, height);\n        return quad;\n    }\n    subdivide() {\n        const quad = this.quad;\n        const w = quad.width / 4;\n        const h = quad.height / 4;\n        const ne = new $f3df360a3a0b88b3$var$QuadTree(this.p5, {\n            capacity: this.capacity,\n            height: h * 2,\n            width: w * 2,\n            pos: {\n                x: quad.pos.x + w,\n                y: quad.pos.y + h\n            }\n        });\n        const nw = new $f3df360a3a0b88b3$var$QuadTree(this.p5, {\n            capacity: this.capacity,\n            height: h * 2,\n            width: w * 2,\n            pos: {\n                x: quad.pos.x - w,\n                y: quad.pos.y + h\n            }\n        });\n        const se = new $f3df360a3a0b88b3$var$QuadTree(this.p5, {\n            capacity: this.capacity,\n            height: h * 2,\n            width: w * 2,\n            pos: {\n                x: quad.pos.x + w,\n                y: quad.pos.y - h\n            }\n        });\n        const sw = new $f3df360a3a0b88b3$var$QuadTree(this.p5, {\n            capacity: this.capacity,\n            height: h * 2,\n            width: w * 2,\n            pos: {\n                x: quad.pos.x - w,\n                y: quad.pos.y - h\n            }\n        });\n        this.subdivisions = [\n            ne,\n            nw,\n            se,\n            sw\n        ];\n    }\n    insert(item) {\n        if (!this.quad.isWithinBounds(item)) return false;\n        if (this.items.length < this.capacity) {\n            this.items.push(item);\n            return true;\n        }\n        if (!this.subdivisions.length) this.subdivide();\n        for(let i = 0; i < this.subdivisions.length; i++){\n            const isDivided = this.subdivisions[i].insert(item);\n            if (isDivided) return true;\n        }\n        return false;\n    }\n    query(range, found = []) {\n        $f3df360a3a0b88b3$var$QuadTree.count++;\n        if (!this.quad.isIntersects(range)) return [];\n        for (const point of this.items)if (range.isWithinBounds(point)) found.push(point);\n        for (const quad of this.subdivisions)quad.query(range, found);\n        return found;\n    }\n    draw() {\n        this.quad.draw();\n        for (const quad of this.subdivisions)quad.draw();\n        for (const item of this.items){\n            this.p5.stroke(255, 1);\n            this.p5.circle(item.x, item.y, 2);\n        }\n        return this;\n    }\n    clear() {\n        this.items = [];\n        this.subdivisions = [];\n    }\n}\nclass $f3df360a3a0b88b3$export$7005c9eb6671414d {\n    constructor(p5, pos, width, height){\n        this.p5 = p5;\n        this.pos = pos;\n        this.width = width;\n        this.height = height;\n    }\n    isWithinBounds(point) {\n        const { x: x, y: y } = this.pos;\n        const w = this.width / 2;\n        const h = this.height / 2;\n        return point.y <= y + h && point.x <= x + w && point.y > y - h && point.x > x - w;\n    }\n    isIntersects(range) {\n        const { x: x, y: y } = this.pos;\n        const w = this.width / 2;\n        const h = this.height / 2;\n        return !(range.pos.y - range.height / 2 > y + h || range.pos.x - range.width / 2 > x + w || range.pos.y + range.height / 2 < y - h || range.pos.x + range.width / 2 < x - w);\n    }\n    draw() {\n        this.p5.rectMode(this.p5.CENTER);\n        this.p5.stroke(255);\n        this.p5.noFill();\n        this.p5.rect(this.pos.x, this.pos.y, this.width, this.height);\n        return this;\n    }\n}\nvar /**--------------------------------- */ // functions\n$f3df360a3a0b88b3$export$2e2bcd8739ae039 = $f3df360a3a0b88b3$var$QuadTree;\n\n\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\n/**--------------------------------- */ let $591968304f5f21ce$var$qtree;\nlet $591968304f5f21ce$var$selection;\nconst $591968304f5f21ce$var$TOTAL = 1000;\n/**--------------------------------- */ // sketch\nconst $591968304f5f21ce$var$sketch = (p5)=>{\n    const options = {\n        clear: ()=>$591968304f5f21ce$var$qtree.clear(),\n        populate: ()=>{\n            init(p5);\n        },\n        selectionSize: 100\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"clear\").name(\"Clear tree\");\n    gui.add(options, \"populate\").name(\"Populte  tree\");\n    gui.add(options, \"selectionSize\", 50, 200, 1).name(\"Populte  tree\").onChange((val)=>$591968304f5f21ce$var$selection.width = $591968304f5f21ce$var$selection.height = val);\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        //\n        init(p5);\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        $591968304f5f21ce$var$qtree.draw();\n        $591968304f5f21ce$var$selection.pos = {\n            x: p5.mouseX,\n            y: p5.mouseY\n        };\n        p5.rectMode(p5.CENTER);\n        p5.stroke(128, 255, 255);\n        p5.rect($591968304f5f21ce$var$selection.pos.x, $591968304f5f21ce$var$selection.pos.y, $591968304f5f21ce$var$selection.width, $591968304f5f21ce$var$selection.height);\n        (0, $f3df360a3a0b88b3$export$2e2bcd8739ae039).count = 0;\n        const points = $591968304f5f21ce$var$qtree.query($591968304f5f21ce$var$selection);\n        // draw stats\n        p5.textSize(20);\n        p5.noStroke();\n        p5.fill(255);\n        p5.textAlign(p5.RIGHT);\n        p5.text(`Iterations/total: ${(0, $f3df360a3a0b88b3$export$2e2bcd8739ae039).count}/${$591968304f5f21ce$var$TOTAL}`, window.innerWidth - 20, 50);\n        // console.log(QuadTree.count);\n        for (const point of points){\n            p5.stroke(0, 255, 255);\n            p5.circle(point.x, point.y, 2);\n        }\n    };\n    p5.mouseReleased = (e)=>{\n        if (e.button !== (0, $fK5g3.MOUSE_BTN).LEFT) return;\n        $591968304f5f21ce$var$qtree.insert({\n            x: e.clientX,\n            y: e.clientY\n        });\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        const size = 500;\n        const { innerWidth: innerWidth, innerHeight: innerHeight } = window;\n        p5.background(200, 60, 10);\n        const pos = p5.createVector(innerWidth / 2, innerHeight / 2);\n        $591968304f5f21ce$var$qtree = new (0, $f3df360a3a0b88b3$export$2e2bcd8739ae039)(p5, {\n            pos: pos,\n            capacity: 4,\n            width: size,\n            height: size\n        });\n        $591968304f5f21ce$var$selection = new (0, $f3df360a3a0b88b3$export$7005c9eb6671414d)(p5, {\n            x: 0,\n            y: 0\n        }, 100, 100);\n        // draw points\n        for(let i = 0; i < $591968304f5f21ce$var$TOTAL; i++){\n            const pos = {\n                x: p5.randomGaussian(innerWidth / 2, 100),\n                y: p5.randomGaussian(innerHeight / 2, 100)\n            };\n            $591968304f5f21ce$var$qtree.insert(pos);\n        }\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($591968304f5f21ce$var$sketch);\n\n\n//# sourceMappingURL=quad-tree.eb6837bd.js.map\n","import P5 from 'p5';\r\nimport { TEdges } from './types';\r\n\r\nexport const defaultEntityConfig = { r: 5 };\r\nexport const defaultEdgeConfig: TEdges = {\r\n    top: true,\r\n    right: true,\r\n    bottom: true,\r\n    left: true\r\n};\r\nexport enum MOUSE_BTN {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\nexport enum Gamer {\r\n    PLAYER,\r\n    AI\r\n}\r\nexport type TTicTacToeCell = {\r\n    pos: P5.Vector;\r\n    owner: Gamer | undefined;\r\n};\r\nexport type TGameStatus = {\r\n    filledCells: number;\r\n    winner: Gamer | undefined;\r\n    cells: TTicTacToeCell[];\r\n};\r\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport QuadTree, { Quad } from 'src/libs/quad-tree';\r\nimport { MOUSE_BTN } from 'src/utils/utils';\r\n\r\n/**--------------------------------- */\r\nlet qtree: QuadTree;\r\nlet selection: Quad;\r\nconst TOTAL = 1000;\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    const options = {\r\n        clear: () => qtree.clear(),\r\n        populate: () => {\r\n            init(p5);\r\n        },\r\n        selectionSize: 100\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'clear').name('Clear tree');\r\n    gui.add(options, 'populate').name('Populte  tree');\r\n    gui.add(options, 'selectionSize', 50, 200, 1)\r\n        .name('Populte  tree')\r\n        .onChange((val) => (selection.width = selection.height = val));\r\n\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n\r\n        //\r\n        init(p5);\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n        qtree.draw();\r\n\r\n        selection.pos = { x: p5.mouseX, y: p5.mouseY };\r\n        p5.rectMode(p5.CENTER);\r\n        p5.stroke(128, 255, 255);\r\n        p5.rect(selection.pos.x, selection.pos.y, selection.width, selection.height);\r\n        QuadTree.count = 0;\r\n        const points = qtree.query(selection);\r\n\r\n        // draw stats\r\n        p5.textSize(20);\r\n        p5.noStroke();\r\n        p5.fill(255);\r\n        p5.textAlign(p5.RIGHT);\r\n        p5.text(`Iterations/total: ${QuadTree.count}/${TOTAL}`, window.innerWidth - 20, 50);\r\n        // console.log(QuadTree.count);\r\n\r\n        for (const point of points) {\r\n            p5.stroke(0, 255, 255);\r\n            p5.circle(point.x, point.y, 2);\r\n        }\r\n    };\r\n\r\n    p5.mouseReleased = (e: MouseEvent) => {\r\n        if (e.button !== MOUSE_BTN.LEFT) return;\r\n        qtree.insert({ x: e.clientX, y: e.clientY });\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        const size = 500;\r\n        const { innerWidth, innerHeight } = window;\r\n        p5.background(200, 60, 10);\r\n        const pos = p5.createVector(innerWidth / 2, innerHeight / 2);\r\n        qtree = new QuadTree(p5, { pos, capacity: 4, width: size, height: size });\r\n\r\n        selection = new Quad(p5, { x: 0, y: 0 }, 100, 100);\r\n\r\n        // draw points\r\n        for (let i = 0; i < TOTAL; i++) {\r\n            const pos = {\r\n                x: p5.randomGaussian(innerWidth / 2, 100),\r\n                y: p5.randomGaussian(innerHeight / 2, 100)\r\n            };\r\n            qtree.insert(pos);\r\n        }\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import P5 from 'p5';\r\n\r\ninterface TPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ntype TQuadTreeConfig = {\r\n    capacity: number;\r\n    width: number;\r\n    height: number;\r\n    pos: TPoint;\r\n};\r\n\r\nclass QuadTree {\r\n    p5: P5;\r\n    quad: Quad;\r\n    subdivisions: QuadTree[];\r\n    capacity: number;\r\n    items: TPoint[];\r\n    static count: number;\r\n\r\n    constructor(p5: P5, config: TQuadTreeConfig) {\r\n        this.p5 = p5;\r\n        this.items = [];\r\n        this.quad = this.generateQuad(config.pos, config.width, config.height);\r\n        this.subdivisions = [];\r\n        this.capacity = config.capacity;\r\n    }\r\n\r\n    generateQuad(pos: TPoint, width: number, height: number) {\r\n        const quad = new Quad(this.p5, pos, width, height);\r\n        return quad;\r\n    }\r\n\r\n    subdivide() {\r\n        const quad = this.quad;\r\n        const w = quad.width / 4;\r\n        const h = quad.height / 4;\r\n\r\n        const ne = new QuadTree(this.p5, {\r\n            capacity: this.capacity,\r\n            height: h * 2,\r\n            width: w * 2,\r\n            pos: { x: quad.pos.x + w, y: quad.pos.y + h }\r\n        });\r\n        const nw = new QuadTree(this.p5, {\r\n            capacity: this.capacity,\r\n            height: h * 2,\r\n            width: w * 2,\r\n            pos: { x: quad.pos.x - w, y: quad.pos.y + h }\r\n        });\r\n        const se = new QuadTree(this.p5, {\r\n            capacity: this.capacity,\r\n            height: h * 2,\r\n            width: w * 2,\r\n            pos: { x: quad.pos.x + w, y: quad.pos.y - h }\r\n        });\r\n        const sw = new QuadTree(this.p5, {\r\n            capacity: this.capacity,\r\n            height: h * 2,\r\n            width: w * 2,\r\n            pos: { x: quad.pos.x - w, y: quad.pos.y - h }\r\n        });\r\n        this.subdivisions = [ne, nw, se, sw];\r\n    }\r\n\r\n    insert(item: TPoint): boolean {\r\n        if (!this.quad.isWithinBounds(item)) return false;\r\n\r\n        if (this.items.length < this.capacity) {\r\n            this.items.push(item);\r\n            return true;\r\n        }\r\n        if (!this.subdivisions.length) {\r\n            this.subdivide();\r\n        }\r\n        for (let i = 0; i < this.subdivisions.length; i++) {\r\n            const isDivided = this.subdivisions[i].insert(item);\r\n            if (isDivided) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    query(range: Quad, found: TPoint[] = []): TPoint[] {\r\n        QuadTree.count++;\r\n        if (!this.quad.isIntersects(range)) return [];\r\n\r\n        for (const point of this.items) {\r\n            if (range.isWithinBounds(point)) found.push(point);\r\n        }\r\n\r\n        for (const quad of this.subdivisions) {\r\n            quad.query(range, found);\r\n        }\r\n\r\n        return found;\r\n    }\r\n\r\n    draw(): this {\r\n        this.quad.draw();\r\n        for (const quad of this.subdivisions) {\r\n            quad.draw();\r\n        }\r\n        for (const item of this.items) {\r\n            this.p5.stroke(255, 1);\r\n            this.p5.circle(item.x, item.y, 2);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    clear() {\r\n        this.items = [];\r\n        this.subdivisions = [];\r\n    }\r\n}\r\n\r\nexport class Quad {\r\n    p5: P5;\r\n    pos: TPoint;\r\n    width: number;\r\n    height: number;\r\n\r\n    constructor(p5: P5, pos: TPoint, width: number, height: number) {\r\n        this.p5 = p5;\r\n        this.pos = pos;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    isWithinBounds(point: TPoint): boolean {\r\n        const { x, y } = this.pos;\r\n        const w = this.width / 2;\r\n        const h = this.height / 2;\r\n        return point.y <= y + h && point.x <= x + w && point.y > y - h && point.x > x - w;\r\n    }\r\n\r\n    isIntersects(range: Quad): boolean {\r\n        const { x, y } = this.pos;\r\n        const w = this.width / 2;\r\n        const h = this.height / 2;\r\n        return !(\r\n            range.pos.y - range.height / 2 > y + h ||\r\n            range.pos.x - range.width / 2 > x + w ||\r\n            range.pos.y + range.height / 2 < y - h ||\r\n            range.pos.x + range.width / 2 < x - w\r\n        );\r\n    }\r\n\r\n    draw(): this {\r\n        this.p5.rectMode(this.p5.CENTER);\r\n        this.p5.stroke(255);\r\n        this.p5.noFill();\r\n        this.p5.rect(this.pos.x, this.pos.y, this.width, this.height);\r\n        return this;\r\n    }\r\n}\r\n\r\n/**--------------------------------- */\r\n// functions\r\n\r\nexport default QuadTree;\r\n"],"names":["$591968304f5f21ce$var$qtree","$591968304f5f21ce$var$selection","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$28770b279d7ab5b1$export$bfd2dc5313efa3a3","$28770b279d7ab5b1$export$4008efb11b076cd5","MOUSE_BTN","Gamer","$28770b279d7ab5b1$export$73820bb3da69f923","$28770b279d7ab5b1$export$1ea8cd15d9ca5dee","r","top","right","bottom","left","$e93rA","$7Pz0b","$f3df360a3a0b88b3$var$QuadTree","constructor","p5","config","items","quad","generateQuad","pos","width","height","subdivisions","capacity","$f3df360a3a0b88b3$export$7005c9eb6671414d","subdivide","w","h","ne","x","y","nw","se","sw","insert","item","isWithinBounds","length","push","i","query","range","found","count","isIntersects","point","draw","stroke","circle","clear","rectMode","CENTER","noFill","rect","$fK5g3","a","__esModule","default","options","populate","selectionSize","gui","GUI","autoPlace","innerWidth","innerHeight","window","background","createVector","randomGaussian","domElement","document","getElementById","appendChild","add","name","onChange","val","setup","canvas","createCanvas","parent","pixelDensity","colorMode","HSB","addEventListener","resizeDisplay","resizeCanvas","mouseX","mouseY","points","textSize","noStroke","fill","textAlign","RIGHT","text","mouseReleased","button","LEFT","clientX","clientY"],"version":3,"file":"quad-tree.eb6837bd.js.map"}