{"mappings":"IGSI,E,S,E,C,E,O,G,E,U,C,E,O,C,C,C,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,I,G,I,E,E,SFNJ,IAAM,EAAwC,CAC1C,OAAQ,EACR,MAAO,IACP,SAAU,CAAA,CACd,EA2JA,IAAA,EA1JA,MASI,YAAY,CAAM,CAAE,CAAyC,CAAE,CAC3D,IAAM,EAAS,CAAE,GAAG,CAAa,CAAE,GAAG,CAAO,AAAC,CAC9C,CAAA,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,IAAI,CAAG,OACZ,IAAI,CAAC,MAAM,CAAG,EAAE,CAChB,IAAI,CAAC,QAAQ,CAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EACpC,IAAI,CAAC,MAAM,CAAG,EAAO,MAAM,CAC3B,IAAI,CAAC,KAAK,CAAG,EAAO,KAAK,CACzB,IAAI,CAAC,QAAQ,CAAG,EAAO,QAAQ,AACnC,CAEA,UAAU,CAAiB,CAAE,CAEzB,OADA,IAAI,CAAC,MAAM,CAAG,EACP,IAAI,CAAC,YAAY,EAC5B,CAEA,WAAY,CACR,OAAO,IAAI,CAAC,MAAM,AACtB,CAEA,kBACI,CAAS,CACT,CAAS,CACT,EAAuB,CAAA,CAAK,CACyB,KAGjD,EADA,EADJ,IAAM,EAAa,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,EAAG,GAGrC,EAAS,IAAI,CAAC,SAAS,GACvB,EAAgB,EAAO,MAAM,CAEnC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,EACjC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAE7B,IAAK,IAAI,EAAI,EAAG,E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","sources":["<anon>","src/libs/interactive-path.ts","src/utils/utils.ts","src/scripts/closest-path.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirebf15\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirebf15\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"7wO5S\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $a58c6e89015b1402$export$2e2bcd8739ae039);\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nconst $a58c6e89015b1402$var$defaultConfig = {\n    radius: 2,\n    color: 100,\n    isClosed: false\n};\nclass $a58c6e89015b1402$var$InteractivePath {\n    constructor(p5, _config){\n        const config = {\n            ...$a58c6e89015b1402$var$defaultConfig,\n            ..._config\n        };\n        this.p5 = p5;\n        this.mode = \"view\";\n        this.points = [];\n        this.paintRef = this.paint.bind(this);\n        this.radius = config.radius;\n        this.color = config.color;\n        this.isClosed = config.isClosed;\n    }\n    setPoints(points) {\n        this.points = points;\n        return this.stopPainting();\n    }\n    getPoints() {\n        return this.points;\n    }\n    getClosestSegment(x, y, isPointWithinSegment = false) {\n        const queryPoint = this.p5.createVector(x, y);\n        let shortestLength = undefined;\n        let shortestPoint;\n        const points = this.getPoints();\n        const numberOfLines = points.length;\n        this.p5.angleMode(this.p5.RADIANS);\n        this.p5.colorMode(this.p5.HSB);\n        for(let i = 0; i < numberOfLines; i++){\n            const segmentLength = points[i].length;\n            let prev = 0;\n            for(let j = 1; !this.isClosed && j < segmentLength || this.isClosed && j <= segmentLength; j++){\n                let curr = j % segmentLength;\n                const line = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(points[i][curr], points[i][prev]);\n                const mouse = (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b))).Vector.sub(queryPoint, points[i][prev]);\n                const projection = mouse.dot(line);\n                const ratio = projection / line.magSq();\n                const temp = line.copy().normalize();\n                const projectionVector = isPointWithinSegment ? temp.setMag(ratio * line.mag()) : temp.setMag(this.p5.constrain(ratio, 0, 1) * line.mag());\n                if (isPointWithinSegment && (ratio < 0 || ratio > 1)) {\n                    prev = curr;\n                    continue;\n                }\n                const projectionPos = projectionVector.copy().add(points[i][prev]);\n                const distanceToSegment = projectionPos.copy().sub(queryPoint).magSq();\n                if (shortestLength === undefined || distanceToSegment < shortestLength) {\n                    shortestLength = distanceToSegment;\n                    shortestPoint = projectionPos;\n                }\n                prev = curr;\n            }\n        }\n        return {\n            length: shortestLength,\n            intersectionPosition: shortestPoint\n        };\n    }\n    addPoint(point) {\n        const lineIndex = this.points.length;\n        this.points[lineIndex].push(point.copy());\n        return this;\n    }\n    deletePoint() {\n        const lineIndex = this.points.length;\n        this.points[lineIndex].pop();\n        return this;\n    }\n    startPainting() {\n        if (this.mode === \"draw\") return this;\n        this.mode = \"draw\";\n        this.points.push([]);\n        this.p5.canvas.addEventListener(\"click\", this.paintRef);\n        return this;\n    }\n    stopPainting() {\n        if (this.mode === \"view\") return this;\n        this.mode = \"view\";\n        this.p5.canvas.removeEventListener(\"click\", this.paintRef);\n        return this;\n    }\n    togglePainting() {\n        this.mode === \"view\" ? this.startPainting() : this.stopPainting();\n        return this;\n    }\n    paint(event) {\n        const point = this.p5.createVector(event.x, event.y);\n        const numberOfLines = this.points.length;\n        this.points[numberOfLines - 1].push(point);\n        return this;\n    }\n    update(delta) {\n        delta;\n        return this;\n    }\n    draw() {\n        const numberOfLines = this.points.length;\n        this.p5.stroke(this.color);\n        this.p5.strokeWeight(this.radius * 2);\n        for(let i = 0; i < numberOfLines; i++){\n            const length = this.points[i].length;\n            this.p5.noFill();\n            this.p5.beginShape();\n            for(let j = 0; j < length; j++){\n                this.p5.circle(this.points[i][j].x, this.points[i][j].y, 10);\n                this.p5.vertex(this.points[i][j].x, this.points[i][j].y);\n            }\n            // decide if the line should render as closed\n            const shouldClose = this.isClosed && this.mode == \"draw\" && numberOfLines > 1 && i !== numberOfLines - 1 || this.isClosed && this.mode == \"view\";\n            this.p5.endShape(shouldClose ? \"close\" : undefined);\n            // draw the trailing line to the mouse while in the 'draw' mode\n            i == numberOfLines - 1 && length > 0 && this.mode == \"draw\" && this.p5.line(this.points[i][length - 1].x, this.points[i][length - 1].y, this.p5.mouseX, this.p5.mouseY);\n        }\n        return this;\n    }\n}\nvar $a58c6e89015b1402$export$2e2bcd8739ae039 = $a58c6e89015b1402$var$InteractivePath;\n\n});\n\nparcelRegister(\"fK5g3\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultEntityConfig\", () => $28770b279d7ab5b1$export$73820bb3da69f923);\n$parcel$export(module.exports, \"defaultEdgeConfig\", () => $28770b279d7ab5b1$export$1ea8cd15d9ca5dee);\n$parcel$export(module.exports, \"MOUSE_BTN\", () => $28770b279d7ab5b1$export$bfd2dc5313efa3a3);\n$parcel$export(module.exports, \"Gamer\", () => $28770b279d7ab5b1$export$4008efb11b076cd5);\nconst $28770b279d7ab5b1$export$73820bb3da69f923 = {\n    r: 5\n};\nconst $28770b279d7ab5b1$export$1ea8cd15d9ca5dee = {\n    top: true,\n    right: true,\n    bottom: true,\n    left: true\n};\nvar $28770b279d7ab5b1$export$bfd2dc5313efa3a3;\n(function(MOUSE_BTN) {\n    MOUSE_BTN[MOUSE_BTN[\"LEFT\"] = 0] = \"LEFT\";\n    MOUSE_BTN[MOUSE_BTN[\"MIDDLE\"] = 1] = \"MIDDLE\";\n    MOUSE_BTN[MOUSE_BTN[\"RIGHT\"] = 2] = \"RIGHT\";\n})($28770b279d7ab5b1$export$bfd2dc5313efa3a3 || ($28770b279d7ab5b1$export$bfd2dc5313efa3a3 = {}));\nvar $28770b279d7ab5b1$export$4008efb11b076cd5;\n(function(Gamer) {\n    Gamer[Gamer[\"PLAYER\"] = 0] = \"PLAYER\";\n    Gamer[Gamer[\"AI\"] = 1] = \"AI\";\n})($28770b279d7ab5b1$export$4008efb11b076cd5 || ($28770b279d7ab5b1$export$4008efb11b076cd5 = {}));\n\n});\n\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\n\nvar $7wO5S = parcelRequire(\"7wO5S\");\n\nvar $fK5g3 = parcelRequire(\"fK5g3\");\nlet $824f9bbf6649b2f5$var$collection = [];\nlet $824f9bbf6649b2f5$var$path;\nconst $824f9bbf6649b2f5$var$sketch = (p5)=>{\n    let options = {\n        mode: \"view\",\n        findOnlyWithinSegment: false,\n        clear: clear\n    };\n    function clear() {\n        $824f9bbf6649b2f5$var$path.setPoints([]);\n    }\n    function toggleDrawMode(mode) {\n        switch(mode){\n            case \"view\":\n                $824f9bbf6649b2f5$var$path?.stopPainting();\n                break;\n            case \"draw\":\n                $824f9bbf6649b2f5$var$path?.startPainting();\n                break;\n            default:\n                break;\n        }\n    }\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"mode\", [\n        \"view\",\n        \"draw\"\n    ]).onChange(toggleDrawMode);\n    gui.add(options, \"findOnlyWithinSegment\").name(\"Find Within Segment\");\n    gui.add(options, \"clear\").name(\"Clear Canvas\");\n    //setup\n    p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        window.addEventListener(\"resize\", ()=>$824f9bbf6649b2f5$var$resizeDisplay(p5));\n        document.oncontextmenu = function() {\n            return false;\n        };\n        $824f9bbf6649b2f5$var$path = new (0, $7wO5S.default)(p5, {\n            isClosed: false\n        });\n        const points = [\n            [\n                p5.createVector(200, 300),\n                p5.createVector(250, 150),\n                p5.createVector(550, 250),\n                p5.createVector(730, 100)\n            ]\n        ];\n        $824f9bbf6649b2f5$var$path.setPoints(points);\n        $824f9bbf6649b2f5$var$collection.push($824f9bbf6649b2f5$var$path);\n    };\n    p5.mouseReleased = (event)=>{\n        switch(event.button){\n            case (0, $fK5g3.MOUSE_BTN).LEFT:\n                if (options.mode === \"draw\") $824f9bbf6649b2f5$var$path?.startPainting();\n                break;\n            case (0, $fK5g3.MOUSE_BTN).RIGHT:\n                if (options.mode === \"draw\") $824f9bbf6649b2f5$var$path?.stopPainting();\n                break;\n            default:\n                break;\n        }\n    };\n    p5.keyPressed = (event)=>{\n        if (event.keyCode === p5.ESCAPE) p5.isLooping() ? p5.noLoop() : p5.loop();\n    };\n    //draw\n    p5.draw = ()=>{\n        p5.clear();\n        $824f9bbf6649b2f5$var$collection.forEach((item)=>{\n            item.update(p5.deltaTime).draw();\n            if (item instanceof (0, $7wO5S.default) && item.getPoints().length && options.mode === \"view\") {\n                const closest = item.getClosestSegment(p5.mouseX, p5.mouseY, options.findOnlyWithinSegment);\n                if (closest.intersectionPosition) $824f9bbf6649b2f5$var$drawHelper(p5, closest.intersectionPosition);\n            }\n        });\n    };\n};\nfunction $824f9bbf6649b2f5$var$resizeDisplay(canvas) {\n    canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n}\nfunction $824f9bbf6649b2f5$var$drawHelper(p5, intersectionPosition) {\n    const mx = p5.mouseX;\n    const my = p5.mouseY;\n    p5.stroke(0, 200, 128);\n    p5.strokeWeight(2);\n    p5.line(mx, my, intersectionPosition.x, intersectionPosition.y);\n    p5.strokeWeight(0);\n    p5.fill(255);\n    p5.circle(mx, my, 5);\n}\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($824f9bbf6649b2f5$var$sketch);\n\n\n//# sourceMappingURL=closest-path.05caadc4.js.map\n","import P5 from 'p5';\r\nimport { TInteractivePathConfig, TPoints } from 'src/utils/types';\r\n\r\nconst defaultConfig: TInteractivePathConfig = {\r\n    radius: 2,\r\n    color: 100,\r\n    isClosed: false\r\n};\r\nclass InteractivePath {\r\n    p5: P5;\r\n    mode: 'draw' | 'view';\r\n    points: TPoints[];\r\n    paintRef: any;\r\n    radius: number;\r\n    color: number;\r\n    isClosed: boolean;\r\n\r\n    constructor(p5: P5, _config?: Partial<TInteractivePathConfig>) {\r\n        const config = { ...defaultConfig, ..._config };\r\n        this.p5 = p5;\r\n        this.mode = 'view';\r\n        this.points = [];\r\n        this.paintRef = this.paint.bind(this);\r\n        this.radius = config.radius;\r\n        this.color = config.color;\r\n        this.isClosed = config.isClosed;\r\n    }\r\n\r\n    setPoints(points: TPoints[]) {\r\n        this.points = points;\r\n        return this.stopPainting();\r\n    }\r\n\r\n    getPoints() {\r\n        return this.points;\r\n    }\r\n\r\n    getClosestSegment(\r\n        x: number,\r\n        y: number,\r\n        isPointWithinSegment = false\r\n    ): { length?: number; intersectionPosition?: P5.Vector } {\r\n        const queryPoint = this.p5.createVector(x, y);\r\n        let shortestLength: number | undefined = undefined;\r\n        let shortestPoint: P5.Vector | undefined;\r\n        const points = this.getPoints();\r\n        const numberOfLines = points.length;\r\n\r\n        this.p5.angleMode(this.p5.RADIANS);\r\n        this.p5.colorMode(this.p5.HSB);\r\n\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            const segmentLength = points[i].length;\r\n            let prev = 0;\r\n\r\n            for (let j = 1; (!this.isClosed && j < segmentLength) || (this.isClosed && j <= segmentLength); j++) {\r\n                let curr = j % segmentLength;\r\n                const line = P5.Vector.sub(points[i][curr], points[i][prev]);\r\n                const mouse = P5.Vector.sub(queryPoint, points[i][prev]);\r\n                const projection = mouse.dot(line);\r\n                const ratio = projection / line.magSq();\r\n\r\n                const temp = line.copy().normalize();\r\n                const projectionVector = isPointWithinSegment\r\n                    ? temp.setMag(ratio * line.mag())\r\n                    : temp.setMag(this.p5.constrain(ratio, 0, 1) * line.mag());\r\n\r\n                if (isPointWithinSegment && (ratio < 0 || ratio > 1)) {\r\n                    prev = curr;\r\n                    continue;\r\n                }\r\n\r\n                const projectionPos = projectionVector.copy().add(points[i][prev]);\r\n                const distanceToSegment = projectionPos.copy().sub(queryPoint).magSq();\r\n                if (shortestLength === undefined || distanceToSegment < shortestLength) {\r\n                    shortestLength = distanceToSegment;\r\n                    shortestPoint = projectionPos;\r\n                }\r\n                prev = curr;\r\n            }\r\n        }\r\n        return {\r\n            length: shortestLength,\r\n            intersectionPosition: shortestPoint\r\n        };\r\n    }\r\n\r\n    addPoint(point: P5.Vector) {\r\n        const lineIndex = this.points.length;\r\n        this.points[lineIndex].push(point.copy());\r\n        return this;\r\n    }\r\n\r\n    deletePoint() {\r\n        const lineIndex = this.points.length;\r\n        this.points[lineIndex].pop();\r\n        return this;\r\n    }\r\n\r\n    startPainting() {\r\n        if (this.mode === 'draw') return this;\r\n        this.mode = 'draw';\r\n        this.points.push([]);\r\n        this.p5.canvas.addEventListener('click', this.paintRef);\r\n        return this;\r\n    }\r\n\r\n    stopPainting() {\r\n        if (this.mode === 'view') return this;\r\n        this.mode = 'view';\r\n        this.p5.canvas.removeEventListener('click', this.paintRef);\r\n        return this;\r\n    }\r\n\r\n    togglePainting() {\r\n        this.mode === 'view' ? this.startPainting() : this.stopPainting();\r\n        return this;\r\n    }\r\n\r\n    paint(event: MouseEvent) {\r\n        const point = this.p5.createVector(event.x, event.y);\r\n        const numberOfLines = this.points.length;\r\n        this.points[numberOfLines - 1].push(point);\r\n        return this;\r\n    }\r\n\r\n    update(delta: number) {\r\n        delta;\r\n        return this;\r\n    }\r\n\r\n    draw() {\r\n        const numberOfLines = this.points.length;\r\n        this.p5.stroke(this.color);\r\n        this.p5.strokeWeight(this.radius * 2);\r\n\r\n        for (let i = 0; i < numberOfLines; i++) {\r\n            const length = this.points[i].length;\r\n            this.p5.noFill();\r\n            this.p5.beginShape();\r\n            for (let j = 0; j < length; j++) {\r\n                this.p5.circle(this.points[i][j].x, this.points[i][j].y, 10);\r\n                this.p5.vertex(this.points[i][j].x, this.points[i][j].y);\r\n            }\r\n\r\n            // decide if the line should render as closed\r\n            const shouldClose =\r\n                (this.isClosed && this.mode == 'draw' && numberOfLines > 1 && i !== numberOfLines - 1) ||\r\n                (this.isClosed && this.mode == 'view');\r\n            this.p5.endShape(shouldClose ? 'close' : undefined);\r\n\r\n            // draw the trailing line to the mouse while in the 'draw' mode\r\n            i == numberOfLines - 1 &&\r\n                length > 0 &&\r\n                this.mode == 'draw' &&\r\n                this.p5.line(this.points[i][length - 1].x, this.points[i][length - 1].y, this.p5.mouseX, this.p5.mouseY);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport default InteractivePath;\r\n","import P5 from 'p5';\r\nimport { TEdges } from './types';\r\nimport CrossBoard from 'src/libs/cross-board-2';\r\n\r\nexport const defaultEntityConfig = { r: 5 };\r\nexport const defaultEdgeConfig: TEdges = {\r\n    top: true,\r\n    right: true,\r\n    bottom: true,\r\n    left: true\r\n};\r\nexport enum MOUSE_BTN {\r\n    LEFT,\r\n    MIDDLE,\r\n    RIGHT\r\n}\r\nexport enum Gamer {\r\n    PLAYER,\r\n    AI\r\n}\r\nexport type TTicTacToeCell = {\r\n    pos: P5.Vector;\r\n    owner: Gamer | undefined;\r\n};\r\nexport type TGameStatus = {\r\n    filledCells: number;\r\n    winner: Gamer | undefined;\r\n    cells: TTicTacToeCell[];\r\n};\r\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport InteractivePath from '../libs/interactive-path';\r\nimport { MOUSE_BTN } from '../utils/utils';\r\nimport { TPoints } from 'src/utils/types';\r\n\r\n/* ********************************************* */\r\ntype TMode = 'view' | 'draw';\r\nlet collection: InteractivePath[] = [];\r\nlet path: InteractivePath;\r\n\r\nconst sketch = (p5: P5) => {\r\n    let options = {\r\n        mode: 'view' as TMode,\r\n        findOnlyWithinSegment: false,\r\n        clear: clear\r\n    };\r\n\r\n    function clear() {\r\n        path.setPoints([]);\r\n    }\r\n\r\n    function toggleDrawMode(mode: TMode) {\r\n        switch (mode) {\r\n            case 'view':\r\n                path?.stopPainting();\r\n                break;\r\n            case 'draw':\r\n                path?.startPainting();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'mode', ['view', 'draw']).onChange(toggleDrawMode);\r\n    gui.add(options, 'findOnlyWithinSegment').name('Find Within Segment');\r\n    gui.add(options, 'clear').name('Clear Canvas');\r\n\r\n    //setup\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n        document.oncontextmenu = function () {\r\n            return false;\r\n        };\r\n\r\n        path = new InteractivePath(p5, { isClosed: false });\r\n        const points: TPoints[] = [\r\n            [p5.createVector(200, 300), p5.createVector(250, 150), p5.createVector(550, 250), p5.createVector(730, 100)]\r\n        ];\r\n        path.setPoints(points);\r\n        collection.push(path);\r\n    };\r\n\r\n    p5.mouseReleased = (event: MouseEvent) => {\r\n        switch (event.button) {\r\n            case MOUSE_BTN.LEFT:\r\n                if (options.mode === 'draw') {\r\n                    path?.startPainting();\r\n                }\r\n                break;\r\n            case MOUSE_BTN.RIGHT:\r\n                if (options.mode === 'draw') {\r\n                    path?.stopPainting();\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    p5.keyPressed = (event: KeyboardEvent) => {\r\n        if (event.keyCode === p5.ESCAPE) {\r\n            p5.isLooping() ? p5.noLoop() : p5.loop();\r\n        }\r\n    };\r\n\r\n    //draw\r\n    p5.draw = () => {\r\n        p5.clear();\r\n        collection.forEach((item) => {\r\n            item.update(p5.deltaTime).draw();\r\n            if (item instanceof InteractivePath && item.getPoints().length && options.mode === 'view') {\r\n                const closest = item.getClosestSegment(p5.mouseX, p5.mouseY, options.findOnlyWithinSegment);\r\n                if (closest.intersectionPosition) {\r\n                    drawHelper(p5, closest.intersectionPosition);\r\n                }\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nfunction resizeDisplay(canvas: P5) {\r\n    canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction drawHelper(p5: P5, intersectionPosition: P5.Vector) {\r\n    const mx = p5.mouseX;\r\n    const my = p5.mouseY;\r\n\r\n    p5.stroke(0, 200, 128);\r\n    p5.strokeWeight(2);\r\n    p5.line(mx, my, intersectionPosition.x, intersectionPosition.y);\r\n\r\n    p5.strokeWeight(0);\r\n    p5.fill(255);\r\n    p5.circle(mx, my, 5);\r\n}\r\n\r\nnew P5(sketch);\r\n"],"names":["$824f9bbf6649b2f5$var$path","$parcel$interopDefault","a","__esModule","default","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$a58c6e89015b1402$export$2e2bcd8739ae039","$7Pz0b","$a58c6e89015b1402$var$defaultConfig","radius","color","isClosed","constructor","p5","_config","config","mode","points","paintRef","paint","bind","setPoints","stopPainting","getPoints","getClosestSegment","x","y","isPointWithinSegment","shortestPoint","shortestLength","queryPoint","createVector","numberOfLines","length","angleMode","RADIANS","colorMode","HSB","i","segmentLength","prev","j","curr","line","Vector","sub","ratio","projection","mouse","dot","magSq","temp","copy","normalize","projectionVector","setMag","mag","constrain","projectionPos","add","distanceToSegment","undefined","intersectionPosition","addPoint","point","lineIndex","push","deletePoint","pop","startPainting","canvas","addEventListener","removeEventListener","togglePainting","event","update","delta","draw","stroke","strokeWeight","noFill","beginShape","circle","vertex","shouldClose","endShape","mouseX","mouseY","$28770b279d7ab5b1$export$bfd2dc5313efa3a3","$28770b279d7ab5b1$export$4008efb11b076cd5","MOUSE_BTN","Gamer","$28770b279d7ab5b1$export$73820bb3da69f923","$28770b279d7ab5b1$export$1ea8cd15d9ca5dee","r","top","right","bottom","left","$e93rA","$7wO5S","$fK5g3","$824f9bbf6649b2f5$var$collection","options","findOnlyWithinSegment","clear","gui","GUI","autoPlace","domElement","document","getElementById","appendChild","onChange","name","setup","createCanvas","window","innerWidth","innerHeight","parent","background","pixelDensity","$824f9bbf6649b2f5$var$resizeDisplay","resizeCanvas","oncontextmenu","mouseReleased","button","LEFT","RIGHT","keyPressed","keyCode","ESCAPE","isLooping","noLoop","loop","forEach","item","deltaTime","closest","$824f9bbf6649b2f5$var$drawHelper","mx","my","fill"],"version":3,"file":"closest-path.05caadc4.js.map"}