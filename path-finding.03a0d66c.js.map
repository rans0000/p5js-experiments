{"mappings":"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","sources":["<anon>","src/scripts/path-finding-demo.ts","src/scripts/path-finding-states.ts","src/scripts/path-finding-manager.ts","src/libs/r-graph.ts"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire326b\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire326b\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $e93rA = parcelRequire(\"e93rA\");\n\nvar $7Pz0b = parcelRequire(\"7Pz0b\");\nlet $1617b9e1724ee5de$var$id = 0;\nclass $1617b9e1724ee5de$export$2e2bcd8739ae039 {\n    constructor(vertices = []){\n        this.id = `rgraph__${$1617b9e1724ee5de$var$id++}`;\n        this.vertices = vertices;\n        this.isGrid = false;\n    }\n    addVertex(vertex) {\n        if (vertex instanceof Array) {\n            this.vertices = this.vertices.concat(vertex);\n            return;\n        }\n        this.vertices.push(vertex);\n    }\n    buildGrid(rows, columns, vDataCallback, eDataCallback) {\n        this.isGrid = true;\n        this.vertices = [];\n        // build vertices\n        for(let y = 0; y < columns; y++)for(let x = 0; x < rows; x++){\n            const v = new $1617b9e1724ee5de$export$c9e40de5841265f1({\n                data: vDataCallback(x, y)\n            });\n            this.vertices.push(v);\n        }\n        // build edge connections\n        for(let y = 0; y < columns; y++)for(let x = 0; x < rows; x++){\n            const v = this.vertices[y * rows + x];\n            // top\n            if (y > 0) {\n                const i = (y - 1) * rows + x;\n                const endV = this.vertices[i];\n                v.setEdge(endV, true, eDataCallback(v, endV));\n            }\n            // bottom\n            if (y < rows - 1) {\n                const i = (y + 1) * rows + x;\n                const endV = this.vertices[i];\n                v.setEdge(endV, true, eDataCallback(v, endV));\n            }\n            // left\n            if (x > 0) {\n                const i = y * rows + (x - 1);\n                const endV = this.vertices[i];\n                v.setEdge(endV, true, eDataCallback(v, endV));\n            }\n            // right\n            if (x < columns - 1) {\n                const i = y * rows + (x + 1);\n                const endV = this.vertices[i];\n                v.setEdge(endV, true, eDataCallback(v, endV));\n            }\n        }\n    }\n}\nclass $1617b9e1724ee5de$export$c9e40de5841265f1 {\n    constructor(_config){\n        const config = {\n            edges: [],\n            data: undefined,\n            ..._config\n        };\n        this.id = `rvertex__${$1617b9e1724ee5de$var$id++}`;\n        this.edges = config.edges;\n        this.data = config.data;\n    }\n    setEdge(end, directed = false, data) {\n        const edge1 = new $1617b9e1724ee5de$export$6f8ea6530277f660(end, this, directed, data);\n        this.edges.push(edge1);\n    // @todo\n    // if (directed) {\n    //     const edge2 = new REdge<K, T>(this, end, directed, data);\n    //     end.edges.push(edge2);\n    // }\n    }\n}\nclass $1617b9e1724ee5de$export$6f8ea6530277f660 {\n    constructor(end, start, directed, data){\n        this.id = `redge__${$1617b9e1724ee5de$var$id++}`;\n        this.start = start;\n        this.end = end;\n        this.directed = directed;\n        this.data = data;\n    }\n}\n\n\nconst $d7fd600a4bdb5463$var$OFFSET = 10;\nconst $d7fd600a4bdb5463$var$RADIUS = 10;\nclass $d7fd600a4bdb5463$export$10fdbb2f012dd8f1 extends (0, $1617b9e1724ee5de$export$2e2bcd8739ae039) {\n    constructor(p5, vertices = []){\n        super(vertices);\n        this.p5 = p5;\n    }\n    draw() {\n        const { mouseX: mouseX, mouseY: mouseY } = this.p5;\n        this.p5.push();\n        this.p5.translate($d7fd600a4bdb5463$var$OFFSET, $d7fd600a4bdb5463$var$OFFSET);\n        for (const vertex of this.vertices)if (vertex.data) {\n            const vData = vertex.data;\n            // draw vertex\n            const dist = this.p5.dist(mouseX - $d7fd600a4bdb5463$var$OFFSET, mouseY - $d7fd600a4bdb5463$var$OFFSET, vData.pos[0], vData.pos[1]);\n            let color = vData.isWall ? [\n                0,\n                0,\n                15\n            ] : [\n                0,\n                0,\n                50\n            ];\n            color = dist < $d7fd600a4bdb5463$var$RADIUS ? [\n                200,\n                95,\n                100\n            ] : color;\n            this.p5.fill(color);\n            this.p5.noStroke();\n            this.p5.circle(vData.pos[0], vData.pos[1], $d7fd600a4bdb5463$var$RADIUS * 2);\n            this.p5.text(vData.num, vData.pos[0] - 5, vData.pos[1] + 5);\n            // draw edge\n            this.p5.stroke(30);\n            for (const edge of vertex.edges)if (edge.data) {\n                const eData = edge.data;\n                this.p5.line(eData.start[0], eData.start[1], eData.end[0], eData.end[1]);\n            }\n        }\n        this.p5.pop();\n    }\n    selectVertex([px, py]) {\n        for (const vertex of this.vertices)if (vertex.data) {\n            const vData = vertex.data;\n            const dist = this.p5.dist(px - $d7fd600a4bdb5463$var$OFFSET, py - $d7fd600a4bdb5463$var$OFFSET, vData.pos[0], vData.pos[1]);\n            if (dist < $d7fd600a4bdb5463$var$RADIUS) vData.isWall = !vData.isWall;\n        }\n    }\n}\n\n\nfunction $5123b61510027e30$export$682c268f7d232927(p5) {\n    let graph;\n    const uiMachine = {\n        state: \"START\",\n        actions: {\n            draw: function() {\n                if (!graph) return;\n                graph.draw();\n            },\n            changeToDraw: function() {\n                console.log(\"start - changing to draw...\");\n                uiMachine.changeState(\"DRAWGRID\");\n            },\n            toggleWalls: function(pos) {\n                if (!graph) return;\n                graph.selectVertex(pos);\n            },\n            changeToStart: function() {\n                console.log(\"start - changing to start...\");\n                uiMachine.changeState(\"START\");\n            }\n        },\n        transition: {},\n        dispatch: function(actionName, payload) {\n            const state = this.transition[this.state];\n            const action = state[actionName];\n            if (action) action.call(this, payload);\n            else console.log(`no method ${actionName}() in ${this.state}`);\n        },\n        changeState: function(newState) {\n            if (this.transition.hasOwnProperty(newState)) this.state = newState;\n        }\n    };\n    uiMachine.transition = {\n        START: {\n            draw: uiMachine.actions.draw.bind(uiMachine),\n            changeToDraw: uiMachine.actions.changeToDraw.bind(uiMachine)\n        },\n        DRAWGRID: {\n            draw: uiMachine.actions.draw.bind(uiMachine),\n            toggleWalls: uiMachine.actions.toggleWalls.bind(uiMachine),\n            changeToStart: uiMachine.actions.changeToStart.bind(uiMachine)\n        }\n    };\n    function createGraph(force = true) {\n        console.log(`creating graph... ${force}`);\n        if (graph && !force) return;\n        const size = 50;\n        const rows = 10;\n        // const columns = 3;\n        graph = new (0, $d7fd600a4bdb5463$export$10fdbb2f012dd8f1)(p5);\n        graph.buildGrid(rows, rows, (x, y)=>{\n            return {\n                num: y * rows + x,\n                x: x,\n                y: y,\n                pos: [\n                    x * size,\n                    y * size\n                ],\n                isWall: false\n            };\n        }, (start, end)=>{\n            return {\n                start: [\n                    start.data.pos[0],\n                    start.data.pos[1]\n                ],\n                end: [\n                    end.data.pos[0],\n                    end.data.pos[1]\n                ]\n            };\n        });\n    }\n    function dispatch(actionName, payload) {\n        return uiMachine.dispatch.call(uiMachine, actionName, payload);\n    }\n    return {\n        createGraph: createGraph,\n        dispatch: dispatch,\n        get state () {\n            return uiMachine.state;\n        }\n    };\n}\n\n\n/**--------------------------------- */ // sketch\nconst $490b6e5516a83444$var$sketch = (p5)=>{\n    let uiMachine = (0, $5123b61510027e30$export$682c268f7d232927)(p5);\n    const options = {\n        mode: \"view\",\n        populate: ()=>{\n            init(p5);\n        },\n        selectionSize: 100,\n        algo: \"dfs\"\n    };\n    const gui = new (0, $e93rA.GUI)({\n        autoPlace: false\n    });\n    gui.domElement.id = \"gui\";\n    document.getElementById(\"gui\")?.appendChild(gui.domElement);\n    gui.add(options, \"mode\", [\n        \"view\",\n        \"draw\"\n    ]).onChange((val)=>toggleDrawMode(val, false));\n    toggleDrawMode(\"view\", true);\n    function toggleDrawMode(val, force) {\n        let folder;\n        switch(val){\n            case \"view\":\n                folder = gui.addFolder(\"Search Algos\");\n                folder.open();\n                folder.add(options, \"algo\", [\n                    \"dfs\",\n                    \"bfs\"\n                ]);\n                uiMachine.dispatch(\"changeToStart\");\n                uiMachine.createGraph(force);\n                break;\n            case \"draw\":\n                folder = gui.__folders[\"Search Algos\"];\n                gui.removeFolder(folder);\n                uiMachine.dispatch(\"changeToDraw\");\n                break;\n            default:\n                break;\n        }\n    }\n    /** setup */ p5.setup = ()=>{\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\n        canvas.parent(\"app\");\n        p5.background(\"white\");\n        p5.pixelDensity(1);\n        p5.colorMode(p5.HSB);\n        // p5.noLoop();\n        window.addEventListener(\"resize\", ()=>resizeDisplay(p5));\n        //\n        init(p5);\n    };\n    /** draw */ p5.draw = ()=>{\n        p5.background(200, 60, 10);\n        uiMachine.dispatch(\"draw\");\n    };\n    p5.mouseClicked = (e)=>{\n        uiMachine.dispatch(\"toggleWalls\", [\n            e.clientX,\n            e.clientY\n        ]);\n    };\n    /**--------------------------------- */ // functions\n    function resizeDisplay(canvas) {\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\n    }\n    function init(p5) {\n        p5.background(200, 60, 10);\n    }\n/**--------------------------------- */ // classes\n};\nnew (0, (/*@__PURE__*/$parcel$interopDefault($7Pz0b)))($490b6e5516a83444$var$sketch);\n\n\n//# sourceMappingURL=path-finding.03a0d66c.js.map\n","import { GUI } from 'dat.gui';\r\nimport P5 from 'p5';\r\nimport { UIMachine } from './path-finding-states';\r\n// import { MOUSE_BTN } from 'src/utils/utils';\r\n\r\n/**--------------------------------- */\r\ntype TMode = 'view' | 'draw';\r\ntype TAlgo = 'dfs' | 'bfs' | 'dijkstra' | 'astar';\r\n\r\n/**--------------------------------- */\r\n// sketch\r\nconst sketch = (p5: P5) => {\r\n    let uiMachine = UIMachine(p5);\r\n\r\n    const options = {\r\n        mode: 'view' as TMode,\r\n        populate: () => {\r\n            init(p5);\r\n        },\r\n        selectionSize: 100,\r\n        algo: 'dfs' as TAlgo\r\n    };\r\n\r\n    const gui = new GUI({ autoPlace: false });\r\n    gui.domElement.id = 'gui';\r\n    document.getElementById('gui')?.appendChild(gui.domElement);\r\n    gui.add(options, 'mode', ['view', 'draw']).onChange((val: TMode) => toggleDrawMode(val, false));\r\n    toggleDrawMode('view', true);\r\n\r\n    function toggleDrawMode(val: TMode, force: boolean) {\r\n        let folder;\r\n        switch (val) {\r\n            case 'view':\r\n                folder = gui.addFolder('Search Algos');\r\n                folder.open();\r\n                folder.add(options, 'algo', ['dfs', 'bfs']);\r\n                uiMachine.dispatch('changeToStart');\r\n                uiMachine.createGraph(force);\r\n                break;\r\n            case 'draw':\r\n                folder = gui.__folders['Search Algos'];\r\n                gui.removeFolder(folder);\r\n                uiMachine.dispatch('changeToDraw');\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    /** setup */\r\n    p5.setup = () => {\r\n        const canvas = p5.createCanvas(window.innerWidth, window.innerHeight);\r\n        canvas.parent('app');\r\n        p5.background('white');\r\n        p5.pixelDensity(1);\r\n        p5.colorMode(p5.HSB);\r\n        // p5.noLoop();\r\n        window.addEventListener('resize', () => resizeDisplay(p5));\r\n\r\n        //\r\n        init(p5);\r\n    };\r\n\r\n    /** draw */\r\n    p5.draw = () => {\r\n        p5.background(200, 60, 10);\r\n        uiMachine.dispatch('draw');\r\n    };\r\n\r\n    p5.mouseClicked = (e: MouseEvent) => {\r\n        uiMachine.dispatch('toggleWalls', [e.clientX, e.clientY]);\r\n    };\r\n\r\n    /**--------------------------------- */\r\n    // functions\r\n\r\n    function resizeDisplay(canvas: P5) {\r\n        canvas.resizeCanvas(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n    function init(p5: P5) {\r\n        p5.background(200, 60, 10);\r\n    }\r\n\r\n    /**--------------------------------- */\r\n    // classes\r\n};\r\n\r\nnew P5(sketch);\r\n","import p5 from 'p5';\r\nimport { TEdgeData, TVertexData } from 'src/utils/types';\r\nimport { PathFindingManager } from './path-finding-manager';\r\n\r\ntype TState = 'START' | 'DRAWGRID';\r\ntype TActionName = 'draw' | 'changeToDraw' | 'changeToStart' | 'toggleWalls';\r\n\r\nexport function UIMachine(p5: p5) {\r\n    let graph: PathFindingManager<TVertexData, TEdgeData>;\r\n\r\n    const uiMachine = {\r\n        state: 'START' as TState,\r\n        actions: {\r\n            draw: function () {\r\n                if (!graph) return;\r\n                graph.draw();\r\n            },\r\n            changeToDraw: function () {\r\n                console.log('start - changing to draw...');\r\n                uiMachine.changeState('DRAWGRID');\r\n            },\r\n            toggleWalls: function (pos: [number, number]) {\r\n                if (!graph) return;\r\n                graph.selectVertex(pos);\r\n            },\r\n            changeToStart: function () {\r\n                console.log('start - changing to start...');\r\n                uiMachine.changeState('START');\r\n            }\r\n        },\r\n        transition: {} as Record<string, Record<string, Function>>,\r\n        dispatch: function (actionName: TActionName, payload?: unknown) {\r\n            const state = this.transition[this.state];\r\n            const action = state[actionName];\r\n\r\n            if (action) {\r\n                action.call(this, payload);\r\n            } else {\r\n                console.log(`no method ${actionName}() in ${this.state}`);\r\n            }\r\n        },\r\n        changeState: function (newState: TState) {\r\n            if (this.transition.hasOwnProperty(newState)) {\r\n                this.state = newState;\r\n            }\r\n        }\r\n    };\r\n    uiMachine.transition = {\r\n        START: {\r\n            draw: uiMachine.actions.draw.bind(uiMachine),\r\n            changeToDraw: uiMachine.actions.changeToDraw.bind(uiMachine)\r\n        },\r\n        DRAWGRID: {\r\n            draw: uiMachine.actions.draw.bind(uiMachine),\r\n            toggleWalls: uiMachine.actions.toggleWalls.bind(uiMachine),\r\n            changeToStart: uiMachine.actions.changeToStart.bind(uiMachine)\r\n        }\r\n    };\r\n\r\n    function createGraph(force: boolean = true) {\r\n        console.log(`creating graph... ${force}`);\r\n        if (graph && !force) return;\r\n\r\n        const size = 50;\r\n        const rows = 10;\r\n        // const columns = 3;\r\n        graph = new PathFindingManager<TVertexData, TEdgeData>(p5);\r\n        graph.buildGrid(\r\n            rows,\r\n            rows,\r\n            (x, y) => {\r\n                return {\r\n                    num: y * rows + x,\r\n                    x,\r\n                    y,\r\n                    pos: [x * size, y * size],\r\n                    isWall: false\r\n                };\r\n            },\r\n            (start, end) => {\r\n                return {\r\n                    start: [start.data!.pos[0], start.data!.pos[1]],\r\n                    end: [end.data!.pos[0], end.data!.pos[1]]\r\n                };\r\n            }\r\n        );\r\n    }\r\n\r\n    function dispatch(actionName: TActionName, payload?: unknown) {\r\n        return uiMachine.dispatch.call(uiMachine, actionName, payload);\r\n    }\r\n\r\n    return {\r\n        createGraph,\r\n        dispatch,\r\n        get state() {\r\n            return uiMachine.state;\r\n        }\r\n    };\r\n}\r\n","import P5 from 'p5';\r\nimport RGraph from 'src/libs/r-graph';\r\nimport { TEdgeData, TRVertex, TVertexData } from 'src/utils/types';\r\n\r\nconst OFFSET = 10;\r\nconst RADIUS = 10;\r\n\r\nexport class PathFindingManager<T, K> extends RGraph<T, K> {\r\n    p5: P5;\r\n\r\n    constructor(p5: P5, vertices: TRVertex<T, K>[] = []) {\r\n        super(vertices);\r\n        this.p5 = p5;\r\n    }\r\n\r\n    draw() {\r\n        const { mouseX, mouseY } = this.p5;\r\n        this.p5.push();\r\n        this.p5.translate(OFFSET, OFFSET);\r\n        for (const vertex of this.vertices) {\r\n            if (vertex.data) {\r\n                const vData = vertex.data as unknown as TVertexData;\r\n\r\n                // draw vertex\r\n                const dist = this.p5.dist(mouseX - OFFSET, mouseY - OFFSET, vData.pos[0], vData.pos[1]);\r\n                let color = vData.isWall ? [0, 0, 15] : [0, 0, 50];\r\n                color = dist < RADIUS ? [200, 95, 100] : color;\r\n\r\n                this.p5.fill(color);\r\n                this.p5.noStroke();\r\n                this.p5.circle(vData.pos[0], vData.pos[1], RADIUS * 2);\r\n                this.p5.text(vData.num, vData.pos[0] - 5, vData.pos[1] + 5);\r\n                // draw edge\r\n                this.p5.stroke(30);\r\n                for (const edge of vertex.edges) {\r\n                    if (edge.data) {\r\n                        const eData = edge.data as unknown as TEdgeData;\r\n                        this.p5.line(eData.start[0], eData.start[1], eData.end[0], eData.end[1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.p5.pop();\r\n    }\r\n\r\n    selectVertex([px, py]: [number, number]) {\r\n        for (const vertex of this.vertices) {\r\n            if (vertex.data) {\r\n                const vData = vertex.data as unknown as TVertexData;\r\n                const dist = this.p5.dist(px - OFFSET, py - OFFSET, vData.pos[0], vData.pos[1]);\r\n                if (dist < RADIUS) {\r\n                    vData.isWall = !vData.isWall;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { TREdge, TRGraph, TRVertex } from 'src/utils/types';\r\n\r\nlet id = 0;\r\n\r\nexport default class RGraph<T, K> implements TRGraph<T, K> {\r\n    id: string;\r\n    isGrid: boolean;\r\n    vertices: TRVertex<T, K>[];\r\n\r\n    constructor(vertices: TRVertex<T, K>[] = []) {\r\n        this.id = `rgraph__${id++}`;\r\n        this.vertices = vertices;\r\n        this.isGrid = false;\r\n    }\r\n\r\n    addVertex(vertex: TRVertex<T, K> | TRVertex<T, K>[]) {\r\n        if (vertex instanceof Array) {\r\n            this.vertices = this.vertices.concat(vertex);\r\n            return;\r\n        }\r\n        this.vertices.push(vertex);\r\n    }\r\n\r\n    buildGrid(\r\n        rows: number,\r\n        columns: number,\r\n        vDataCallback: (x: number, y: number) => T,\r\n        eDataCallback: (start: TRVertex<T, K>, end: TRVertex<T, K>) => K\r\n    ) {\r\n        this.isGrid = true;\r\n        this.vertices = [];\r\n        // build vertices\r\n        for (let y = 0; y < columns; y++) {\r\n            for (let x = 0; x < rows; x++) {\r\n                const v = new RVertex<T, K>({ data: vDataCallback(x, y) });\r\n                this.vertices.push(v);\r\n            }\r\n        }\r\n        // build edge connections\r\n        for (let y = 0; y < columns; y++) {\r\n            for (let x = 0; x < rows; x++) {\r\n                const v = this.vertices[y * rows + x];\r\n                // top\r\n                if (y > 0) {\r\n                    const i = (y - 1) * rows + x;\r\n                    const endV = this.vertices[i];\r\n                    v.setEdge(endV, true, eDataCallback(v, endV));\r\n                }\r\n                // bottom\r\n                if (y < rows - 1) {\r\n                    const i = (y + 1) * rows + x;\r\n                    const endV = this.vertices[i];\r\n                    v.setEdge(endV, true, eDataCallback(v, endV));\r\n                }\r\n                // left\r\n                if (x > 0) {\r\n                    const i = y * rows + (x - 1);\r\n                    const endV = this.vertices[i];\r\n                    v.setEdge(endV, true, eDataCallback(v, endV));\r\n                }\r\n                // right\r\n                if (x < columns - 1) {\r\n                    const i = y * rows + (x + 1);\r\n                    const endV = this.vertices[i];\r\n                    v.setEdge(endV, true, eDataCallback(v, endV));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class RVertex<T, K> implements TRVertex<T, K> {\r\n    id: string;\r\n    edges: TREdge<K, T>[];\r\n    data?: T;\r\n\r\n    constructor(_config?: Partial<Omit<TRVertex<T, K>, 'id' | 'setEdge'>>) {\r\n        const config: Omit<TRVertex<T, K>, 'id' | 'setEdge'> = { edges: [], data: undefined, ..._config };\r\n        this.id = `rvertex__${id++}`;\r\n        this.edges = config.edges;\r\n        this.data = config.data;\r\n    }\r\n\r\n    setEdge(end: TRVertex<T, K>, directed: boolean = false, data?: K) {\r\n        const edge1 = new REdge<K, T>(end, this, directed, data);\r\n        this.edges.push(edge1);\r\n        // @todo\r\n        // if (directed) {\r\n        //     const edge2 = new REdge<K, T>(this, end, directed, data);\r\n        //     end.edges.push(edge2);\r\n        // }\r\n    }\r\n}\r\n\r\nexport class REdge<K, T> implements TREdge<K, T> {\r\n    id: string;\r\n    directed: boolean;\r\n    start: TRVertex<T, K>;\r\n    end: TRVertex<T, K>;\r\n    data?: K;\r\n\r\n    constructor(end: TRVertex<T, K>, start: TRVertex<T, K>, directed: boolean, data?: K) {\r\n        this.id = `redge__${id++}`;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.directed = directed;\r\n        this.data = data;\r\n    }\r\n}\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$e93rA","$7Pz0b","$1617b9e1724ee5de$var$id","$1617b9e1724ee5de$export$2e2bcd8739ae039","constructor","vertices","isGrid","addVertex","vertex","Array","concat","push","buildGrid","rows","columns","vDataCallback","eDataCallback","y","x","v","$1617b9e1724ee5de$export$c9e40de5841265f1","data","i","endV","setEdge","_config","config","edges","undefined","end","directed","edge1","$1617b9e1724ee5de$export$6f8ea6530277f660","start","$d7fd600a4bdb5463$export$10fdbb2f012dd8f1","p5","draw","mouseX","mouseY","translate","vData","dist","pos","color","isWall","edge","fill","noStroke","circle","$d7fd600a4bdb5463$var$RADIUS","text","num","stroke","eData","line","pop","selectVertex","px","py","a","__esModule","default","uiMachine","graph","state","actions","changeToDraw","console","log","changeState","toggleWalls","changeToStart","transition","dispatch","actionName","payload","action","newState","hasOwnProperty","START","bind","DRAWGRID","createGraph","force","options","mode","populate","selectionSize","algo","gui","GUI","autoPlace","toggleDrawMode","val","folder","addFolder","open","add","__folders","removeFolder","background","domElement","document","getElementById","appendChild","onChange","setup","canvas","createCanvas","window","innerWidth","innerHeight","parent","pixelDensity","colorMode","HSB","addEventListener","resizeDisplay","resizeCanvas","mouseClicked","e","clientX","clientY"],"version":3,"file":"path-finding.03a0d66c.js.map"}